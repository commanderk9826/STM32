
LED_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000384c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080039e4  080039e4  000049e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b00  08003b00  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b00  08003b00  00004b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b08  08003b08  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b08  08003b08  00004b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b0c  08003b0c  00004b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000005c  08003b6c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08003b6c  000052f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8cb  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe0  00000000  00000000  00012957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00014938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c5  00000000  00000000  000155b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca7  00000000  00000000  00015f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebbc  00000000  00000000  0002cc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7fb  00000000  00000000  0003b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9fdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003650  00000000  00000000  000ca020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000cd670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080039cc 	.word	0x080039cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	080039cc 	.word	0x080039cc

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <setDuty>:
// 장치 선언
extern TIM_HandleTypeDef htim1;
extern UART_HandleTypeDef huart2;

// RGB LED PWM 설정 함수
void setDuty(uint8_t r, uint8_t g, uint8_t b) {
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
 80004e2:	460b      	mov	r3, r1
 80004e4:	71bb      	strb	r3, [r7, #6]
 80004e6:	4613      	mov	r3, r2
 80004e8:	717b      	strb	r3, [r7, #5]
    htim1.Instance->CCR1 = r*10;
 80004ea:	79fa      	ldrb	r2, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <setDuty+0x4c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	635a      	str	r2, [r3, #52]	@ 0x34
    htim1.Instance->CCR2 = g*10;
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	4613      	mov	r3, r2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	4413      	add	r3, r2
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	461a      	mov	r2, r3
 8000508:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <setDuty+0x4c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	639a      	str	r2, [r3, #56]	@ 0x38
    htim1.Instance->CCR3 = b*!0;
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <setDuty+0x4c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	797a      	ldrb	r2, [r7, #5]
 8000514:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	2000007c 	.word	0x2000007c

08000528 <app>:


uint8_t value[3];
void app() {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
    // 타이머 장치 시작
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Red
 800052e:	2100      	movs	r1, #0
 8000530:	4824      	ldr	r0, [pc, #144]	@ (80005c4 <app+0x9c>)
 8000532:	f001 fc4b 	bl	8001dcc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // Green
 8000536:	2104      	movs	r1, #4
 8000538:	4822      	ldr	r0, [pc, #136]	@ (80005c4 <app+0x9c>)
 800053a:	f001 fc47 	bl	8001dcc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Blue
 800053e:	2108      	movs	r1, #8
 8000540:	4820      	ldr	r0, [pc, #128]	@ (80005c4 <app+0x9c>)
 8000542:	f001 fc43 	bl	8001dcc <HAL_TIM_PWM_Start>
    //uart 장치 수신 활성화
    initUart(&huart2);
 8000546:	4820      	ldr	r0, [pc, #128]	@ (80005c8 <app+0xa0>)
 8000548:	f000 fb06 	bl	8000b58 <initUart>
    while (1) {
    	char *msg=getMessage();
 800054c:	f000 fb4a 	bl	8000be4 <getMessage>
 8000550:	6078      	str	r0, [r7, #4]
    	if(strlen(msg)>=12){
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f7ff fe40 	bl	80001d8 <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	2b0b      	cmp	r3, #11
 800055c:	d9f6      	bls.n	800054c <app+0x24>
    		if(msg[0] =='R' && msg[4]=='G' && msg[8]=='B'){
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b52      	cmp	r3, #82	@ 0x52
 8000564:	d1f2      	bne.n	800054c <app+0x24>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3304      	adds	r3, #4
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b47      	cmp	r3, #71	@ 0x47
 800056e:	d1ed      	bne.n	800054c <app+0x24>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3308      	adds	r3, #8
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b42      	cmp	r3, #66	@ 0x42
 8000578:	d1e8      	bne.n	800054c <app+0x24>
    			value[0]=atoi(&msg[1]);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3301      	adds	r3, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f003 f96a 	bl	8003858 <atoi>
 8000584:	4603      	mov	r3, r0
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <app+0xa4>)
 800058a:	701a      	strb	r2, [r3, #0]
    			value[1]=atoi(&msg[5]);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3305      	adds	r3, #5
 8000590:	4618      	mov	r0, r3
 8000592:	f003 f961 	bl	8003858 <atoi>
 8000596:	4603      	mov	r3, r0
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <app+0xa4>)
 800059c:	705a      	strb	r2, [r3, #1]
    			value[2]=atoi(&msg[9]);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3309      	adds	r3, #9
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f958 	bl	8003858 <atoi>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <app+0xa4>)
 80005ae:	709a      	strb	r2, [r3, #2]
    			setDuty(value[0], value[1], value[2]);
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <app+0xa4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4a05      	ldr	r2, [pc, #20]	@ (80005cc <app+0xa4>)
 80005b6:	7851      	ldrb	r1, [r2, #1]
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <app+0xa4>)
 80005ba:	7892      	ldrb	r2, [r2, #2]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff8b 	bl	80004d8 <setDuty>
    while (1) {
 80005c2:	e7c3      	b.n	800054c <app+0x24>
 80005c4:	2000007c 	.word	0x2000007c
 80005c8:	200000c4 	.word	0x200000c4
 80005cc:	20000078 	.word	0x20000078

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fb60 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f80a 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f94c 	bl	8000878 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005e0:	f000 f864 	bl	80006ac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f91e 	bl	8000824 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 80005e8:	f7ff ff9e 	bl	8000528 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x1c>

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	@ 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 f9b2 	bl	8003968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <SystemClock_Config+0xb4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <SystemClock_Config+0xb4>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <SystemClock_Config+0xb4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <SystemClock_Config+0xb8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <SystemClock_Config+0xb8>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <SystemClock_Config+0xb8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 feb3 	bl	80013cc <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800066c:	f000 f91e 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f916 	bl	80018bc <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000696:	f000 f909 	bl	80008ac <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	@ 0x58
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2220      	movs	r2, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 f93f 	bl	8003968 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ea:	4b4c      	ldr	r3, [pc, #304]	@ (800081c <MX_TIM1_Init+0x170>)
 80006ec:	4a4c      	ldr	r2, [pc, #304]	@ (8000820 <MX_TIM1_Init+0x174>)
 80006ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80006f0:	4b4a      	ldr	r3, [pc, #296]	@ (800081c <MX_TIM1_Init+0x170>)
 80006f2:	220f      	movs	r2, #15
 80006f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f6:	4b49      	ldr	r3, [pc, #292]	@ (800081c <MX_TIM1_Init+0x170>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80006fc:	4b47      	ldr	r3, [pc, #284]	@ (800081c <MX_TIM1_Init+0x170>)
 80006fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000702:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b45      	ldr	r3, [pc, #276]	@ (800081c <MX_TIM1_Init+0x170>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070a:	4b44      	ldr	r3, [pc, #272]	@ (800081c <MX_TIM1_Init+0x170>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000710:	4b42      	ldr	r3, [pc, #264]	@ (800081c <MX_TIM1_Init+0x170>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000716:	4841      	ldr	r0, [pc, #260]	@ (800081c <MX_TIM1_Init+0x170>)
 8000718:	f001 fab0 	bl	8001c7c <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000722:	f000 f8c3 	bl	80008ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000730:	4619      	mov	r1, r3
 8000732:	483a      	ldr	r0, [pc, #232]	@ (800081c <MX_TIM1_Init+0x170>)
 8000734:	f001 fcbc 	bl	80020b0 <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800073e:	f000 f8b5 	bl	80008ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000742:	4836      	ldr	r0, [pc, #216]	@ (800081c <MX_TIM1_Init+0x170>)
 8000744:	f001 fae9 	bl	8001d1a <HAL_TIM_PWM_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800074e:	f000 f8ad 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800075e:	4619      	mov	r1, r3
 8000760:	482e      	ldr	r0, [pc, #184]	@ (800081c <MX_TIM1_Init+0x170>)
 8000762:	f002 f845 	bl	80027f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800076c:	f000 f89e 	bl	80008ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000770:	2360      	movs	r3, #96	@ 0x60
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500-1;
 8000774:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	4821      	ldr	r0, [pc, #132]	@ (800081c <MX_TIM1_Init+0x170>)
 8000798:	f001 fbc8 	bl	8001f2c <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80007a2:	f000 f883 	bl	80008ac <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	2204      	movs	r2, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	481a      	ldr	r0, [pc, #104]	@ (800081c <MX_TIM1_Init+0x170>)
 80007b4:	f001 fbba 	bl	8001f2c <HAL_TIM_PWM_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007be:	f000 f875 	bl	80008ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	2208      	movs	r2, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	4814      	ldr	r0, [pc, #80]	@ (800081c <MX_TIM1_Init+0x170>)
 80007cc:	f001 fbae 	bl	8001f2c <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007d6:	f000 f869 	bl	80008ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <MX_TIM1_Init+0x170>)
 80007fe:	f002 f865 	bl	80028cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8000808:	f000 f850 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <MX_TIM1_Init+0x170>)
 800080e:	f000 f89d 	bl	800094c <HAL_TIM_MspPostInit>

}
 8000812:	bf00      	nop
 8000814:	3758      	adds	r7, #88	@ 0x58
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000007c 	.word	0x2000007c
 8000820:	40010000 	.word	0x40010000

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	@ (8000874 <MX_USART2_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_USART2_UART_Init+0x4c>)
 800085c:	f002 f888 	bl	8002970 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 f821 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000c4 	.word	0x200000c4
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_GPIO_Init+0x30>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a08      	ldr	r2, [pc, #32]	@ (80008a8 <MX_GPIO_Init+0x30>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_GPIO_Init+0x30>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <HAL_MspInit+0x4c>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	4a08      	ldr	r2, [pc, #32]	@ (8000904 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0b      	ldr	r2, [pc, #44]	@ (8000944 <HAL_TIM_Base_MspInit+0x3c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10d      	bne.n	8000936 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <HAL_TIM_Base_MspInit+0x40>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	4a09      	ldr	r2, [pc, #36]	@ (8000948 <HAL_TIM_Base_MspInit+0x40>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6453      	str	r3, [r2, #68]	@ 0x44
 800092a:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <HAL_TIM_Base_MspInit+0x40>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40010000 	.word	0x40010000
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <HAL_TIM_MspPostInit+0x68>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d11e      	bne.n	80009ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <HAL_TIM_MspPostInit+0x6c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a10      	ldr	r2, [pc, #64]	@ (80009b8 <HAL_TIM_MspPostInit+0x6c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <HAL_TIM_MspPostInit+0x6c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800098a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800098e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <HAL_TIM_MspPostInit+0x70>)
 80009a8:	f000 fb8c 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40010000 	.word	0x40010000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <HAL_UART_MspInit+0x94>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d133      	bne.n	8000a4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <HAL_UART_MspInit+0x98>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <HAL_UART_MspInit+0x98>)
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <HAL_UART_MspInit+0x98>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_UART_MspInit+0x98>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a14      	ldr	r2, [pc, #80]	@ (8000a58 <HAL_UART_MspInit+0x98>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_UART_MspInit+0x98>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <HAL_UART_MspInit+0x9c>)
 8000a36:	f000 fb45 	bl	80010c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2026      	movs	r0, #38	@ 0x26
 8000a40:	f000 fa77 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a44:	2026      	movs	r0, #38	@ 0x26
 8000a46:	f000 fa90 	bl	8000f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	@ 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <MemManage_Handler+0x4>

08000a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 f941 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <USART2_IRQHandler+0x10>)
 8000ac6:	f001 ffc9 	bl	8002a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000c4 	.word	0x200000c4

08000ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <HAL_UART_RxCpltCallback>:
	return len;
}


//수신 인터럽트(interrupt=event) 콜백(listner, isr)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	//수신된 문자 저장
	rxBuffer[rxBufferWriteIndex++]=rxCharacter;
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_UART_RxCpltCallback+0x4c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	490f      	ldr	r1, [pc, #60]	@ (8000b44 <HAL_UART_RxCpltCallback+0x4c>)
 8000b08:	600a      	str	r2, [r1, #0]
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b48 <HAL_UART_RxCpltCallback+0x50>)
 8000b0c:	7811      	ldrb	r1, [r2, #0]
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <HAL_UART_RxCpltCallback+0x54>)
 8000b10:	54d1      	strb	r1, [r2, r3]
	//최대값 도달 시 처음으로
	rxBufferWriteIndex %=rxBufferMax;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_UART_RxCpltCallback+0x4c>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <HAL_UART_RxCpltCallback+0x58>)
 8000b18:	fb83 1302 	smull	r1, r3, r3, r2
 8000b1c:	1159      	asrs	r1, r3, #5
 8000b1e:	17d3      	asrs	r3, r2, #31
 8000b20:	1acb      	subs	r3, r1, r3
 8000b22:	2164      	movs	r1, #100	@ 0x64
 8000b24:	fb01 f303 	mul.w	r3, r1, r3
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	4a06      	ldr	r2, [pc, #24]	@ (8000b44 <HAL_UART_RxCpltCallback+0x4c>)
 8000b2c:	6013      	str	r3, [r2, #0]
	//인터럽트 재 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_UART_RxCpltCallback+0x5c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2201      	movs	r2, #1
 8000b34:	4904      	ldr	r1, [pc, #16]	@ (8000b48 <HAL_UART_RxCpltCallback+0x50>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 ff6a 	bl	8002a10 <HAL_UART_Receive_IT>

}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000017c 	.word	0x2000017c
 8000b48:	20000110 	.word	0x20000110
 8000b4c:	20000114 	.word	0x20000114
 8000b50:	51eb851f 	.word	0x51eb851f
 8000b54:	2000010c 	.word	0x2000010c

08000b58 <initUart>:


// uart 장치 초기
void initUart(UART_HandleTypeDef *inHuart){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	//uart 장치 주소 백업
	myHuart = inHuart;
 8000b60:	4a06      	ldr	r2, [pc, #24]	@ (8000b7c <initUart+0x24>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
	//인터럽트 셋팅
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8000b66:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <initUart+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4904      	ldr	r1, [pc, #16]	@ (8000b80 <initUart+0x28>)
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 ff4e 	bl	8002a10 <HAL_UART_Receive_IT>

}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000010c 	.word	0x2000010c
 8000b80:	20000110 	.word	0x20000110

08000b84 <getUart>:

char getUart(){
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
	char result;
	if(rxBufferReadIndex == rxBufferWriteIndex) return 0;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <getUart+0x50>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <getUart+0x54>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d101      	bne.n	8000b9a <getUart+0x16>
 8000b96:	2300      	movs	r3, #0
 8000b98:	e016      	b.n	8000bc8 <getUart+0x44>
	result = rxBuffer[rxBufferReadIndex++];
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <getUart+0x50>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <getUart+0x50>)
 8000ba2:	600a      	str	r2, [r1, #0]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <getUart+0x58>)
 8000ba6:	5cd3      	ldrb	r3, [r2, r3]
 8000ba8:	71fb      	strb	r3, [r7, #7]
	rxBufferReadIndex %=rxBufferMax;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <getUart+0x50>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <getUart+0x5c>)
 8000bb0:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb4:	1159      	asrs	r1, r3, #5
 8000bb6:	17d3      	asrs	r3, r2, #31
 8000bb8:	1acb      	subs	r3, r1, r3
 8000bba:	2164      	movs	r1, #100	@ 0x64
 8000bbc:	fb01 f303 	mul.w	r3, r1, r3
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <getUart+0x50>)
 8000bc4:	6013      	str	r3, [r2, #0]
	return result;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	20000178 	.word	0x20000178
 8000bd8:	2000017c 	.word	0x2000017c
 8000bdc:	20000114 	.word	0x20000114
 8000be0:	51eb851f 	.word	0x51eb851f

08000be4 <getMessage>:

char* getMessage(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
	static char message[50];
	static uint8_t messageCount=0;
	char ch = getUart();
 8000bea:	f7ff ffcb 	bl	8000b84 <getUart>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	if(ch!=0){
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d01b      	beq.n	8000c30 <getMessage+0x4c>
		if(ch=='\n'||ch=='\r'){
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	d002      	beq.n	8000c04 <getMessage+0x20>
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b0d      	cmp	r3, #13
 8000c02:	d108      	bne.n	8000c16 <getMessage+0x32>
			messageCount =0;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <getMessage+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
			memset(message, 0, 50);
 8000c0a:	2232      	movs	r2, #50	@ 0x32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <getMessage+0x5c>)
 8000c10:	f002 feaa 	bl	8003968 <memset>
 8000c14:	e00c      	b.n	8000c30 <getMessage+0x4c>
		}
		else if(ch>=0x20){
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	d909      	bls.n	8000c30 <getMessage+0x4c>
			message[messageCount++]=ch;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <getMessage+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	b2d1      	uxtb	r1, r2
 8000c24:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <getMessage+0x58>)
 8000c26:	7011      	strb	r1, [r2, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <getMessage+0x5c>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	5453      	strb	r3, [r2, r1]
		}
	}
	return message;
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <getMessage+0x5c>)

}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000180 	.word	0x20000180
 8000c40:	20000184 	.word	0x20000184

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c48:	f7ff ff44 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f002 fe87 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fcab 	bl	80005d0 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c88:	08003b10 	.word	0x08003b10
  ldr r2, =_sbss
 8000c8c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c90:	200002f4 	.word	0x200002f4

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f92b 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fdf4 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f943 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d18:	f000 f90b 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200001b8 	.word	0x200001b8

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200001b8 	.word	0x200001b8

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000efc:	f7ff ff8e 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff29 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff3e 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff8e 	bl	8000e70 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5d 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff31 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffa2 	bl	8000ed8 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000faa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff feda 	bl	8000d64 <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d008      	beq.n	8000fd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2280      	movs	r2, #128	@ 0x80
 8000fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e052      	b.n	8001076 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0216 	bic.w	r2, r2, #22
 8000fde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	695a      	ldr	r2, [r3, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d103      	bne.n	8001000 <HAL_DMA_Abort+0x62>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0208 	bic.w	r2, r2, #8
 800100e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001020:	e013      	b.n	800104a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001022:	f7ff fe9f 	bl	8000d64 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b05      	cmp	r3, #5
 800102e:	d90c      	bls.n	800104a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2220      	movs	r2, #32
 8001034:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e015      	b.n	8001076 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e4      	bne.n	8001022 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800105c:	223f      	movs	r2, #63	@ 0x3f
 800105e:	409a      	lsls	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d004      	beq.n	800109c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e00c      	b.n	80010b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2205      	movs	r2, #5
 80010a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0201 	bic.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	@ 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	e159      	b.n	8001394 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 8148 	bne.w	800138e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b01      	cmp	r3, #1
 8001108:	d005      	beq.n	8001116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001112:	2b02      	cmp	r3, #2
 8001114:	d130      	bne.n	8001178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 0201 	and.w	r2, r3, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b03      	cmp	r3, #3
 8001182:	d017      	beq.n	80011b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d123      	bne.n	8001208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	69b9      	ldr	r1, [r7, #24]
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0203 	and.w	r2, r3, #3
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a2 	beq.w	800138e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b57      	ldr	r3, [pc, #348]	@ (80013ac <HAL_GPIO_Init+0x2e8>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	4a56      	ldr	r2, [pc, #344]	@ (80013ac <HAL_GPIO_Init+0x2e8>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001258:	6453      	str	r3, [r2, #68]	@ 0x44
 800125a:	4b54      	ldr	r3, [pc, #336]	@ (80013ac <HAL_GPIO_Init+0x2e8>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001266:	4a52      	ldr	r2, [pc, #328]	@ (80013b0 <HAL_GPIO_Init+0x2ec>)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a49      	ldr	r2, [pc, #292]	@ (80013b4 <HAL_GPIO_Init+0x2f0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x202>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a48      	ldr	r2, [pc, #288]	@ (80013b8 <HAL_GPIO_Init+0x2f4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x1fe>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a47      	ldr	r2, [pc, #284]	@ (80013bc <HAL_GPIO_Init+0x2f8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x1fa>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a46      	ldr	r2, [pc, #280]	@ (80013c0 <HAL_GPIO_Init+0x2fc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x1f6>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a45      	ldr	r2, [pc, #276]	@ (80013c4 <HAL_GPIO_Init+0x300>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x1f2>
 80012b2:	2304      	movs	r3, #4
 80012b4:	e008      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012ba:	2303      	movs	r3, #3
 80012bc:	e004      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012be:	2302      	movs	r3, #2
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012c6:	2300      	movs	r3, #0
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	f002 0203 	and.w	r2, r2, #3
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	4093      	lsls	r3, r2
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d8:	4935      	ldr	r1, [pc, #212]	@ (80013b0 <HAL_GPIO_Init+0x2ec>)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b38      	ldr	r3, [pc, #224]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a2f      	ldr	r2, [pc, #188]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a24      	ldr	r2, [pc, #144]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133a:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800135e:	4a1a      	ldr	r2, [pc, #104]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001388:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <HAL_GPIO_Init+0x304>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3301      	adds	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	f67f aea2 	bls.w	80010e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e267      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d075      	beq.n	80014d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013ea:	4b88      	ldr	r3, [pc, #544]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d00c      	beq.n	8001410 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f6:	4b85      	ldr	r3, [pc, #532]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d112      	bne.n	8001428 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001402:	4b82      	ldr	r3, [pc, #520]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800140e:	d10b      	bne.n	8001428 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	4b7e      	ldr	r3, [pc, #504]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d05b      	beq.n	80014d4 <HAL_RCC_OscConfig+0x108>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d157      	bne.n	80014d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e242      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001430:	d106      	bne.n	8001440 <HAL_RCC_OscConfig+0x74>
 8001432:	4b76      	ldr	r3, [pc, #472]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a75      	ldr	r2, [pc, #468]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e01d      	b.n	800147c <HAL_RCC_OscConfig+0xb0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x98>
 800144a:	4b70      	ldr	r3, [pc, #448]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6f      	ldr	r2, [pc, #444]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b6d      	ldr	r3, [pc, #436]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a6c      	ldr	r2, [pc, #432]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0xb0>
 8001464:	4b69      	ldr	r3, [pc, #420]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a68      	ldr	r2, [pc, #416]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b66      	ldr	r3, [pc, #408]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a65      	ldr	r2, [pc, #404]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fc6e 	bl	8000d64 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fc6a 	bl	8000d64 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e207      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b5b      	ldr	r3, [pc, #364]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0xc0>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc5a 	bl	8000d64 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fc56 	bl	8000d64 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	@ 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e1f3      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	4b51      	ldr	r3, [pc, #324]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0xe8>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d063      	beq.n	80015aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014e2:	4b4a      	ldr	r3, [pc, #296]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d11c      	bne.n	8001534 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fa:	4b44      	ldr	r3, [pc, #272]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d116      	bne.n	8001534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	4b41      	ldr	r3, [pc, #260]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_RCC_OscConfig+0x152>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e1c7      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b3b      	ldr	r3, [pc, #236]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4937      	ldr	r1, [pc, #220]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	e03a      	b.n	80015aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153c:	4b34      	ldr	r3, [pc, #208]	@ (8001610 <HAL_RCC_OscConfig+0x244>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fc0f 	bl	8000d64 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff fc0b 	bl	8000d64 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e1a8      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b28      	ldr	r3, [pc, #160]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4925      	ldr	r1, [pc, #148]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <HAL_RCC_OscConfig+0x244>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fbee 	bl	8000d64 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff fbea 	bl	8000d64 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e187      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d036      	beq.n	8001624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d016      	beq.n	80015ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <HAL_RCC_OscConfig+0x248>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fbce 	bl	8000d64 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fbca 	bl	8000d64 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e167      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80015e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x200>
 80015ea:	e01b      	b.n	8001624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_RCC_OscConfig+0x248>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fbb7 	bl	8000d64 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	e00e      	b.n	8001618 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fbb3 	bl	8000d64 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d907      	bls.n	8001618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e150      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
 800160c:	40023800 	.word	0x40023800
 8001610:	42470000 	.word	0x42470000
 8001614:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	4b88      	ldr	r3, [pc, #544]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 800161a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ea      	bne.n	80015fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8097 	beq.w	8001760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001636:	4b81      	ldr	r3, [pc, #516]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10f      	bne.n	8001662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b7d      	ldr	r3, [pc, #500]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4a7c      	ldr	r2, [pc, #496]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
 8001652:	4b7a      	ldr	r3, [pc, #488]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165e:	2301      	movs	r3, #1
 8001660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	4b77      	ldr	r3, [pc, #476]	@ (8001840 <HAL_RCC_OscConfig+0x474>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d118      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166e:	4b74      	ldr	r3, [pc, #464]	@ (8001840 <HAL_RCC_OscConfig+0x474>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a73      	ldr	r2, [pc, #460]	@ (8001840 <HAL_RCC_OscConfig+0x474>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167a:	f7ff fb73 	bl	8000d64 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001682:	f7ff fb6f 	bl	8000d64 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e10c      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	4b6a      	ldr	r3, [pc, #424]	@ (8001840 <HAL_RCC_OscConfig+0x474>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x2ea>
 80016a8:	4b64      	ldr	r3, [pc, #400]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ac:	4a63      	ldr	r2, [pc, #396]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b4:	e01c      	b.n	80016f0 <HAL_RCC_OscConfig+0x324>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x30c>
 80016be:	4b5f      	ldr	r3, [pc, #380]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	4a5e      	ldr	r2, [pc, #376]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ca:	4b5c      	ldr	r3, [pc, #368]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ce:	4a5b      	ldr	r2, [pc, #364]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x324>
 80016d8:	4b58      	ldr	r3, [pc, #352]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a57      	ldr	r2, [pc, #348]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e4:	4b55      	ldr	r3, [pc, #340]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e8:	4a54      	ldr	r2, [pc, #336]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016ea:	f023 0304 	bic.w	r3, r3, #4
 80016ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d015      	beq.n	8001724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff fb34 	bl	8000d64 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f7ff fb30 	bl	8000d64 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e0cb      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001716:	4b49      	ldr	r3, [pc, #292]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0ee      	beq.n	8001700 <HAL_RCC_OscConfig+0x334>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fb1e 	bl	8000d64 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff fb1a 	bl	8000d64 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0b5      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001742:	4b3e      	ldr	r3, [pc, #248]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ee      	bne.n	800172c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b39      	ldr	r3, [pc, #228]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	4a38      	ldr	r2, [pc, #224]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 800175a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80a1 	beq.w	80018ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800176a:	4b34      	ldr	r3, [pc, #208]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b08      	cmp	r3, #8
 8001774:	d05c      	beq.n	8001830 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d141      	bne.n	8001802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b31      	ldr	r3, [pc, #196]	@ (8001844 <HAL_RCC_OscConfig+0x478>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff faee 	bl	8000d64 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff faea 	bl	8000d64 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e087      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	4b27      	ldr	r3, [pc, #156]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	019b      	lsls	r3, r3, #6
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	491b      	ldr	r1, [pc, #108]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <HAL_RCC_OscConfig+0x478>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fac3 	bl	8000d64 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff fabf 	bl	8000d64 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e05c      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x416>
 8001800:	e054      	b.n	80018ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <HAL_RCC_OscConfig+0x478>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff faac 	bl	8000d64 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff faa8 	bl	8000d64 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e045      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x444>
 800182e:	e03d      	b.n	80018ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d107      	bne.n	8001848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e038      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
 800183c:	40023800 	.word	0x40023800
 8001840:	40007000 	.word	0x40007000
 8001844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <HAL_RCC_OscConfig+0x4ec>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d028      	beq.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d121      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d11a      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001878:	4013      	ands	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800187e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001880:	4293      	cmp	r3, r2
 8001882:	d111      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188e:	085b      	lsrs	r3, r3, #1
 8001890:	3b01      	subs	r3, #1
 8001892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0cc      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b68      	ldr	r3, [pc, #416]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d90c      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b65      	ldr	r3, [pc, #404]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b63      	ldr	r3, [pc, #396]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0b8      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001910:	4b59      	ldr	r3, [pc, #356]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a58      	ldr	r2, [pc, #352]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800191a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a52      	ldr	r2, [pc, #328]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b50      	ldr	r3, [pc, #320]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	494d      	ldr	r1, [pc, #308]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d044      	beq.n	80019dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d119      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e07f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d003      	beq.n	800197a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001976:	2b03      	cmp	r3, #3
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e06f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e067      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199a:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f023 0203 	bic.w	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4934      	ldr	r1, [pc, #208]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ac:	f7ff f9da 	bl	8000d64 <HAL_GetTick>
 80019b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b4:	f7ff f9d6 	bl	8000d64 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e04f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 020c 	and.w	r2, r3, #12
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1eb      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019dc:	4b25      	ldr	r3, [pc, #148]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d20c      	bcs.n	8001a04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b20      	ldr	r3, [pc, #128]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e032      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4916      	ldr	r1, [pc, #88]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	490e      	ldr	r1, [pc, #56]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a42:	f000 f821 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	490a      	ldr	r1, [pc, #40]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f93a 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	080039e4 	.word	0x080039e4
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a8c:	b090      	sub	sp, #64	@ 0x40
 8001a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa0:	4b59      	ldr	r3, [pc, #356]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	f200 80a1 	bhi.w	8001bf4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x34>
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aba:	e09b      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ac0:	e09b      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac2:	4b53      	ldr	r3, [pc, #332]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ac6:	e098      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ad0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad2:	4b4d      	ldr	r3, [pc, #308]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d028      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4b4a      	ldr	r3, [pc, #296]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	627a      	str	r2, [r7, #36]	@ 0x24
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001af0:	2100      	movs	r1, #0
 8001af2:	4b47      	ldr	r3, [pc, #284]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001af4:	fb03 f201 	mul.w	r2, r3, r1
 8001af8:	2300      	movs	r3, #0
 8001afa:	fb00 f303 	mul.w	r3, r0, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	4a43      	ldr	r2, [pc, #268]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b02:	fba0 1202 	umull	r1, r2, r0, r2
 8001b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b08:	460a      	mov	r2, r1
 8001b0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b0e:	4413      	add	r3, r2
 8001b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b14:	2200      	movs	r2, #0
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	61fa      	str	r2, [r7, #28]
 8001b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b22:	f7fe fb61 	bl	80001e8 <__aeabi_uldivmod>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b2e:	e053      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b30:	4b35      	ldr	r3, [pc, #212]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	2200      	movs	r2, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	617a      	str	r2, [r7, #20]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b42:	f04f 0b00 	mov.w	fp, #0
 8001b46:	4652      	mov	r2, sl
 8001b48:	465b      	mov	r3, fp
 8001b4a:	f04f 0000 	mov.w	r0, #0
 8001b4e:	f04f 0100 	mov.w	r1, #0
 8001b52:	0159      	lsls	r1, r3, #5
 8001b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b58:	0150      	lsls	r0, r2, #5
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b62:	eb63 090b 	sbc.w	r9, r3, fp
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b7a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b7e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	00eb      	lsls	r3, r5, #3
 8001b8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b90:	00e2      	lsls	r2, r4, #3
 8001b92:	4614      	mov	r4, r2
 8001b94:	461d      	mov	r5, r3
 8001b96:	eb14 030a 	adds.w	r3, r4, sl
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	eb45 030b 	adc.w	r3, r5, fp
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bae:	4629      	mov	r1, r5
 8001bb0:	028b      	lsls	r3, r1, #10
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb8:	4621      	mov	r1, r4
 8001bba:	028a      	lsls	r2, r1, #10
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	60fa      	str	r2, [r7, #12]
 8001bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bcc:	f7fe fb0c 	bl	80001e8 <__aeabi_uldivmod>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	3301      	adds	r3, #1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001be8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bf2:	e002      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8001bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3740      	adds	r7, #64	@ 0x40
 8001c00:	46bd      	mov	sp, r7
 8001c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	017d7840 	.word	0x017d7840

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c30:	f7ff fff0 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0a9b      	lsrs	r3, r3, #10
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4903      	ldr	r1, [pc, #12]	@ (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	080039f4 	.word	0x080039f4

08001c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c58:	f7ff ffdc 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0b5b      	lsrs	r3, r3, #13
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	@ (8001c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	080039f4 	.word	0x080039f4

08001c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e041      	b.n	8001d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe fe30 	bl	8000908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f000 fac0 	bl	8002240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e041      	b.n	8001db0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d106      	bne.n	8001d46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f839 	bl	8001db8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f000 fa71 	bl	8002240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_TIM_PWM_Start+0x24>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e022      	b.n	8001e36 <HAL_TIM_PWM_Start+0x6a>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d109      	bne.n	8001e0a <HAL_TIM_PWM_Start+0x3e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	e015      	b.n	8001e36 <HAL_TIM_PWM_Start+0x6a>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d109      	bne.n	8001e24 <HAL_TIM_PWM_Start+0x58>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	e008      	b.n	8001e36 <HAL_TIM_PWM_Start+0x6a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	bf14      	ite	ne
 8001e30:	2301      	movne	r3, #1
 8001e32:	2300      	moveq	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e068      	b.n	8001f10 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d104      	bne.n	8001e4e <HAL_TIM_PWM_Start+0x82>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e4c:	e013      	b.n	8001e76 <HAL_TIM_PWM_Start+0xaa>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d104      	bne.n	8001e5e <HAL_TIM_PWM_Start+0x92>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e5c:	e00b      	b.n	8001e76 <HAL_TIM_PWM_Start+0xaa>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d104      	bne.n	8001e6e <HAL_TIM_PWM_Start+0xa2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e6c:	e003      	b.n	8001e76 <HAL_TIM_PWM_Start+0xaa>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fc90 	bl	80027a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a23      	ldr	r2, [pc, #140]	@ (8001f18 <HAL_TIM_PWM_Start+0x14c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d107      	bne.n	8001e9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f18 <HAL_TIM_PWM_Start+0x14c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d018      	beq.n	8001eda <HAL_TIM_PWM_Start+0x10e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb0:	d013      	beq.n	8001eda <HAL_TIM_PWM_Start+0x10e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a19      	ldr	r2, [pc, #100]	@ (8001f1c <HAL_TIM_PWM_Start+0x150>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00e      	beq.n	8001eda <HAL_TIM_PWM_Start+0x10e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <HAL_TIM_PWM_Start+0x154>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_TIM_PWM_Start+0x10e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <HAL_TIM_PWM_Start+0x158>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d004      	beq.n	8001eda <HAL_TIM_PWM_Start+0x10e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a14      	ldr	r2, [pc, #80]	@ (8001f28 <HAL_TIM_PWM_Start+0x15c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d111      	bne.n	8001efe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b06      	cmp	r3, #6
 8001eea:	d010      	beq.n	8001f0e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efc:	e007      	b.n	8001f0e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800
 8001f24:	40000c00 	.word	0x40000c00
 8001f28:	40014000 	.word	0x40014000

08001f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e0ae      	b.n	80020a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	f200 809f 	bhi.w	8002098 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f95 	.word	0x08001f95
 8001f64:	08002099 	.word	0x08002099
 8001f68:	08002099 	.word	0x08002099
 8001f6c:	08002099 	.word	0x08002099
 8001f70:	08001fd5 	.word	0x08001fd5
 8001f74:	08002099 	.word	0x08002099
 8001f78:	08002099 	.word	0x08002099
 8001f7c:	08002099 	.word	0x08002099
 8001f80:	08002017 	.word	0x08002017
 8001f84:	08002099 	.word	0x08002099
 8001f88:	08002099 	.word	0x08002099
 8001f8c:	08002099 	.word	0x08002099
 8001f90:	08002057 	.word	0x08002057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f9dc 	bl	8002358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0208 	orr.w	r2, r2, #8
 8001fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0204 	bic.w	r2, r2, #4
 8001fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6999      	ldr	r1, [r3, #24]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	619a      	str	r2, [r3, #24]
      break;
 8001fd2:	e064      	b.n	800209e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fa22 	bl	8002424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6999      	ldr	r1, [r3, #24]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	021a      	lsls	r2, r3, #8
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	619a      	str	r2, [r3, #24]
      break;
 8002014:	e043      	b.n	800209e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fa6d 	bl	80024fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0208 	orr.w	r2, r2, #8
 8002030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0204 	bic.w	r2, r2, #4
 8002040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69d9      	ldr	r1, [r3, #28]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	61da      	str	r2, [r3, #28]
      break;
 8002054:	e023      	b.n	800209e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fab7 	bl	80025d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69d9      	ldr	r1, [r3, #28]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	021a      	lsls	r2, r3, #8
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	61da      	str	r2, [r3, #28]
      break;
 8002096:	e002      	b.n	800209e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
      break;
 800209c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_TIM_ConfigClockSource+0x1c>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e0b4      	b.n	8002236 <HAL_TIM_ConfigClockSource+0x186>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002104:	d03e      	beq.n	8002184 <HAL_TIM_ConfigClockSource+0xd4>
 8002106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800210a:	f200 8087 	bhi.w	800221c <HAL_TIM_ConfigClockSource+0x16c>
 800210e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002112:	f000 8086 	beq.w	8002222 <HAL_TIM_ConfigClockSource+0x172>
 8002116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211a:	d87f      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x16c>
 800211c:	2b70      	cmp	r3, #112	@ 0x70
 800211e:	d01a      	beq.n	8002156 <HAL_TIM_ConfigClockSource+0xa6>
 8002120:	2b70      	cmp	r3, #112	@ 0x70
 8002122:	d87b      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x16c>
 8002124:	2b60      	cmp	r3, #96	@ 0x60
 8002126:	d050      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0x11a>
 8002128:	2b60      	cmp	r3, #96	@ 0x60
 800212a:	d877      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x16c>
 800212c:	2b50      	cmp	r3, #80	@ 0x50
 800212e:	d03c      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0xfa>
 8002130:	2b50      	cmp	r3, #80	@ 0x50
 8002132:	d873      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x16c>
 8002134:	2b40      	cmp	r3, #64	@ 0x40
 8002136:	d058      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x13a>
 8002138:	2b40      	cmp	r3, #64	@ 0x40
 800213a:	d86f      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x16c>
 800213c:	2b30      	cmp	r3, #48	@ 0x30
 800213e:	d064      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x15a>
 8002140:	2b30      	cmp	r3, #48	@ 0x30
 8002142:	d86b      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x16c>
 8002144:	2b20      	cmp	r3, #32
 8002146:	d060      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x15a>
 8002148:	2b20      	cmp	r3, #32
 800214a:	d867      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x16c>
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05c      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x15a>
 8002150:	2b10      	cmp	r3, #16
 8002152:	d05a      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x15a>
 8002154:	e062      	b.n	800221c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002166:	f000 fafd 	bl	8002764 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	609a      	str	r2, [r3, #8]
      break;
 8002182:	e04f      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002194:	f000 fae6 	bl	8002764 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021a6:	609a      	str	r2, [r3, #8]
      break;
 80021a8:	e03c      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	461a      	mov	r2, r3
 80021b8:	f000 fa5a 	bl	8002670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2150      	movs	r1, #80	@ 0x50
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fab3 	bl	800272e <TIM_ITRx_SetConfig>
      break;
 80021c8:	e02c      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021d6:	461a      	mov	r2, r3
 80021d8:	f000 fa79 	bl	80026ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2160      	movs	r1, #96	@ 0x60
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 faa3 	bl	800272e <TIM_ITRx_SetConfig>
      break;
 80021e8:	e01c      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f6:	461a      	mov	r2, r3
 80021f8:	f000 fa3a 	bl	8002670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2140      	movs	r1, #64	@ 0x40
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fa93 	bl	800272e <TIM_ITRx_SetConfig>
      break;
 8002208:	e00c      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f000 fa8a 	bl	800272e <TIM_ITRx_SetConfig>
      break;
 800221a:	e003      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      break;
 8002220:	e000      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3a      	ldr	r2, [pc, #232]	@ (800233c <TIM_Base_SetConfig+0xfc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00f      	beq.n	8002278 <TIM_Base_SetConfig+0x38>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800225e:	d00b      	beq.n	8002278 <TIM_Base_SetConfig+0x38>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a37      	ldr	r2, [pc, #220]	@ (8002340 <TIM_Base_SetConfig+0x100>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <TIM_Base_SetConfig+0x38>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a36      	ldr	r2, [pc, #216]	@ (8002344 <TIM_Base_SetConfig+0x104>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <TIM_Base_SetConfig+0x38>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a35      	ldr	r2, [pc, #212]	@ (8002348 <TIM_Base_SetConfig+0x108>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d108      	bne.n	800228a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800227e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <TIM_Base_SetConfig+0xfc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01b      	beq.n	80022ca <TIM_Base_SetConfig+0x8a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002298:	d017      	beq.n	80022ca <TIM_Base_SetConfig+0x8a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a28      	ldr	r2, [pc, #160]	@ (8002340 <TIM_Base_SetConfig+0x100>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <TIM_Base_SetConfig+0x8a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a27      	ldr	r2, [pc, #156]	@ (8002344 <TIM_Base_SetConfig+0x104>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00f      	beq.n	80022ca <TIM_Base_SetConfig+0x8a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a26      	ldr	r2, [pc, #152]	@ (8002348 <TIM_Base_SetConfig+0x108>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00b      	beq.n	80022ca <TIM_Base_SetConfig+0x8a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a25      	ldr	r2, [pc, #148]	@ (800234c <TIM_Base_SetConfig+0x10c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <TIM_Base_SetConfig+0x8a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a24      	ldr	r2, [pc, #144]	@ (8002350 <TIM_Base_SetConfig+0x110>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d003      	beq.n	80022ca <TIM_Base_SetConfig+0x8a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a23      	ldr	r2, [pc, #140]	@ (8002354 <TIM_Base_SetConfig+0x114>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d108      	bne.n	80022dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a0e      	ldr	r2, [pc, #56]	@ (800233c <TIM_Base_SetConfig+0xfc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d103      	bne.n	8002310 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f023 0201 	bic.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	611a      	str	r2, [r3, #16]
  }
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000
 8002340:	40000400 	.word	0x40000400
 8002344:	40000800 	.word	0x40000800
 8002348:	40000c00 	.word	0x40000c00
 800234c:	40014000 	.word	0x40014000
 8002350:	40014400 	.word	0x40014400
 8002354:	40014800 	.word	0x40014800

08002358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f023 0201 	bic.w	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f023 0302 	bic.w	r3, r3, #2
 80023a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002420 <TIM_OC1_SetConfig+0xc8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d10c      	bne.n	80023ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f023 0308 	bic.w	r3, r3, #8
 80023ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a13      	ldr	r2, [pc, #76]	@ (8002420 <TIM_OC1_SetConfig+0xc8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d111      	bne.n	80023fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	621a      	str	r2, [r3, #32]
}
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40010000 	.word	0x40010000

08002424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f023 0210 	bic.w	r2, r3, #16
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800245a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f023 0320 	bic.w	r3, r3, #32
 800246e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <TIM_OC2_SetConfig+0xd4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10d      	bne.n	80024a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800248a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800249e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a15      	ldr	r2, [pc, #84]	@ (80024f8 <TIM_OC2_SetConfig+0xd4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d113      	bne.n	80024d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	621a      	str	r2, [r3, #32]
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40010000 	.word	0x40010000

080024fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800252a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0303 	bic.w	r3, r3, #3
 8002532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <TIM_OC3_SetConfig+0xd0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10d      	bne.n	8002576 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <TIM_OC3_SetConfig+0xd0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d113      	bne.n	80025a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800258c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40010000 	.word	0x40010000

080025d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800261a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	031b      	lsls	r3, r3, #12
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a10      	ldr	r2, [pc, #64]	@ (800266c <TIM_OC4_SetConfig+0x9c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d109      	bne.n	8002644 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	019b      	lsls	r3, r3, #6
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	621a      	str	r2, [r3, #32]
}
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40010000 	.word	0x40010000

08002670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f023 0201 	bic.w	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800269a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f023 030a 	bic.w	r3, r3, #10
 80026ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	621a      	str	r2, [r3, #32]
}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b087      	sub	sp, #28
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f023 0210 	bic.w	r2, r3, #16
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80026f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	031b      	lsls	r3, r3, #12
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800270a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	621a      	str	r2, [r3, #32]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	f043 0307 	orr.w	r3, r3, #7
 8002750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800277e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	021a      	lsls	r2, r3, #8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	431a      	orrs	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	609a      	str	r2, [r3, #8]
}
 8002798:	bf00      	nop
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2201      	movs	r2, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a1a      	ldr	r2, [r3, #32]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	401a      	ands	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	431a      	orrs	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	621a      	str	r2, [r3, #32]
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002804:	2302      	movs	r3, #2
 8002806:	e050      	b.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800282e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1c      	ldr	r2, [pc, #112]	@ (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d018      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002854:	d013      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00e      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a16      	ldr	r2, [pc, #88]	@ (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d009      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d004      	beq.n	800287e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a13      	ldr	r2, [pc, #76]	@ (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10c      	bne.n	8002898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	4313      	orrs	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40010000 	.word	0x40010000
 80028bc:	40000400 	.word	0x40000400
 80028c0:	40000800 	.word	0x40000800
 80028c4:	40000c00 	.word	0x40000c00
 80028c8:	40014000 	.word	0x40014000

080028cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e03d      	b.n	8002964 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e042      	b.n	8002a08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe f812 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	@ 0x24
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fcdb 	bl	8003370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	d112      	bne.n	8002a50 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_UART_Receive_IT+0x26>
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00b      	b.n	8002a52 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 faba 	bl	8002fc0 <UART_Start_Receive_IT>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	e000      	b.n	8002a52 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0ba      	sub	sp, #232	@ 0xe8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x66>
 8002aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fb99 	bl	80031f2 <UART_Receive_IT>
      return;
 8002ac0:	e25b      	b.n	8002f7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80de 	beq.w	8002c88 <HAL_UART_IRQHandler+0x22c>
 8002acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002adc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80d1 	beq.w	8002c88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_UART_IRQHandler+0xae>
 8002af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_UART_IRQHandler+0xd2>
 8002b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	f043 0202 	orr.w	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <HAL_UART_IRQHandler+0xf6>
 8002b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d011      	beq.n	8002b82 <HAL_UART_IRQHandler+0x126>
 8002b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	f043 0208 	orr.w	r2, r3, #8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 81f2 	beq.w	8002f70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_UART_IRQHandler+0x14e>
 8002b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fb24 	bl	80031f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb4:	2b40      	cmp	r3, #64	@ 0x40
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x17a>
 8002bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04f      	beq.n	8002c76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa2c 	bl	8003034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be6:	2b40      	cmp	r3, #64	@ 0x40
 8002be8:	d141      	bne.n	8002c6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3314      	adds	r3, #20
 8002bf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3314      	adds	r3, #20
 8002c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1d9      	bne.n	8002bea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d013      	beq.n	8002c66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c42:	4a7e      	ldr	r2, [pc, #504]	@ (8002e3c <HAL_UART_IRQHandler+0x3e0>)
 8002c44:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fa17 	bl	800107e <HAL_DMA_Abort_IT>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c60:	4610      	mov	r0, r2
 8002c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e00e      	b.n	8002c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f994 	bl	8002f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e00a      	b.n	8002c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f990 	bl	8002f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e006      	b.n	8002c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f98c 	bl	8002f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c82:	e175      	b.n	8002f70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	bf00      	nop
    return;
 8002c86:	e173      	b.n	8002f70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f040 814f 	bne.w	8002f30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8148 	beq.w	8002f30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8141 	beq.w	8002f30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cce:	2b40      	cmp	r3, #64	@ 0x40
 8002cd0:	f040 80b6 	bne.w	8002e40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8145 	beq.w	8002f74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	f080 813e 	bcs.w	8002f74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d0a:	f000 8088 	beq.w	8002e1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	330c      	adds	r3, #12
 8002d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1d9      	bne.n	8002d0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3314      	adds	r3, #20
 8002d60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e1      	bne.n	8002d5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002dba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002dc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e3      	bne.n	8002d96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002dec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dee:	f023 0310 	bic.w	r3, r3, #16
 8002df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e3      	bne.n	8002ddc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe f8c0 	bl	8000f9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f8b7 	bl	8002fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e3a:	e09b      	b.n	8002f74 <HAL_UART_IRQHandler+0x518>
 8002e3c:	080030fb 	.word	0x080030fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 808e 	beq.w	8002f78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8089 	beq.w	8002f78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e3      	bne.n	8002e66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	623b      	str	r3, [r7, #32]
   return(result);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ec2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eca:	e841 2300 	strex	r3, r2, [r1]
 8002ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1e3      	bne.n	8002e9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0310 	bic.w	r3, r3, #16
 8002efa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f08:	61fa      	str	r2, [r7, #28]
 8002f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	69b9      	ldr	r1, [r7, #24]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	617b      	str	r3, [r7, #20]
   return(result);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e3      	bne.n	8002ee4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f83d 	bl	8002fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f2e:	e023      	b.n	8002f78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <HAL_UART_IRQHandler+0x4f4>
 8002f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8ea 	bl	8003122 <UART_Transmit_IT>
    return;
 8002f4e:	e014      	b.n	8002f7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <HAL_UART_IRQHandler+0x51e>
 8002f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f92a 	bl	80031c2 <UART_EndTransmit_IT>
    return;
 8002f6e:	e004      	b.n	8002f7a <HAL_UART_IRQHandler+0x51e>
    return;
 8002f70:	bf00      	nop
 8002f72:	e002      	b.n	8002f7a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f74:	bf00      	nop
 8002f76:	e000      	b.n	8002f7a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f78:	bf00      	nop
  }
}
 8002f7a:	37e8      	adds	r7, #232	@ 0xe8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	88fa      	ldrh	r2, [r7, #6]
 8002fd8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	88fa      	ldrh	r2, [r7, #6]
 8002fde:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2222      	movs	r2, #34	@ 0x22
 8002fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003004:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0220 	orr.w	r2, r2, #32
 8003024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003034:	b480      	push	{r7}
 8003036:	b095      	sub	sp, #84	@ 0x54
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800305c:	643a      	str	r2, [r7, #64]	@ 0x40
 800305e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800306a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e5      	bne.n	800303c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3314      	adds	r3, #20
 8003076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003098:	e841 2300 	strex	r3, r2, [r1]
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e5      	bne.n	8003070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d119      	bne.n	80030e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f023 0310 	bic.w	r3, r3, #16
 80030c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030cc:	61ba      	str	r2, [r7, #24]
 80030ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6979      	ldr	r1, [r7, #20]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	613b      	str	r3, [r7, #16]
   return(result);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e5      	bne.n	80030ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030ee:	bf00      	nop
 80030f0:	3754      	adds	r7, #84	@ 0x54
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff ff3d 	bl	8002f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b21      	cmp	r3, #33	@ 0x21
 8003134:	d13e      	bne.n	80031b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	d114      	bne.n	800316a <UART_Transmit_IT+0x48>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d110      	bne.n	800316a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	1c9a      	adds	r2, r3, #2
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	621a      	str	r2, [r3, #32]
 8003168:	e008      	b.n	800317c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	1c59      	adds	r1, r3, #1
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6211      	str	r1, [r2, #32]
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29b      	uxth	r3, r3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4619      	mov	r1, r3
 800318a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800319e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fecc 	bl	8002f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b08c      	sub	sp, #48	@ 0x30
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b22      	cmp	r3, #34	@ 0x22
 8003204:	f040 80ae 	bne.w	8003364 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003210:	d117      	bne.n	8003242 <UART_Receive_IT+0x50>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d113      	bne.n	8003242 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003230:	b29a      	uxth	r2, r3
 8003232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003234:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	1c9a      	adds	r2, r3, #2
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003240:	e026      	b.n	8003290 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003248:	2300      	movs	r3, #0
 800324a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003254:	d007      	beq.n	8003266 <UART_Receive_IT+0x74>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <UART_Receive_IT+0x82>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e008      	b.n	8003286 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003280:	b2da      	uxtb	r2, r3
 8003282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003284:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29b      	uxth	r3, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4619      	mov	r1, r3
 800329e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d15d      	bne.n	8003360 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0220 	bic.w	r2, r2, #32
 80032b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d135      	bne.n	8003356 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f023 0310 	bic.w	r3, r3, #16
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003310:	623a      	str	r2, [r7, #32]
 8003312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	69f9      	ldr	r1, [r7, #28]
 8003316:	6a3a      	ldr	r2, [r7, #32]
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	61bb      	str	r3, [r7, #24]
   return(result);
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e5      	bne.n	80032f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b10      	cmp	r3, #16
 8003330:	d10a      	bne.n	8003348 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fe2a 	bl	8002fa8 <HAL_UARTEx_RxEventCallback>
 8003354:	e002      	b.n	800335c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fd fbce 	bl	8000af8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e002      	b.n	8003366 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3730      	adds	r7, #48	@ 0x30
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b0c0      	sub	sp, #256	@ 0x100
 8003376:	af00      	add	r7, sp, #0
 8003378:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	ea40 0301 	orr.w	r3, r0, r1
 8003398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033c8:	f021 010c 	bic.w	r1, r1, #12
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033d6:	430b      	orrs	r3, r1
 80033d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	6999      	ldr	r1, [r3, #24]
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	ea40 0301 	orr.w	r3, r0, r1
 80033f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b8f      	ldr	r3, [pc, #572]	@ (800363c <UART_SetConfig+0x2cc>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d005      	beq.n	8003410 <UART_SetConfig+0xa0>
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b8d      	ldr	r3, [pc, #564]	@ (8003640 <UART_SetConfig+0x2d0>)
 800340c:	429a      	cmp	r2, r3
 800340e:	d104      	bne.n	800341a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fc20 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 8003414:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003418:	e003      	b.n	8003422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800341a:	f7fe fc07 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 800341e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342c:	f040 810c 	bne.w	8003648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800343a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800343e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003442:	4622      	mov	r2, r4
 8003444:	462b      	mov	r3, r5
 8003446:	1891      	adds	r1, r2, r2
 8003448:	65b9      	str	r1, [r7, #88]	@ 0x58
 800344a:	415b      	adcs	r3, r3
 800344c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800344e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003452:	4621      	mov	r1, r4
 8003454:	eb12 0801 	adds.w	r8, r2, r1
 8003458:	4629      	mov	r1, r5
 800345a:	eb43 0901 	adc.w	r9, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	4623      	mov	r3, r4
 8003478:	eb18 0303 	adds.w	r3, r8, r3
 800347c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003480:	462b      	mov	r3, r5
 8003482:	eb49 0303 	adc.w	r3, r9, r3
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003496:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800349a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800349e:	460b      	mov	r3, r1
 80034a0:	18db      	adds	r3, r3, r3
 80034a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80034a4:	4613      	mov	r3, r2
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034b4:	f7fc fe98 	bl	80001e8 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4b61      	ldr	r3, [pc, #388]	@ (8003644 <UART_SetConfig+0x2d4>)
 80034be:	fba3 2302 	umull	r2, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	011c      	lsls	r4, r3, #4
 80034c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	1891      	adds	r1, r2, r2
 80034de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034e0:	415b      	adcs	r3, r3
 80034e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034e8:	4641      	mov	r1, r8
 80034ea:	eb12 0a01 	adds.w	sl, r2, r1
 80034ee:	4649      	mov	r1, r9
 80034f0:	eb43 0b01 	adc.w	fp, r3, r1
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003508:	4692      	mov	sl, r2
 800350a:	469b      	mov	fp, r3
 800350c:	4643      	mov	r3, r8
 800350e:	eb1a 0303 	adds.w	r3, sl, r3
 8003512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003516:	464b      	mov	r3, r9
 8003518:	eb4b 0303 	adc.w	r3, fp, r3
 800351c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800352c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003534:	460b      	mov	r3, r1
 8003536:	18db      	adds	r3, r3, r3
 8003538:	643b      	str	r3, [r7, #64]	@ 0x40
 800353a:	4613      	mov	r3, r2
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	647b      	str	r3, [r7, #68]	@ 0x44
 8003542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800354a:	f7fc fe4d 	bl	80001e8 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4611      	mov	r1, r2
 8003554:	4b3b      	ldr	r3, [pc, #236]	@ (8003644 <UART_SetConfig+0x2d4>)
 8003556:	fba3 2301 	umull	r2, r3, r3, r1
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2264      	movs	r2, #100	@ 0x64
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800356a:	4b36      	ldr	r3, [pc, #216]	@ (8003644 <UART_SetConfig+0x2d4>)
 800356c:	fba3 2302 	umull	r2, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003578:	441c      	add	r4, r3
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003584:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003594:	415b      	adcs	r3, r3
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800359c:	4641      	mov	r1, r8
 800359e:	1851      	adds	r1, r2, r1
 80035a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80035a2:	4649      	mov	r1, r9
 80035a4:	414b      	adcs	r3, r1
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035b4:	4659      	mov	r1, fp
 80035b6:	00cb      	lsls	r3, r1, #3
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035be:	4651      	mov	r1, sl
 80035c0:	00ca      	lsls	r2, r1, #3
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	4642      	mov	r2, r8
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035d0:	464b      	mov	r3, r9
 80035d2:	460a      	mov	r2, r1
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035f0:	460b      	mov	r3, r1
 80035f2:	18db      	adds	r3, r3, r3
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f6:	4613      	mov	r3, r2
 80035f8:	eb42 0303 	adc.w	r3, r2, r3
 80035fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003606:	f7fc fdef 	bl	80001e8 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <UART_SetConfig+0x2d4>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	@ 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	3332      	adds	r3, #50	@ 0x32
 8003622:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <UART_SetConfig+0x2d4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 0207 	and.w	r2, r3, #7
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4422      	add	r2, r4
 8003636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003638:	e106      	b.n	8003848 <UART_SetConfig+0x4d8>
 800363a:	bf00      	nop
 800363c:	40011000 	.word	0x40011000
 8003640:	40011400 	.word	0x40011400
 8003644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003652:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800365a:	4642      	mov	r2, r8
 800365c:	464b      	mov	r3, r9
 800365e:	1891      	adds	r1, r2, r2
 8003660:	6239      	str	r1, [r7, #32]
 8003662:	415b      	adcs	r3, r3
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
 8003666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800366a:	4641      	mov	r1, r8
 800366c:	1854      	adds	r4, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0501 	adc.w	r5, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	00eb      	lsls	r3, r5, #3
 800367e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003682:	00e2      	lsls	r2, r4, #3
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	4643      	mov	r3, r8
 800368a:	18e3      	adds	r3, r4, r3
 800368c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003690:	464b      	mov	r3, r9
 8003692:	eb45 0303 	adc.w	r3, r5, r3
 8003696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036b6:	4629      	mov	r1, r5
 80036b8:	008b      	lsls	r3, r1, #2
 80036ba:	4621      	mov	r1, r4
 80036bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c0:	4621      	mov	r1, r4
 80036c2:	008a      	lsls	r2, r1, #2
 80036c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036c8:	f7fc fd8e 	bl	80001e8 <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4b60      	ldr	r3, [pc, #384]	@ (8003854 <UART_SetConfig+0x4e4>)
 80036d2:	fba3 2302 	umull	r2, r3, r3, r2
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	011c      	lsls	r4, r3, #4
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	61b9      	str	r1, [r7, #24]
 80036f4:	415b      	adcs	r3, r3
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	4641      	mov	r1, r8
 80036fe:	1851      	adds	r1, r2, r1
 8003700:	6139      	str	r1, [r7, #16]
 8003702:	4649      	mov	r1, r9
 8003704:	414b      	adcs	r3, r1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003714:	4659      	mov	r1, fp
 8003716:	00cb      	lsls	r3, r1, #3
 8003718:	4651      	mov	r1, sl
 800371a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371e:	4651      	mov	r1, sl
 8003720:	00ca      	lsls	r2, r1, #3
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	4603      	mov	r3, r0
 8003728:	4642      	mov	r2, r8
 800372a:	189b      	adds	r3, r3, r2
 800372c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003730:	464b      	mov	r3, r9
 8003732:	460a      	mov	r2, r1
 8003734:	eb42 0303 	adc.w	r3, r2, r3
 8003738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003754:	4649      	mov	r1, r9
 8003756:	008b      	lsls	r3, r1, #2
 8003758:	4641      	mov	r1, r8
 800375a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375e:	4641      	mov	r1, r8
 8003760:	008a      	lsls	r2, r1, #2
 8003762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003766:	f7fc fd3f 	bl	80001e8 <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4611      	mov	r1, r2
 8003770:	4b38      	ldr	r3, [pc, #224]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003772:	fba3 2301 	umull	r2, r3, r3, r1
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2264      	movs	r2, #100	@ 0x64
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	1acb      	subs	r3, r1, r3
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	3332      	adds	r3, #50	@ 0x32
 8003784:	4a33      	ldr	r2, [pc, #204]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003790:	441c      	add	r4, r3
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	673b      	str	r3, [r7, #112]	@ 0x70
 800379a:	677a      	str	r2, [r7, #116]	@ 0x74
 800379c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	415b      	adcs	r3, r3
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e2:	464b      	mov	r3, r9
 80037e4:	460a      	mov	r2, r1
 80037e6:	eb42 0303 	adc.w	r3, r2, r3
 80037ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80037f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003804:	4649      	mov	r1, r9
 8003806:	008b      	lsls	r3, r1, #2
 8003808:	4641      	mov	r1, r8
 800380a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380e:	4641      	mov	r1, r8
 8003810:	008a      	lsls	r2, r1, #2
 8003812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003816:	f7fc fce7 	bl	80001e8 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003820:	fba3 1302 	umull	r1, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	2164      	movs	r1, #100	@ 0x64
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	3332      	adds	r3, #50	@ 0x32
 8003832:	4a08      	ldr	r2, [pc, #32]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4422      	add	r2, r4
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	bf00      	nop
 800384a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800384e:	46bd      	mov	sp, r7
 8003850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003854:	51eb851f 	.word	0x51eb851f

08003858 <atoi>:
 8003858:	220a      	movs	r2, #10
 800385a:	2100      	movs	r1, #0
 800385c:	f000 b87a 	b.w	8003954 <strtol>

08003860 <_strtol_l.constprop.0>:
 8003860:	2b24      	cmp	r3, #36	@ 0x24
 8003862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003866:	4686      	mov	lr, r0
 8003868:	4690      	mov	r8, r2
 800386a:	d801      	bhi.n	8003870 <_strtol_l.constprop.0+0x10>
 800386c:	2b01      	cmp	r3, #1
 800386e:	d106      	bne.n	800387e <_strtol_l.constprop.0+0x1e>
 8003870:	f000 f882 	bl	8003978 <__errno>
 8003874:	2316      	movs	r3, #22
 8003876:	6003      	str	r3, [r0, #0]
 8003878:	2000      	movs	r0, #0
 800387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387e:	4834      	ldr	r0, [pc, #208]	@ (8003950 <_strtol_l.constprop.0+0xf0>)
 8003880:	460d      	mov	r5, r1
 8003882:	462a      	mov	r2, r5
 8003884:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003888:	5d06      	ldrb	r6, [r0, r4]
 800388a:	f016 0608 	ands.w	r6, r6, #8
 800388e:	d1f8      	bne.n	8003882 <_strtol_l.constprop.0+0x22>
 8003890:	2c2d      	cmp	r4, #45	@ 0x2d
 8003892:	d12d      	bne.n	80038f0 <_strtol_l.constprop.0+0x90>
 8003894:	782c      	ldrb	r4, [r5, #0]
 8003896:	2601      	movs	r6, #1
 8003898:	1c95      	adds	r5, r2, #2
 800389a:	f033 0210 	bics.w	r2, r3, #16
 800389e:	d109      	bne.n	80038b4 <_strtol_l.constprop.0+0x54>
 80038a0:	2c30      	cmp	r4, #48	@ 0x30
 80038a2:	d12a      	bne.n	80038fa <_strtol_l.constprop.0+0x9a>
 80038a4:	782a      	ldrb	r2, [r5, #0]
 80038a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80038aa:	2a58      	cmp	r2, #88	@ 0x58
 80038ac:	d125      	bne.n	80038fa <_strtol_l.constprop.0+0x9a>
 80038ae:	786c      	ldrb	r4, [r5, #1]
 80038b0:	2310      	movs	r3, #16
 80038b2:	3502      	adds	r5, #2
 80038b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80038b8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80038bc:	2200      	movs	r2, #0
 80038be:	fbbc f9f3 	udiv	r9, ip, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80038c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80038cc:	2f09      	cmp	r7, #9
 80038ce:	d81b      	bhi.n	8003908 <_strtol_l.constprop.0+0xa8>
 80038d0:	463c      	mov	r4, r7
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	dd27      	ble.n	8003926 <_strtol_l.constprop.0+0xc6>
 80038d6:	1c57      	adds	r7, r2, #1
 80038d8:	d007      	beq.n	80038ea <_strtol_l.constprop.0+0x8a>
 80038da:	4581      	cmp	r9, r0
 80038dc:	d320      	bcc.n	8003920 <_strtol_l.constprop.0+0xc0>
 80038de:	d101      	bne.n	80038e4 <_strtol_l.constprop.0+0x84>
 80038e0:	45a2      	cmp	sl, r4
 80038e2:	db1d      	blt.n	8003920 <_strtol_l.constprop.0+0xc0>
 80038e4:	fb00 4003 	mla	r0, r0, r3, r4
 80038e8:	2201      	movs	r2, #1
 80038ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038ee:	e7eb      	b.n	80038c8 <_strtol_l.constprop.0+0x68>
 80038f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80038f2:	bf04      	itt	eq
 80038f4:	782c      	ldrbeq	r4, [r5, #0]
 80038f6:	1c95      	addeq	r5, r2, #2
 80038f8:	e7cf      	b.n	800389a <_strtol_l.constprop.0+0x3a>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1da      	bne.n	80038b4 <_strtol_l.constprop.0+0x54>
 80038fe:	2c30      	cmp	r4, #48	@ 0x30
 8003900:	bf0c      	ite	eq
 8003902:	2308      	moveq	r3, #8
 8003904:	230a      	movne	r3, #10
 8003906:	e7d5      	b.n	80038b4 <_strtol_l.constprop.0+0x54>
 8003908:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800390c:	2f19      	cmp	r7, #25
 800390e:	d801      	bhi.n	8003914 <_strtol_l.constprop.0+0xb4>
 8003910:	3c37      	subs	r4, #55	@ 0x37
 8003912:	e7de      	b.n	80038d2 <_strtol_l.constprop.0+0x72>
 8003914:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003918:	2f19      	cmp	r7, #25
 800391a:	d804      	bhi.n	8003926 <_strtol_l.constprop.0+0xc6>
 800391c:	3c57      	subs	r4, #87	@ 0x57
 800391e:	e7d8      	b.n	80038d2 <_strtol_l.constprop.0+0x72>
 8003920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003924:	e7e1      	b.n	80038ea <_strtol_l.constprop.0+0x8a>
 8003926:	1c53      	adds	r3, r2, #1
 8003928:	d108      	bne.n	800393c <_strtol_l.constprop.0+0xdc>
 800392a:	2322      	movs	r3, #34	@ 0x22
 800392c:	f8ce 3000 	str.w	r3, [lr]
 8003930:	4660      	mov	r0, ip
 8003932:	f1b8 0f00 	cmp.w	r8, #0
 8003936:	d0a0      	beq.n	800387a <_strtol_l.constprop.0+0x1a>
 8003938:	1e69      	subs	r1, r5, #1
 800393a:	e006      	b.n	800394a <_strtol_l.constprop.0+0xea>
 800393c:	b106      	cbz	r6, 8003940 <_strtol_l.constprop.0+0xe0>
 800393e:	4240      	negs	r0, r0
 8003940:	f1b8 0f00 	cmp.w	r8, #0
 8003944:	d099      	beq.n	800387a <_strtol_l.constprop.0+0x1a>
 8003946:	2a00      	cmp	r2, #0
 8003948:	d1f6      	bne.n	8003938 <_strtol_l.constprop.0+0xd8>
 800394a:	f8c8 1000 	str.w	r1, [r8]
 800394e:	e794      	b.n	800387a <_strtol_l.constprop.0+0x1a>
 8003950:	080039fd 	.word	0x080039fd

08003954 <strtol>:
 8003954:	4613      	mov	r3, r2
 8003956:	460a      	mov	r2, r1
 8003958:	4601      	mov	r1, r0
 800395a:	4802      	ldr	r0, [pc, #8]	@ (8003964 <strtol+0x10>)
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	f7ff bf7f 	b.w	8003860 <_strtol_l.constprop.0>
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c

08003968 <memset>:
 8003968:	4402      	add	r2, r0
 800396a:	4603      	mov	r3, r0
 800396c:	4293      	cmp	r3, r2
 800396e:	d100      	bne.n	8003972 <memset+0xa>
 8003970:	4770      	bx	lr
 8003972:	f803 1b01 	strb.w	r1, [r3], #1
 8003976:	e7f9      	b.n	800396c <memset+0x4>

08003978 <__errno>:
 8003978:	4b01      	ldr	r3, [pc, #4]	@ (8003980 <__errno+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	2000000c 	.word	0x2000000c

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4d0d      	ldr	r5, [pc, #52]	@ (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	@ (80039c0 <__libc_init_array+0x3c>)
 800398a:	1b64      	subs	r4, r4, r5
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2600      	movs	r6, #0
 8003990:	42a6      	cmp	r6, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4d0b      	ldr	r5, [pc, #44]	@ (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	@ (80039c8 <__libc_init_array+0x44>)
 8003998:	f000 f818 	bl	80039cc <_init>
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2600      	movs	r6, #0
 80039a2:	42a6      	cmp	r6, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ac:	4798      	blx	r3
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b6:	4798      	blx	r3
 80039b8:	3601      	adds	r6, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	08003b08 	.word	0x08003b08
 80039c0:	08003b08 	.word	0x08003b08
 80039c4:	08003b08 	.word	0x08003b08
 80039c8:	08003b0c 	.word	0x08003b0c

080039cc <_init>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr

080039d8 <_fini>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr
