
fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013aa4  08006974  08006974  00007974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a418  0801a418  0001c068  2**0
                  CONTENTS
  4 .ARM          00000008  0801a418  0801a418  0001b418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a420  0801a420  0001c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a420  0801a420  0001b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a424  0801a424  0001b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0801a428  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005700  20000068  0801a490  0001c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005768  0801a490  0001c768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a3a  00000000  00000000  0001c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd9  00000000  00000000  0002dad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000306b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc6  00000000  00000000  000316d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b0c  00000000  00000000  00032296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e6c  00000000  00000000  0004ada2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c23b  00000000  00000000  0005ec0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  000fae49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047cc  00000000  00000000  000faefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000ff6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003194  00000000  00000000  000ff726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000130  00000000  00000000  001028ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800695c 	.word	0x0800695c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800695c 	.word	0x0800695c

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <HAL_TIM_PeriodElapsedCallback>:
uint16_t 	adcValue[SamplesFft];	// DMA로 변환된 ADC값이 저장되는 위치
float32_t	input[SamplesFft];		// FFT로 입력될 값
float32_t output[SamplesFft];		// FFT에서 출력된 값
uint32_t	doConvert = SamplesFft;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	if(doConvert > 0) doConvert--;
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d004      	beq.n	800064a <HAL_TIM_PeriodElapsedCallback+0x1a>
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3b01      	subs	r3, #1
 8000646:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000

0800065c <app>:

void app() {
 800065c:	b580      	push	{r7, lr}
 800065e:	f5ad 5d92 	sub.w	sp, sp, #4672	@ 0x1240
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8
	volatile uint16_t oldFrequency;
	// OLED초기화
	ssd1306_Init();
 8000666:	f000 fc8d 	bl	8000f84 <ssd1306_Init>
	ssd1306_Fill(0);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fcf4 	bl	8001058 <ssd1306_Fill>
	// ADC 설정
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValue, SamplesFft);
 8000670:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000674:	49a4      	ldr	r1, [pc, #656]	@ (8000908 <app+0x2ac>)
 8000676:	48a5      	ldr	r0, [pc, #660]	@ (800090c <app+0x2b0>)
 8000678:	f001 f9e2 	bl	8001a40 <HAL_ADC_Start_DMA>
	// 타이머 시작
	HAL_TIM_Base_Start_IT(&htim3);
 800067c:	48a4      	ldr	r0, [pc, #656]	@ (8000910 <app+0x2b4>)
 800067e:	f003 fcff 	bl	8004080 <HAL_TIM_Base_Start_IT>
	// FFT 인스턴스 선언
  arm_rfft_fast_instance_f32 fftInstance;
  // FFT 초기화
  arm_rfft_fast_init_f32(&fftInstance, SamplesFft);
 8000682:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 8000686:	f103 0314 	add.w	r3, r3, #20
 800068a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fbda 	bl	8004e48 <arm_rfft_fast_init_f32>
  while(1) {
		if(doConvert == 0) {
 8000694:	4b9f      	ldr	r3, [pc, #636]	@ (8000914 <app+0x2b8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1fb      	bne.n	8000694 <app+0x38>
			doConvert = SamplesFft;
 800069c:	4b9d      	ldr	r3, [pc, #628]	@ (8000914 <app+0x2b8>)
 800069e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006a2:	601a      	str	r2, [r3, #0]

			// float형으로 변환
			for (int i = 0; i < SamplesFft; i++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 80006aa:	f102 020c 	add.w	r2, r2, #12
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	e020      	b.n	80006f4 <app+0x98>
				input[i] = (float32_t) adcValue[i];
 80006b2:	4a95      	ldr	r2, [pc, #596]	@ (8000908 <app+0x2ac>)
 80006b4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80006b8:	f103 030c 	add.w	r3, r3, #12
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ca:	4a93      	ldr	r2, [pc, #588]	@ (8000918 <app+0x2bc>)
 80006cc:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80006d0:	f103 030c 	add.w	r3, r3, #12
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i < SamplesFft; i++) {
 80006de:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80006e2:	f103 030c 	add.w	r3, r3, #12
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 80006ee:	f102 020c 	add.w	r2, r2, #12
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80006f8:	f103 030c 	add.w	r3, r3, #12
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000702:	dbd6      	blt.n	80006b2 <app+0x56>
			}

			// 실제 FFT 연산
			arm_rfft_fast_f32(&fftInstance, input, output, 0);
 8000704:	f507 5090 	add.w	r0, r7, #4608	@ 0x1200
 8000708:	f100 0014 	add.w	r0, r0, #20
 800070c:	2300      	movs	r3, #0
 800070e:	4a83      	ldr	r2, [pc, #524]	@ (800091c <app+0x2c0>)
 8000710:	4981      	ldr	r1, [pc, #516]	@ (8000918 <app+0x2bc>)
 8000712:	f004 fc1b 	bl	8004f4c <arm_rfft_fast_f32>

			// 복소수 크기 계산
			float32_t magnitude[SamplesFft / 2];
			arm_cmplx_mag_f32(output, magnitude, SamplesFft / 2);
 8000716:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800071a:	3b10      	subs	r3, #16
 800071c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000720:	4619      	mov	r1, r3
 8000722:	487e      	ldr	r0, [pc, #504]	@ (800091c <app+0x2c0>)
 8000724:	f005 f87e 	bl	8005824 <arm_cmplx_mag_f32>

			// 최종 주파수 찾기
			uint32_t maxIndex = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800072e:	f102 0208 	add.w	r2, r2, #8
 8000732:	6013      	str	r3, [r2, #0]
			float32_t maxValue = 0;
 8000734:	f04f 0300 	mov.w	r3, #0
 8000738:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800073c:	f102 0204 	add.w	r2, r2, #4
 8000740:	6013      	str	r3, [r2, #0]
			for (int i = 1; i < SamplesFft / 2; i++) {
 8000742:	2301      	movs	r3, #1
 8000744:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 8000748:	6013      	str	r3, [r2, #0]
 800074a:	e033      	b.n	80007b4 <app+0x158>
				if(magnitude[i] > maxValue) {
 800074c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000750:	461a      	mov	r2, r3
 8000752:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	3b50      	subs	r3, #80	@ 0x50
 800075e:	edd3 7a00 	vldr	s15, [r3]
 8000762:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8000766:	f103 0304 	add.w	r3, r3, #4
 800076a:	ed93 7a00 	vldr	s14, [r3]
 800076e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000776:	d516      	bpl.n	80007a6 <app+0x14a>
					maxValue = magnitude[i];
 8000778:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800077c:	461a      	mov	r2, r3
 800077e:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	3b50      	subs	r3, #80	@ 0x50
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 8000790:	f102 0204 	add.w	r2, r2, #4
 8000794:	6013      	str	r3, [r2, #0]
					maxIndex = i;
 8000796:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 80007a0:	f102 0208 	add.w	r2, r2, #8
 80007a4:	6013      	str	r3, [r2, #0]
			for (int i = 1; i < SamplesFft / 2; i++) {
 80007a6:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007be:	dbc5      	blt.n	800074c <app+0xf0>
				}
			}

			// 주파수 계산
			float frequency = maxIndex
					* ((float) samplingRate / (float) SamplesFft);
 80007c0:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80007c4:	f103 0308 	add.w	r3, r3, #8
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	ee07 3a90 	vmov	s15, r3
 80007ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
			float frequency = maxIndex
 80007d2:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000920 <app+0x2c4>
 80007d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007da:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80007de:	f103 0310 	add.w	r3, r3, #16
 80007e2:	edc3 7a00 	vstr	s15, [r3]

			uint32_t showData[128] = { 0, };
 80007e6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80007ea:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80007ee:	4618      	mov	r0, r3
 80007f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007f4:	461a      	mov	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f005 fc0e 	bl	8006018 <memset>
			for (int i = 0; i < 128; i++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 8000802:	f102 021c 	add.w	r2, r2, #28
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	e06d      	b.n	80008e6 <app+0x28a>
				for (int j = 0; j < 8; j++) {
 800080a:	2300      	movs	r3, #0
 800080c:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 8000810:	f102 0218 	add.w	r2, r2, #24
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	e03d      	b.n	8000894 <app+0x238>
					showData[i] += magnitude[i * 8 + j];
 8000818:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800081c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8000820:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 8000824:	f102 021c 	add.w	r2, r2, #28
 8000828:	6812      	ldr	r2, [r2, #0]
 800082a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800082e:	ee07 3a90 	vmov	s15, r3
 8000832:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000836:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 800083a:	f103 031c 	add.w	r3, r3, #28
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	00da      	lsls	r2, r3, #3
 8000842:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8000846:	f103 0318 	add.w	r3, r3, #24
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4413      	add	r3, r2
 800084e:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	3b50      	subs	r3, #80	@ 0x50
 8000858:	edd3 7a00 	vldr	s15, [r3]
 800085c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000864:	ee17 1a90 	vmov	r1, s15
 8000868:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800086c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8000870:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 8000874:	f102 021c 	add.w	r2, r2, #28
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int j = 0; j < 8; j++) {
 800087e:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8000882:	f103 0318 	add.w	r3, r3, #24
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 800088e:	f102 0218 	add.w	r2, r2, #24
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8000898:	f103 0318 	add.w	r3, r3, #24
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b07      	cmp	r3, #7
 80008a0:	ddba      	ble.n	8000818 <app+0x1bc>
				}
				showData[i] /= 4096;
 80008a2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008a6:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80008aa:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 80008ae:	f102 021c 	add.w	r2, r2, #28
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008b8:	0b19      	lsrs	r1, r3, #12
 80008ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008be:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80008c2:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 80008c6:	f102 021c 	add.w	r2, r2, #28
 80008ca:	6812      	ldr	r2, [r2, #0]
 80008cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 128; i++) {
 80008d0:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80008d4:	f103 031c 	add.w	r3, r3, #28
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 80008e0:	f102 021c 	add.w	r2, r2, #28
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80008ea:	f103 031c 	add.w	r3, r3, #28
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80008f2:	dd8a      	ble.n	800080a <app+0x1ae>
			}

			ssd1306_Fill(0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 fbaf 	bl	8001058 <ssd1306_Fill>
			for (int i = 1; i < 128; i++) {
 80008fa:	2301      	movs	r3, #1
 80008fc:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 8000900:	f102 0214 	add.w	r2, r2, #20
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e052      	b.n	80009ae <app+0x352>
 8000908:	20000084 	.word	0x20000084
 800090c:	20005084 	.word	0x20005084
 8000910:	200051c8 	.word	0x200051c8
 8000914:	20000000 	.word	0x20000000
 8000918:	20001084 	.word	0x20001084
 800091c:	20003084 	.word	0x20003084
 8000920:	419c4000 	.word	0x419c4000
				if(showData[i] > 63) showData[i] = 63;
 8000924:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000928:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800092c:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 8000930:	f102 0214 	add.w	r2, r2, #20
 8000934:	6812      	ldr	r2, [r2, #0]
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	2b3f      	cmp	r3, #63	@ 0x3f
 800093c:	d90b      	bls.n	8000956 <app+0x2fa>
 800093e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000942:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8000946:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 800094a:	f102 0214 	add.w	r2, r2, #20
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	213f      	movs	r1, #63	@ 0x3f
 8000952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				ssd1306_Line(i, 63, i, 63 - showData[i], 1);
 8000956:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 800095a:	f103 0314 	add.w	r3, r3, #20
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	b2d8      	uxtb	r0, r3
 8000962:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8000966:	f103 0314 	add.w	r3, r3, #20
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	b2d9      	uxtb	r1, r3
 800096e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000972:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8000976:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 800097a:	f102 0214 	add.w	r2, r2, #20
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2201      	movs	r2, #1
 800098e:	9200      	str	r2, [sp, #0]
 8000990:	460a      	mov	r2, r1
 8000992:	213f      	movs	r1, #63	@ 0x3f
 8000994:	f000 fcc6 	bl	8001324 <ssd1306_Line>
			for (int i = 1; i < 128; i++) {
 8000998:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 800099c:	f103 0314 	add.w	r3, r3, #20
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 80009a8:	f102 0214 	add.w	r2, r2, #20
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80009b2:	f103 0314 	add.w	r3, r3, #20
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ba:	ddb3      	ble.n	8000924 <app+0x2c8>
			}
			uint16_t freq = (uint16_t)frequency;
 80009bc:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80009c0:	f103 0310 	add.w	r3, r3, #16
 80009c4:	edd3 7a00 	vldr	s15, [r3]
 80009c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009cc:	ee17 3a90 	vmov	r3, s15
 80009d0:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 80009d4:	f102 020e 	add.w	r2, r2, #14
 80009d8:	8013      	strh	r3, [r2, #0]
			if((freq > 40) && (freq < 20000)) {
 80009da:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80009de:	f103 030e 	add.w	r3, r3, #14
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	2b28      	cmp	r3, #40	@ 0x28
 80009e6:	d912      	bls.n	8000a0e <app+0x3b2>
 80009e8:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80009ec:	f103 030e 	add.w	r3, r3, #14
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d809      	bhi.n	8000a0e <app+0x3b2>
				oldFrequency = freq;
 80009fa:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 80009fe:	f103 030e 	add.w	r3, r3, #14
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 8000a08:	f102 020c 	add.w	r2, r2, #12
 8000a0c:	8013      	strh	r3, [r2, #0]
			}
			char freqStr[20];
			sprintf(freqStr, "%5d Hz", oldFrequency);
 8000a0e:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8000a12:	f103 030c 	add.w	r3, r3, #12
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f507 5390 	add.w	r3, r7, #4608	@ 0x1200
 8000a20:	4908      	ldr	r1, [pc, #32]	@ (8000a44 <app+0x3e8>)
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 fad8 	bl	8005fd8 <siprintf>
			ssd1306_SetCursor(88, 0);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2058      	movs	r0, #88	@ 0x58
 8000a2c:	f000 fc62 	bl	80012f4 <ssd1306_SetCursor>
			ssd1306_WriteString(freqStr, Font_6x8, 1);
 8000a30:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <app+0x3ec>)
 8000a32:	f507 5090 	add.w	r0, r7, #4608	@ 0x1200
 8000a36:	2301      	movs	r3, #1
 8000a38:	ca06      	ldmia	r2, {r1, r2}
 8000a3a:	f000 fc35 	bl	80012a8 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000a3e:	f000 fb2f 	bl	80010a0 <ssd1306_UpdateScreen>
		if(doConvert == 0) {
 8000a42:	e627      	b.n	8000694 <app+0x38>
 8000a44:	08006974 	.word	0x08006974
 8000a48:	20000004 	.word	0x20000004

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a50:	f000 ff1c 	bl	800188c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a54:	f000 f810 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a58:	f000 fa02 	bl	8000e60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a5c:	f000 f9e0 	bl	8000e20 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a60:	f000 f872 	bl	8000b48 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a64:	f000 f990 	bl	8000d88 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000a68:	f000 f8c0 	bl	8000bec <MX_I2C1_Init>
  MX_TIM1_Init();
 8000a6c:	f000 f8ec 	bl	8000c48 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000a70:	f7ff fdf4 	bl	800065c <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <main+0x28>

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	@ 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	@ 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 fac6 	bl	8006018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b27      	ldr	r3, [pc, #156]	@ (8000b40 <SystemClock_Config+0xc8>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa4:	4a26      	ldr	r2, [pc, #152]	@ (8000b40 <SystemClock_Config+0xc8>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aac:	4b24      	ldr	r3, [pc, #144]	@ (8000b40 <SystemClock_Config+0xc8>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <SystemClock_Config+0xcc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a20      	ldr	r2, [pc, #128]	@ (8000b44 <SystemClock_Config+0xcc>)
 8000ac2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <SystemClock_Config+0xcc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000adc:	2310      	movs	r3, #16
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000aec:	2364      	movs	r3, #100	@ 0x64
 8000aee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 fe2b 	bl	8003758 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b08:	f000 f9ee 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b10:	2302      	movs	r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	2103      	movs	r1, #3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f88d 	bl	8003c48 <HAL_RCC_ClockConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b34:	f000 f9d8 	bl	8000ee8 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3750      	adds	r7, #80	@ 0x50
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b5c:	4a22      	ldr	r2, [pc, #136]	@ (8000be8 <MX_ADC1_Init+0xa0>)
 8000b5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b60:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b68:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b82:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b8c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bac:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000bae:	f000 ff03 	bl	80019b8 <HAL_ADC_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000bb8:	f000 f996 	bl	8000ee8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <MX_ADC1_Init+0x9c>)
 8000bce:	f001 f845 	bl	8001c5c <HAL_ADC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000bd8:	f000 f986 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20005084 	.word	0x20005084
 8000be8:	40012000 	.word	0x40012000

08000bec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000bf2:	4a13      	ldr	r2, [pc, #76]	@ (8000c40 <MX_I2C1_Init+0x54>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000bf8:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <MX_I2C1_Init+0x58>)
 8000bfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000c0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <MX_I2C1_Init+0x50>)
 8000c2a:	f002 f8e7 	bl	8002dfc <HAL_I2C_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c34:	f000 f958 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000512c 	.word	0x2000512c
 8000c40:	40005400 	.word	0x40005400
 8000c44:	00061a80 	.word	0x00061a80

08000c48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b096      	sub	sp, #88	@ 0x58
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f005 f9c9 	bl	8006018 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c86:	4b3e      	ldr	r3, [pc, #248]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000c88:	4a3e      	ldr	r2, [pc, #248]	@ (8000d84 <MX_TIM1_Init+0x13c>)
 8000c8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000c8e:	2263      	movs	r2, #99	@ 0x63
 8000c90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c92:	4b3b      	ldr	r3, [pc, #236]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c98:	4b39      	ldr	r3, [pc, #228]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000c9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca0:	4b37      	ldr	r3, [pc, #220]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca6:	4b36      	ldr	r3, [pc, #216]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b34      	ldr	r3, [pc, #208]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb2:	4833      	ldr	r0, [pc, #204]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000cb4:	f003 f994 	bl	8003fe0 <HAL_TIM_Base_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000cbe:	f000 f913 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cc8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ccc:	4619      	mov	r1, r3
 8000cce:	482c      	ldr	r0, [pc, #176]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000cd0:	f003 fc44 	bl	800455c <HAL_TIM_ConfigClockSource>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cda:	f000 f905 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cde:	4828      	ldr	r0, [pc, #160]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000ce0:	f003 fa30 	bl	8004144 <HAL_TIM_PWM_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cea:	f000 f8fd 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cf6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4820      	ldr	r0, [pc, #128]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000cfe:	f003 ffcf 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d08:	f000 f8ee 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0c:	2360      	movs	r3, #96	@ 0x60
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4813      	ldr	r0, [pc, #76]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000d32:	f003 fb51 	bl	80043d8 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d3c:	f000 f8d4 	bl	8000ee8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4807      	ldr	r0, [pc, #28]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000d64:	f004 f80a 	bl	8004d7c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d6e:	f000 f8bb 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d72:	4803      	ldr	r0, [pc, #12]	@ (8000d80 <MX_TIM1_Init+0x138>)
 8000d74:	f000 fc9a 	bl	80016ac <HAL_TIM_MspPostInit>

}
 8000d78:	bf00      	nop
 8000d7a:	3758      	adds	r7, #88	@ 0x58
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20005180 	.word	0x20005180
 8000d84:	40010000 	.word	0x40010000

08000d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <MX_TIM3_Init+0x90>)
 8000da6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <MX_TIM3_Init+0x94>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000daa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_TIM3_Init+0x90>)
 8000dac:	2263      	movs	r2, #99	@ 0x63
 8000dae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <MX_TIM3_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25-1;
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_TIM3_Init+0x90>)
 8000db8:	2218      	movs	r2, #24
 8000dba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <MX_TIM3_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <MX_TIM3_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dc8:	4813      	ldr	r0, [pc, #76]	@ (8000e18 <MX_TIM3_Init+0x90>)
 8000dca:	f003 f909 	bl	8003fe0 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000dd4:	f000 f888 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <MX_TIM3_Init+0x90>)
 8000de6:	f003 fbb9 	bl	800455c <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000df0:	f000 f87a 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000df4:	2320      	movs	r3, #32
 8000df6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_TIM3_Init+0x90>)
 8000e02:	f003 ff4d 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000e0c:	f000 f86c 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200051c8 	.word	0x200051c8
 8000e1c:	40000400 	.word	0x40000400

08000e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <MX_DMA_Init+0x3c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <MX_DMA_Init+0x3c>)
 8000e30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <MX_DMA_Init+0x3c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2038      	movs	r0, #56	@ 0x38
 8000e48:	f001 fa93 	bl	8002372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e4c:	2038      	movs	r0, #56	@ 0x38
 8000e4e:	f001 faac 	bl	80023aa <HAL_NVIC_EnableIRQ>

}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MX_GPIO_Init+0x80>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <MX_GPIO_Init+0x80>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <MX_GPIO_Init+0x80>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_GPIO_Init+0x80>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <MX_GPIO_Init+0x80>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_GPIO_Init+0x80>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb4:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <MX_GPIO_Init+0x84>)
 8000eb6:	f001 ff87 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OledReset_Pin */
  GPIO_InitStruct.Pin = OledReset_Pin;
 8000eba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OledReset_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_GPIO_Init+0x84>)
 8000ed4:	f001 fdf4 	bl	8002ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <Error_Handler+0x8>

08000ef4 <ssd1306_Reset>:
#include <string.h>  // For memcpy
#include "main.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000efe:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <ssd1306_Reset+0x28>)
 8000f00:	f001 ff62 	bl	8002dc8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 fd33 	bl	8001970 <HAL_Delay>
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <ssd1306_Reset+0x28>)
 8000f12:	f001 ff59 	bl	8002dc8 <HAL_GPIO_WritePin>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40020000 	.word	0x40020000

08000f20 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af04      	add	r7, sp, #16
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	2301      	movs	r3, #1
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2178      	movs	r1, #120	@ 0x78
 8000f3e:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <ssd1306_WriteCommand+0x2c>)
 8000f40:	f002 f8a0 	bl	8003084 <HAL_I2C_Mem_Write>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000512c 	.word	0x2000512c

08000f50 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f62:	9202      	str	r2, [sp, #8]
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2240      	movs	r2, #64	@ 0x40
 8000f6e:	2178      	movs	r1, #120	@ 0x78
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <ssd1306_WriteData+0x30>)
 8000f72:	f002 f887 	bl	8003084 <HAL_I2C_Mem_Write>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000512c 	.word	0x2000512c

08000f84 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f88:	f7ff ffb4 	bl	8000ef4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f8c:	2064      	movs	r0, #100	@ 0x64
 8000f8e:	f000 fcef 	bl	8001970 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 fa46 	bl	8001424 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f98:	2020      	movs	r0, #32
 8000f9a:	f7ff ffc1 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff ffbe 	bl	8000f20 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fa4:	20b0      	movs	r0, #176	@ 0xb0
 8000fa6:	f7ff ffbb 	bl	8000f20 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000faa:	20c8      	movs	r0, #200	@ 0xc8
 8000fac:	f7ff ffb8 	bl	8000f20 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff ffb5 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000fb6:	2010      	movs	r0, #16
 8000fb8:	f7ff ffb2 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000fbc:	2040      	movs	r0, #64	@ 0x40
 8000fbe:	f7ff ffaf 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000fc2:	20ff      	movs	r0, #255	@ 0xff
 8000fc4:	f000 fa1a 	bl	80013fc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000fc8:	20a1      	movs	r0, #161	@ 0xa1
 8000fca:	f7ff ffa9 	bl	8000f20 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000fce:	20a6      	movs	r0, #166	@ 0xa6
 8000fd0:	f7ff ffa6 	bl	8000f20 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000fd4:	20a8      	movs	r0, #168	@ 0xa8
 8000fd6:	f7ff ffa3 	bl	8000f20 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000fda:	203f      	movs	r0, #63	@ 0x3f
 8000fdc:	f7ff ffa0 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fe0:	20a4      	movs	r0, #164	@ 0xa4
 8000fe2:	f7ff ff9d 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000fe6:	20d3      	movs	r0, #211	@ 0xd3
 8000fe8:	f7ff ff9a 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff ff97 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ff2:	20d5      	movs	r0, #213	@ 0xd5
 8000ff4:	f7ff ff94 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ff8:	20f0      	movs	r0, #240	@ 0xf0
 8000ffa:	f7ff ff91 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000ffe:	20d9      	movs	r0, #217	@ 0xd9
 8001000:	f7ff ff8e 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001004:	2022      	movs	r0, #34	@ 0x22
 8001006:	f7ff ff8b 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800100a:	20da      	movs	r0, #218	@ 0xda
 800100c:	f7ff ff88 	bl	8000f20 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001010:	2012      	movs	r0, #18
 8001012:	f7ff ff85 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001016:	20db      	movs	r0, #219	@ 0xdb
 8001018:	f7ff ff82 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800101c:	2020      	movs	r0, #32
 800101e:	f7ff ff7f 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001022:	208d      	movs	r0, #141	@ 0x8d
 8001024:	f7ff ff7c 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001028:	2014      	movs	r0, #20
 800102a:	f7ff ff79 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800102e:	2001      	movs	r0, #1
 8001030:	f000 f9f8 	bl	8001424 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f80f 	bl	8001058 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800103a:	f000 f831 	bl	80010a0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800103e:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <ssd1306_Init+0xd0>)
 8001040:	2200      	movs	r2, #0
 8001042:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <ssd1306_Init+0xd0>)
 8001046:	2200      	movs	r2, #0
 8001048:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800104a:	4b02      	ldr	r3, [pc, #8]	@ (8001054 <ssd1306_Init+0xd0>)
 800104c:	2201      	movs	r2, #1
 800104e:	711a      	strb	r2, [r3, #4]
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20005610 	.word	0x20005610

08001058 <ssd1306_Fill>:
{
	ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e00d      	b.n	8001084 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <ssd1306_Fill+0x1a>
 800106e:	2100      	movs	r1, #0
 8001070:	e000      	b.n	8001074 <ssd1306_Fill+0x1c>
 8001072:	21ff      	movs	r1, #255	@ 0xff
 8001074:	4a09      	ldr	r2, [pc, #36]	@ (800109c <ssd1306_Fill+0x44>)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800108a:	d3ed      	bcc.n	8001068 <ssd1306_Fill+0x10>
    }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20005210 	.word	0x20005210

080010a0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010a6:	2300      	movs	r3, #0
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	e016      	b.n	80010da <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	3b50      	subs	r3, #80	@ 0x50
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff34 	bl	8000f20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x02);
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff ff31 	bl	8000f20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80010be:	2010      	movs	r0, #16
 80010c0:	f7ff ff2e 	bl	8000f20 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	01db      	lsls	r3, r3, #7
 80010c8:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <ssd1306_UpdateScreen+0x4c>)
 80010ca:	4413      	add	r3, r2
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff3e 	bl	8000f50 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3301      	adds	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b07      	cmp	r3, #7
 80010de:	d9e5      	bls.n	80010ac <ssd1306_UpdateScreen+0xc>
    }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20005210 	.word	0x20005210

080010f0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	460b      	mov	r3, r1
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	4613      	mov	r3, r2
 8001100:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db3d      	blt.n	8001186 <ssd1306_DrawPixel+0x96>
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	2b3f      	cmp	r3, #63	@ 0x3f
 800110e:	d83a      	bhi.n	8001186 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d11a      	bne.n	800114c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	08db      	lsrs	r3, r3, #3
 800111c:	b2d8      	uxtb	r0, r3
 800111e:	4603      	mov	r3, r0
 8001120:	01db      	lsls	r3, r3, #7
 8001122:	4413      	add	r3, r2
 8001124:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <ssd1306_DrawPixel+0xa4>)
 8001126:	5cd3      	ldrb	r3, [r2, r3]
 8001128:	b25a      	sxtb	r2, r3
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	2101      	movs	r1, #1
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	b25b      	sxtb	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b259      	sxtb	r1, r3
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	4603      	mov	r3, r0
 8001140:	01db      	lsls	r3, r3, #7
 8001142:	4413      	add	r3, r2
 8001144:	b2c9      	uxtb	r1, r1
 8001146:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <ssd1306_DrawPixel+0xa4>)
 8001148:	54d1      	strb	r1, [r2, r3]
 800114a:	e01d      	b.n	8001188 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	b2d8      	uxtb	r0, r3
 8001154:	4603      	mov	r3, r0
 8001156:	01db      	lsls	r3, r3, #7
 8001158:	4413      	add	r3, r2
 800115a:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <ssd1306_DrawPixel+0xa4>)
 800115c:	5cd3      	ldrb	r3, [r2, r3]
 800115e:	b25a      	sxtb	r2, r3
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	b25b      	sxtb	r3, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	b25b      	sxtb	r3, r3
 8001172:	4013      	ands	r3, r2
 8001174:	b259      	sxtb	r1, r3
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	4603      	mov	r3, r0
 800117a:	01db      	lsls	r3, r3, #7
 800117c:	4413      	add	r3, r2
 800117e:	b2c9      	uxtb	r1, r1
 8001180:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <ssd1306_DrawPixel+0xa4>)
 8001182:	54d1      	strb	r1, [r2, r3]
 8001184:	e000      	b.n	8001188 <ssd1306_DrawPixel+0x98>
        return;
 8001186:	bf00      	nop
    }
}
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20005210 	.word	0x20005210

08001198 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b089      	sub	sp, #36	@ 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	4604      	mov	r4, r0
 80011a0:	1d38      	adds	r0, r7, #4
 80011a2:	e880 0006 	stmia.w	r0, {r1, r2}
 80011a6:	461a      	mov	r2, r3
 80011a8:	4623      	mov	r3, r4
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	4613      	mov	r3, r2
 80011ae:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	2b1f      	cmp	r3, #31
 80011b4:	d902      	bls.n	80011bc <ssd1306_WriteChar+0x24>
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80011ba:	d901      	bls.n	80011c0 <ssd1306_WriteChar+0x28>
        return 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	e06c      	b.n	800129a <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80011c0:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <ssd1306_WriteChar+0x10c>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	793b      	ldrb	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	2b80      	cmp	r3, #128	@ 0x80
 80011cc:	dc06      	bgt.n	80011dc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80011ce:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <ssd1306_WriteChar+0x10c>)
 80011d0:	885b      	ldrh	r3, [r3, #2]
 80011d2:	461a      	mov	r2, r3
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80011d8:	2b40      	cmp	r3, #64	@ 0x40
 80011da:	dd01      	ble.n	80011e0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	e05c      	b.n	800129a <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	e04c      	b.n	8001280 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	3b20      	subs	r3, #32
 80011ec:	7979      	ldrb	r1, [r7, #5]
 80011ee:	fb01 f303 	mul.w	r3, r1, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	440b      	add	r3, r1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	e034      	b.n	8001270 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d012      	beq.n	800123c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <ssd1306_WriteChar+0x10c>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4413      	add	r3, r2
 8001222:	b2d8      	uxtb	r0, r3
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <ssd1306_WriteChar+0x10c>)
 8001226:	885b      	ldrh	r3, [r3, #2]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4413      	add	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	7bba      	ldrb	r2, [r7, #14]
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff ff5b 	bl	80010f0 <ssd1306_DrawPixel>
 800123a:	e016      	b.n	800126a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <ssd1306_WriteChar+0x10c>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4413      	add	r3, r2
 8001248:	b2d8      	uxtb	r0, r3
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <ssd1306_WriteChar+0x10c>)
 800124c:	885b      	ldrh	r3, [r3, #2]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b2d9      	uxtb	r1, r3
 8001258:	7bbb      	ldrb	r3, [r7, #14]
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	f7ff ff43 	bl	80010f0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	3301      	adds	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	461a      	mov	r2, r3
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4293      	cmp	r3, r2
 8001278:	d3c5      	bcc.n	8001206 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	797b      	ldrb	r3, [r7, #5]
 8001282:	461a      	mov	r2, r3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4293      	cmp	r3, r2
 8001288:	d3ad      	bcc.n	80011e6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <ssd1306_WriteChar+0x10c>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	793a      	ldrb	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <ssd1306_WriteChar+0x10c>)
 8001296:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20005610 	.word	0x20005610

080012a8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	1d38      	adds	r0, r7, #4
 80012b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80012b6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80012b8:	e012      	b.n	80012e0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	7818      	ldrb	r0, [r3, #0]
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	1d3a      	adds	r2, r7, #4
 80012c2:	ca06      	ldmia	r2, {r1, r2}
 80012c4:	f7ff ff68 	bl	8001198 <ssd1306_WriteChar>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d002      	beq.n	80012da <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	e008      	b.n	80012ec <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3301      	adds	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e8      	bne.n	80012ba <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	781b      	ldrb	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	4613      	mov	r3, r2
 8001302:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <ssd1306_SetCursor+0x2c>)
 800130a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <ssd1306_SetCursor+0x2c>)
 8001312:	805a      	strh	r2, [r3, #2]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20005610 	.word	0x20005610

08001324 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	4604      	mov	r4, r0
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4623      	mov	r3, r4
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	4603      	mov	r3, r0
 8001338:	71bb      	strb	r3, [r7, #6]
 800133a:	460b      	mov	r3, r1
 800133c:	717b      	strb	r3, [r7, #5]
 800133e:	4613      	mov	r3, r2
 8001340:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8001342:	797a      	ldrb	r2, [r7, #5]
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	bfb8      	it	lt
 800134c:	425b      	neglt	r3, r3
 800134e:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001350:	793a      	ldrb	r2, [r7, #4]
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	bfb8      	it	lt
 800135a:	425b      	neglt	r3, r3
 800135c:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	429a      	cmp	r2, r3
 8001364:	d201      	bcs.n	800136a <ssd1306_Line+0x46>
 8001366:	2301      	movs	r3, #1
 8001368:	e001      	b.n	800136e <ssd1306_Line+0x4a>
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800136e:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001370:	79ba      	ldrb	r2, [r7, #6]
 8001372:	793b      	ldrb	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	d201      	bcs.n	800137c <ssd1306_Line+0x58>
 8001378:	2301      	movs	r3, #1
 800137a:	e001      	b.n	8001380 <ssd1306_Line+0x5c>
 800137c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001380:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 800138a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800138e:	7939      	ldrb	r1, [r7, #4]
 8001390:	797b      	ldrb	r3, [r7, #5]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff feac 	bl	80010f0 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001398:	e024      	b.n	80013e4 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 800139a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800139e:	79b9      	ldrb	r1, [r7, #6]
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fea4 	bl	80010f0 <ssd1306_DrawPixel>
    error2 = error * 2;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	425b      	negs	r3, r3
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dd08      	ble.n	80013ca <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4413      	add	r3, r2
 80013c8:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	da08      	bge.n	80013e4 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	4413      	add	r3, r2
 80013d8:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	4413      	add	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	797b      	ldrb	r3, [r7, #5]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1d6      	bne.n	800139a <ssd1306_Line+0x76>
 80013ec:	79ba      	ldrb	r2, [r7, #6]
 80013ee:	793b      	ldrb	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d1d2      	bne.n	800139a <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80013f4:	bf00      	nop
}
 80013f6:	3724      	adds	r7, #36	@ 0x24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}

080013fc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001406:	2381      	movs	r3, #129	@ 0x81
 8001408:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fd87 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fd83 	bl	8000f20 <ssd1306_WriteCommand>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001434:	23af      	movs	r3, #175	@ 0xaf
 8001436:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <ssd1306_SetDisplayOn+0x38>)
 800143a:	2201      	movs	r2, #1
 800143c:	715a      	strb	r2, [r3, #5]
 800143e:	e004      	b.n	800144a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001440:	23ae      	movs	r3, #174	@ 0xae
 8001442:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <ssd1306_SetDisplayOn+0x38>)
 8001446:	2200      	movs	r2, #0
 8001448:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fd67 	bl	8000f20 <ssd1306_WriteCommand>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20005610 	.word	0x20005610

08001460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <HAL_MspInit+0x4c>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_MspInit+0x4c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a2f      	ldr	r2, [pc, #188]	@ (800158c <HAL_ADC_MspInit+0xdc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d157      	bne.n	8001582 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <HAL_ADC_MspInit+0xe0>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a2d      	ldr	r2, [pc, #180]	@ (8001590 <HAL_ADC_MspInit+0xe0>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <HAL_ADC_MspInit+0xe0>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <HAL_ADC_MspInit+0xe0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a26      	ldr	r2, [pc, #152]	@ (8001590 <HAL_ADC_MspInit+0xe0>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_ADC_MspInit+0xe0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800150a:	2301      	movs	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150e:	2303      	movs	r3, #3
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	481d      	ldr	r0, [pc, #116]	@ (8001594 <HAL_ADC_MspInit+0xe4>)
 800151e:	f001 facf 	bl	8002ac0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001522:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 8001524:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <HAL_ADC_MspInit+0xec>)
 8001526:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 800153c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001540:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 8001544:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001548:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 800154c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001550:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 8001554:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001558:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001566:	480c      	ldr	r0, [pc, #48]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 8001568:	f000 ff3a 	bl	80023e0 <HAL_DMA_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001572:	f7ff fcb9 	bl	8000ee8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 800157a:	639a      	str	r2, [r3, #56]	@ 0x38
 800157c:	4a06      	ldr	r2, [pc, #24]	@ (8001598 <HAL_ADC_MspInit+0xe8>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	@ 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40012000 	.word	0x40012000
 8001590:	40023800 	.word	0x40023800
 8001594:	40020000 	.word	0x40020000
 8001598:	200050cc 	.word	0x200050cc
 800159c:	40026410 	.word	0x40026410

080015a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a19      	ldr	r2, [pc, #100]	@ (8001624 <HAL_I2C_MspInit+0x84>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d12b      	bne.n	800161a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_I2C_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <HAL_I2C_MspInit+0x88>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_I2C_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015de:	23c0      	movs	r3, #192	@ 0xc0
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e2:	2312      	movs	r3, #18
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ee:	2304      	movs	r3, #4
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <HAL_I2C_MspInit+0x8c>)
 80015fa:	f001 fa61 	bl	8002ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_I2C_MspInit+0x88>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_I2C_MspInit+0x88>)
 8001608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_I2C_MspInit+0x88>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	@ 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40005400 	.word	0x40005400
 8001628:	40023800 	.word	0x40023800
 800162c:	40020400 	.word	0x40020400

08001630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a18      	ldr	r2, [pc, #96]	@ (80016a0 <HAL_TIM_Base_MspInit+0x70>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d10e      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	4a16      	ldr	r2, [pc, #88]	@ (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6453      	str	r3, [r2, #68]	@ 0x44
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800165e:	e01a      	b.n	8001696 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a10      	ldr	r2, [pc, #64]	@ (80016a8 <HAL_TIM_Base_MspInit+0x78>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d115      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	4a0c      	ldr	r2, [pc, #48]	@ (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6413      	str	r3, [r2, #64]	@ 0x40
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_TIM_Base_MspInit+0x74>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	201d      	movs	r0, #29
 800168c:	f000 fe71 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001690:	201d      	movs	r0, #29
 8001692:	f000 fe8a 	bl	80023aa <HAL_NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40000400 	.word	0x40000400

080016ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <HAL_TIM_MspPostInit+0x68>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d11e      	bne.n	800170c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_TIM_MspPostInit+0x6c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <HAL_TIM_MspPostInit+0x6c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <HAL_TIM_MspPostInit+0x6c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4619      	mov	r1, r3
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <HAL_TIM_MspPostInit+0x70>)
 8001708:	f001 f9da 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40010000 	.word	0x40010000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <NMI_Handler+0x4>

08001728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <MemManage_Handler+0x4>

08001738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <UsageFault_Handler+0x4>

08001748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001776:	f000 f8db 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <TIM3_IRQHandler+0x10>)
 8001786:	f002 fd36 	bl	80041f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200051c8 	.word	0x200051c8

08001794 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <DMA2_Stream0_IRQHandler+0x10>)
 800179a:	f000 ff27 	bl	80025ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200050cc 	.word	0x200050cc

080017a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b0:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <_sbrk+0x5c>)
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <_sbrk+0x60>)
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <_sbrk+0x64>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <_sbrk+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d207      	bcs.n	80017e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d8:	f004 fc26 	bl	8006028 <__errno>
 80017dc:	4603      	mov	r3, r0
 80017de:	220c      	movs	r2, #12
 80017e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017e6:	e009      	b.n	80017fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <_sbrk+0x64>)
 80017f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20020000 	.word	0x20020000
 8001808:	00000400 	.word	0x00000400
 800180c:	20005618 	.word	0x20005618
 8001810:	20005768 	.word	0x20005768

08001814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <SystemInit+0x20>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <SystemInit+0x20>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001838:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001870 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800183c:	f7ff ffea 	bl	8001814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001840:	480c      	ldr	r0, [pc, #48]	@ (8001874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001842:	490d      	ldr	r1, [pc, #52]	@ (8001878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001858:	4c0a      	ldr	r4, [pc, #40]	@ (8001884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001866:	f004 fbe5 	bl	8006034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186a:	f7ff f8ef 	bl	8000a4c <main>
  bx  lr    
 800186e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001878:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800187c:	0801a428 	.word	0x0801a428
  ldr r2, =_sbss
 8001880:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001884:	20005768 	.word	0x20005768

08001888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC_IRQHandler>
	...

0800188c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001890:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <HAL_Init+0x40>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_Init+0x40>)
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_Init+0x40>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 fd51 	bl	800235c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ba:	200f      	movs	r0, #15
 80018bc:	f000 f808 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff fdce 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_InitTick+0x54>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_InitTick+0x58>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fd69 	bl	80023c6 <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00e      	b.n	800191c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0f      	cmp	r3, #15
 8001902:	d80a      	bhi.n	800191a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001904:	2200      	movs	r2, #0
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800190c:	f000 fd31 	bl	8002372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	4a06      	ldr	r2, [pc, #24]	@ (800192c <HAL_InitTick+0x5c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000000c 	.word	0x2000000c
 8001928:	20000014 	.word	0x20000014
 800192c:	20000010 	.word	0x20000010

08001930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_IncTick+0x20>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_IncTick+0x24>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <HAL_IncTick+0x24>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000014 	.word	0x20000014
 8001954:	2000561c 	.word	0x2000561c

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	2000561c 	.word	0x2000561c

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff ffee 	bl	8001958 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffde 	bl	8001958 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000014 	.word	0x20000014

080019b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e033      	b.n	8001a36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fd6a 	bl	80014b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019fe:	f023 0302 	bic.w	r3, r3, #2
 8001a02:	f043 0202 	orr.w	r2, r3, #2
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fa58 	bl	8001ec0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f023 0303 	bic.w	r3, r3, #3
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a26:	e001      	b.n	8001a2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Start_DMA+0x1e>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0ce      	b.n	8001bfc <HAL_ADC_Start_DMA+0x1bc>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d018      	beq.n	8001aa6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a84:	4b5f      	ldr	r3, [pc, #380]	@ (8001c04 <HAL_ADC_Start_DMA+0x1c4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a5f      	ldr	r2, [pc, #380]	@ (8001c08 <HAL_ADC_Start_DMA+0x1c8>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9a      	lsrs	r2, r3, #18
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a98:	e002      	b.n	8001aa0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab4:	d107      	bne.n	8001ac6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ac4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	f040 8086 	bne.w	8001be2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b14:	d106      	bne.n	8001b24 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f023 0206 	bic.w	r2, r3, #6
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b22:	e002      	b.n	8001b2a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b32:	4b36      	ldr	r3, [pc, #216]	@ (8001c0c <HAL_ADC_Start_DMA+0x1cc>)
 8001b34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b3a:	4a35      	ldr	r2, [pc, #212]	@ (8001c10 <HAL_ADC_Start_DMA+0x1d0>)
 8001b3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b42:	4a34      	ldr	r2, [pc, #208]	@ (8001c14 <HAL_ADC_Start_DMA+0x1d4>)
 8001b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4a:	4a33      	ldr	r2, [pc, #204]	@ (8001c18 <HAL_ADC_Start_DMA+0x1d8>)
 8001b4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b66:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b76:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	334c      	adds	r3, #76	@ 0x4c
 8001b82:	4619      	mov	r1, r3
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f000 fcd8 	bl	800253c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10f      	bne.n	8001bb8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d129      	bne.n	8001bfa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	e020      	b.n	8001bfa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <HAL_ADC_Start_DMA+0x1dc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d11b      	bne.n	8001bfa <HAL_ADC_Start_DMA+0x1ba>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d114      	bne.n	8001bfa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	e00b      	b.n	8001bfa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f043 0210 	orr.w	r2, r3, #16
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	431bde83 	.word	0x431bde83
 8001c0c:	40012300 	.word	0x40012300
 8001c10:	080020b9 	.word	0x080020b9
 8001c14:	08002173 	.word	0x08002173
 8001c18:	0800218f 	.word	0x0800218f
 8001c1c:	40012000 	.word	0x40012000

08001c20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1c>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e113      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x244>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b09      	cmp	r3, #9
 8001c86:	d925      	bls.n	8001cd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68d9      	ldr	r1, [r3, #12]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3b1e      	subs	r3, #30
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	400a      	ands	r2, r1
 8001cac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68d9      	ldr	r1, [r3, #12]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4403      	add	r3, r0
 8001cc6:	3b1e      	subs	r3, #30
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	e022      	b.n	8001d1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6919      	ldr	r1, [r3, #16]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	2207      	movs	r2, #7
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6919      	ldr	r1, [r3, #16]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4403      	add	r3, r0
 8001d10:	409a      	lsls	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d824      	bhi.n	8001d6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	3b05      	subs	r3, #5
 8001d34:	221f      	movs	r2, #31
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	400a      	ands	r2, r1
 8001d42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b05      	subs	r3, #5
 8001d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d6a:	e04c      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b0c      	cmp	r3, #12
 8001d72:	d824      	bhi.n	8001dbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	3b23      	subs	r3, #35	@ 0x23
 8001d86:	221f      	movs	r2, #31
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43da      	mvns	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	400a      	ands	r2, r1
 8001d94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3b23      	subs	r3, #35	@ 0x23
 8001db0:	fa00 f203 	lsl.w	r2, r0, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dbc:	e023      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b41      	subs	r3, #65	@ 0x41
 8001dd0:	221f      	movs	r2, #31
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	400a      	ands	r2, r1
 8001dde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	3b41      	subs	r3, #65	@ 0x41
 8001dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e06:	4b29      	ldr	r3, [pc, #164]	@ (8001eac <HAL_ADC_ConfigChannel+0x250>)
 8001e08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a28      	ldr	r2, [pc, #160]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x254>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d10f      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1d8>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b12      	cmp	r3, #18
 8001e1a:	d10b      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x254>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12b      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x23a>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x258>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d003      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x1f4>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b11      	cmp	r3, #17
 8001e4e:	d122      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x258>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d111      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x25c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a11      	ldr	r2, [pc, #68]	@ (8001ebc <HAL_ADC_ConfigChannel+0x260>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	0c9a      	lsrs	r2, r3, #18
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e88:	e002      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f9      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40012300 	.word	0x40012300
 8001eb0:	40012000 	.word	0x40012000
 8001eb4:	10000012 	.word	0x10000012
 8001eb8:	2000000c 	.word	0x2000000c
 8001ebc:	431bde83 	.word	0x431bde83

08001ec0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ec8:	4b79      	ldr	r3, [pc, #484]	@ (80020b0 <ADC_Init+0x1f0>)
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ef4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	021a      	lsls	r2, r3, #8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f52:	4a58      	ldr	r2, [pc, #352]	@ (80020b4 <ADC_Init+0x1f4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d022      	beq.n	8001f9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6899      	ldr	r1, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	e00f      	b.n	8001fbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fbc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0202 	bic.w	r2, r2, #2
 8001fcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6899      	ldr	r1, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7e1b      	ldrb	r3, [r3, #24]
 8001fd8:	005a      	lsls	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ffa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800200a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	3b01      	subs	r3, #1
 8002018:	035a      	lsls	r2, r3, #13
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	e007      	b.n	8002034 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002032:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	3b01      	subs	r3, #1
 8002050:	051a      	lsls	r2, r3, #20
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6899      	ldr	r1, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002076:	025a      	lsls	r2, r3, #9
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800208e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6899      	ldr	r1, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	029a      	lsls	r2, r3, #10
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40012300 	.word	0x40012300
 80020b4:	0f000001 	.word	0x0f000001

080020b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d13c      	bne.n	800214c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d12b      	bne.n	8002144 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d127      	bne.n	8002144 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800210c:	2b00      	cmp	r3, #0
 800210e:	d119      	bne.n	8002144 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0220 	bic.w	r2, r2, #32
 800211e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	f043 0201 	orr.w	r2, r3, #1
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff fd6b 	bl	8001c20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800214a:	e00e      	b.n	800216a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7ff fd75 	bl	8001c48 <HAL_ADC_ErrorCallback>
}
 800215e:	e004      	b.n	800216a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff fd57 	bl	8001c34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2240      	movs	r2, #64	@ 0x40
 80021a0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f043 0204 	orr.w	r2, r3, #4
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff fd4a 	bl	8001c48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ee:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	60d3      	str	r3, [r2, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <__NVIC_GetPriorityGrouping+0x18>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	f003 0307 	and.w	r3, r3, #7
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	db0b      	blt.n	800224a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4907      	ldr	r1, [pc, #28]	@ (8002258 <__NVIC_EnableIRQ+0x38>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2001      	movs	r0, #1
 8002242:	fa00 f202 	lsl.w	r2, r0, r2
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000e100 	.word	0xe000e100

0800225c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db0a      	blt.n	8002286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	b2da      	uxtb	r2, r3
 8002274:	490c      	ldr	r1, [pc, #48]	@ (80022a8 <__NVIC_SetPriority+0x4c>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	0112      	lsls	r2, r2, #4
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	440b      	add	r3, r1
 8002280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002284:	e00a      	b.n	800229c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4908      	ldr	r1, [pc, #32]	@ (80022ac <__NVIC_SetPriority+0x50>)
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	3b04      	subs	r3, #4
 8002294:	0112      	lsls	r2, r2, #4
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	440b      	add	r3, r1
 800229a:	761a      	strb	r2, [r3, #24]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000e100 	.word	0xe000e100
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f1c3 0307 	rsb	r3, r3, #7
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	bf28      	it	cs
 80022ce:	2304      	movcs	r3, #4
 80022d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3304      	adds	r3, #4
 80022d6:	2b06      	cmp	r3, #6
 80022d8:	d902      	bls.n	80022e0 <NVIC_EncodePriority+0x30>
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3b03      	subs	r3, #3
 80022de:	e000      	b.n	80022e2 <NVIC_EncodePriority+0x32>
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	401a      	ands	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43d9      	mvns	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	4313      	orrs	r3, r2
         );
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	@ 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002328:	d301      	bcc.n	800232e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232a:	2301      	movs	r3, #1
 800232c:	e00f      	b.n	800234e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <SysTick_Config+0x40>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002336:	210f      	movs	r1, #15
 8002338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800233c:	f7ff ff8e 	bl	800225c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <SysTick_Config+0x40>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002346:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <SysTick_Config+0x40>)
 8002348:	2207      	movs	r2, #7
 800234a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	e000e010 	.word	0xe000e010

0800235c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff29 	bl	80021bc <__NVIC_SetPriorityGrouping>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002384:	f7ff ff3e 	bl	8002204 <__NVIC_GetPriorityGrouping>
 8002388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	6978      	ldr	r0, [r7, #20]
 8002390:	f7ff ff8e 	bl	80022b0 <NVIC_EncodePriority>
 8002394:	4602      	mov	r2, r0
 8002396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff5d 	bl	800225c <__NVIC_SetPriority>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff31 	bl	8002220 <__NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffa2 	bl	8002318 <SysTick_Config>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff fab4 	bl	8001958 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e099      	b.n	8002530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241c:	e00f      	b.n	800243e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800241e:	f7ff fa9b 	bl	8001958 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b05      	cmp	r3, #5
 800242a:	d908      	bls.n	800243e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2203      	movs	r2, #3
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e078      	b.n	8002530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e8      	bne.n	800241e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_DMA_Init+0x158>)
 8002458:	4013      	ands	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	2b04      	cmp	r3, #4
 8002496:	d107      	bne.n	80024a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	4313      	orrs	r3, r2
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f023 0307 	bic.w	r3, r3, #7
 80024be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d117      	bne.n	8002502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00e      	beq.n	8002502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fa6f 	bl	80029c8 <DMA_CheckFifoParam>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2240      	movs	r2, #64	@ 0x40
 80024f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024fe:	2301      	movs	r3, #1
 8002500:	e016      	b.n	8002530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa26 	bl	800295c <DMA_CalcBaseAndBitshift>
 8002510:	4603      	mov	r3, r0
 8002512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	223f      	movs	r2, #63	@ 0x3f
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	f010803f 	.word	0xf010803f

0800253c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_DMA_Start_IT+0x26>
 800255e:	2302      	movs	r3, #2
 8002560:	e040      	b.n	80025e4 <HAL_DMA_Start_IT+0xa8>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d12f      	bne.n	80025d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2202      	movs	r2, #2
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f9b8 	bl	8002900 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	223f      	movs	r2, #63	@ 0x3f
 8002596:	409a      	lsls	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0216 	orr.w	r2, r2, #22
 80025aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0208 	orr.w	r2, r2, #8
 80025c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e005      	b.n	80025e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025de:	2302      	movs	r3, #2
 80025e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002834 <HAL_DMA_IRQHandler+0x248>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a8e      	ldr	r2, [pc, #568]	@ (8002838 <HAL_DMA_IRQHandler+0x24c>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0a9b      	lsrs	r3, r3, #10
 8002604:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002616:	2208      	movs	r2, #8
 8002618:	409a      	lsls	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01a      	beq.n	8002658 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	2208      	movs	r2, #8
 8002646:	409a      	lsls	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265c:	2201      	movs	r2, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d012      	beq.n	800268e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267a:	2201      	movs	r2, #1
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002686:	f043 0202 	orr.w	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002692:	2204      	movs	r2, #4
 8002694:	409a      	lsls	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d012      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	2204      	movs	r2, #4
 80026b2:	409a      	lsls	r2, r3
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	f043 0204 	orr.w	r2, r3, #4
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c8:	2210      	movs	r2, #16
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d043      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d03c      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e6:	2210      	movs	r2, #16
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d018      	beq.n	800272e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d108      	bne.n	800271c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d024      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
 800271a:	e01f      	b.n	800275c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01b      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
 800272c:	e016      	b.n	800275c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0208 	bic.w	r2, r2, #8
 800274a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002760:	2220      	movs	r2, #32
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 808f 	beq.w	800288c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8087 	beq.w	800288c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002782:	2220      	movs	r2, #32
 8002784:	409a      	lsls	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b05      	cmp	r3, #5
 8002794:	d136      	bne.n	8002804 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0216 	bic.w	r2, r2, #22
 80027a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_DMA_IRQHandler+0x1da>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0208 	bic.w	r2, r2, #8
 80027d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027da:	223f      	movs	r2, #63	@ 0x3f
 80027dc:	409a      	lsls	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d07e      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
        }
        return;
 8002802:	e079      	b.n	80028f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01d      	beq.n	800284e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10d      	bne.n	800283c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002824:	2b00      	cmp	r3, #0
 8002826:	d031      	beq.n	800288c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
 8002830:	e02c      	b.n	800288c <HAL_DMA_IRQHandler+0x2a0>
 8002832:	bf00      	nop
 8002834:	2000000c 	.word	0x2000000c
 8002838:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d023      	beq.n	800288c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
 800284c:	e01e      	b.n	800288c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10f      	bne.n	800287c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0210 	bic.w	r2, r2, #16
 800286a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	2b00      	cmp	r3, #0
 8002892:	d032      	beq.n	80028fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d022      	beq.n	80028e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2205      	movs	r2, #5
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	3301      	adds	r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d307      	bcc.n	80028d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f2      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x2cc>
 80028d2:	e000      	b.n	80028d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
 80028f6:	e000      	b.n	80028fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80028f8:	bf00      	nop
    }
  }
}
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800291c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b40      	cmp	r3, #64	@ 0x40
 800292c:	d108      	bne.n	8002940 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800293e:	e007      	b.n	8002950 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	60da      	str	r2, [r3, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3b10      	subs	r3, #16
 800296c:	4a14      	ldr	r2, [pc, #80]	@ (80029c0 <DMA_CalcBaseAndBitshift+0x64>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002976:	4a13      	ldr	r2, [pc, #76]	@ (80029c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d909      	bls.n	800299e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	1d1a      	adds	r2, r3, #4
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	659a      	str	r2, [r3, #88]	@ 0x58
 800299c:	e007      	b.n	80029ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	aaaaaaab 	.word	0xaaaaaaab
 80029c4:	08006f84 	.word	0x08006f84

080029c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11f      	bne.n	8002a22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d856      	bhi.n	8002a96 <DMA_CheckFifoParam+0xce>
 80029e8:	a201      	add	r2, pc, #4	@ (adr r2, 80029f0 <DMA_CheckFifoParam+0x28>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a13 	.word	0x08002a13
 80029f8:	08002a01 	.word	0x08002a01
 80029fc:	08002a97 	.word	0x08002a97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d046      	beq.n	8002a9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a10:	e043      	b.n	8002a9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a1a:	d140      	bne.n	8002a9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a20:	e03d      	b.n	8002a9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a2a:	d121      	bne.n	8002a70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d837      	bhi.n	8002aa2 <DMA_CheckFifoParam+0xda>
 8002a32:	a201      	add	r2, pc, #4	@ (adr r2, 8002a38 <DMA_CheckFifoParam+0x70>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a49 	.word	0x08002a49
 8002a3c:	08002a4f 	.word	0x08002a4f
 8002a40:	08002a49 	.word	0x08002a49
 8002a44:	08002a61 	.word	0x08002a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4c:	e030      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d025      	beq.n	8002aa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5e:	e022      	b.n	8002aa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a68:	d11f      	bne.n	8002aaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a6e:	e01c      	b.n	8002aaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d903      	bls.n	8002a7e <DMA_CheckFifoParam+0xb6>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d003      	beq.n	8002a84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a7c:	e018      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      break;
 8002a82:	e015      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00e      	beq.n	8002aae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
      break;
 8002a94:	e00b      	b.n	8002aae <DMA_CheckFifoParam+0xe6>
      break;
 8002a96:	bf00      	nop
 8002a98:	e00a      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e008      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e006      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e004      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e002      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aae:	bf00      	nop
    }
  } 
  
  return status; 
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop

08002ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	@ 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e159      	b.n	8002d90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8148 	bne.w	8002d8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d005      	beq.n	8002b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d130      	bne.n	8002b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0201 	and.w	r2, r3, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d017      	beq.n	8002bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d123      	bne.n	8002c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	08da      	lsrs	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3208      	adds	r2, #8
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0203 	and.w	r2, r3, #3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a2 	beq.w	8002d8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b57      	ldr	r3, [pc, #348]	@ (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	4a56      	ldr	r2, [pc, #344]	@ (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c56:	4b54      	ldr	r3, [pc, #336]	@ (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c62:	4a52      	ldr	r2, [pc, #328]	@ (8002dac <HAL_GPIO_Init+0x2ec>)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a49      	ldr	r2, [pc, #292]	@ (8002db0 <HAL_GPIO_Init+0x2f0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d019      	beq.n	8002cc2 <HAL_GPIO_Init+0x202>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a48      	ldr	r2, [pc, #288]	@ (8002db4 <HAL_GPIO_Init+0x2f4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x1fe>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a47      	ldr	r2, [pc, #284]	@ (8002db8 <HAL_GPIO_Init+0x2f8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x1fa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a46      	ldr	r2, [pc, #280]	@ (8002dbc <HAL_GPIO_Init+0x2fc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x1f6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a45      	ldr	r2, [pc, #276]	@ (8002dc0 <HAL_GPIO_Init+0x300>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x1f2>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4935      	ldr	r1, [pc, #212]	@ (8002dac <HAL_GPIO_Init+0x2ec>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce2:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <HAL_GPIO_Init+0x304>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d06:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d30:	4a24      	ldr	r2, [pc, #144]	@ (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d36:	4b23      	ldr	r3, [pc, #140]	@ (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d60:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d84:	4a0f      	ldr	r2, [pc, #60]	@ (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f aea2 	bls.w	8002adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	@ 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002de4:	e003      	b.n	8002dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002de6:	887b      	ldrh	r3, [r7, #2]
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e12b      	b.n	8003066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fbbc 	bl	80015a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	@ 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e60:	f001 f8aa 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d807      	bhi.n	8002e80 <HAL_I2C_Init+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a80      	ldr	r2, [pc, #512]	@ (8003074 <HAL_I2C_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e006      	b.n	8002e8e <HAL_I2C_Init+0x92>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a7d      	ldr	r2, [pc, #500]	@ (8003078 <HAL_I2C_Init+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e7      	b.n	8003066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	@ (800307c <HAL_I2C_Init+0x280>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9b      	lsrs	r3, r3, #18
 8002ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_I2C_Init+0xd4>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e009      	b.n	8002ee4 <HAL_I2C_Init+0xe8>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a69      	ldr	r2, [pc, #420]	@ (8003080 <HAL_I2C_Init+0x284>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ef6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	495c      	ldr	r1, [pc, #368]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d819      	bhi.n	8002f38 <HAL_I2C_Init+0x13c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e59      	subs	r1, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f18:	400b      	ands	r3, r1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_I2C_Init+0x138>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	e051      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e04f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_I2C_Init+0x168>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e012      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_I2C_Init+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e58      	subs	r0, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003006:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6911      	ldr	r1, [r2, #16]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	000186a0 	.word	0x000186a0
 8003074:	001e847f 	.word	0x001e847f
 8003078:	003d08ff 	.word	0x003d08ff
 800307c:	431bde83 	.word	0x431bde83
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	4603      	mov	r3, r0
 8003094:	817b      	strh	r3, [r7, #10]
 8003096:	460b      	mov	r3, r1
 8003098:	813b      	strh	r3, [r7, #8]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800309e:	f7fe fc5b 	bl	8001958 <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	f040 80d9 	bne.w	8003264 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2319      	movs	r3, #25
 80030b8:	2201      	movs	r2, #1
 80030ba:	496d      	ldr	r1, [pc, #436]	@ (8003270 <HAL_I2C_Mem_Write+0x1ec>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f971 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
 80030ca:	e0cc      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_I2C_Mem_Write+0x56>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0c5      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d007      	beq.n	8003100 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2221      	movs	r2, #33	@ 0x21
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003130:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a4d      	ldr	r2, [pc, #308]	@ (8003274 <HAL_I2C_Mem_Write+0x1f0>)
 8003140:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003142:	88f8      	ldrh	r0, [r7, #6]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4603      	mov	r3, r0
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f890 	bl	8003278 <I2C_RequestMemoryWrite>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d052      	beq.n	8003204 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e081      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa36 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	2b04      	cmp	r3, #4
 8003178:	d107      	bne.n	800318a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003188:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06b      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d11b      	bne.n	8003204 <HAL_I2C_Mem_Write+0x180>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d017      	beq.n	8003204 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1aa      	bne.n	8003162 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fa29 	bl	8003668 <I2C_WaitOnBTFFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003232:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e016      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	00100002 	.word	0x00100002
 8003274:	ffff0000 	.word	0xffff0000

08003278 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	817b      	strh	r3, [r7, #10]
 800328a:	460b      	mov	r3, r1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f878 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c8:	d103      	bne.n	80032d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e05f      	b.n	8003396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	6a3a      	ldr	r2, [r7, #32]
 80032ea:	492d      	ldr	r1, [pc, #180]	@ (80033a0 <I2C_RequestMemoryWrite+0x128>)
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f8d3 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e04c      	b.n	8003396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003314:	6a39      	ldr	r1, [r7, #32]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f95e 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2b04      	cmp	r3, #4
 8003328:	d107      	bne.n	800333a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e02b      	b.n	8003396 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	611a      	str	r2, [r3, #16]
 800334e:	e021      	b.n	8003394 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003350:	893b      	ldrh	r3, [r7, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	b29b      	uxth	r3, r3
 8003356:	b2da      	uxtb	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003360:	6a39      	ldr	r1, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f938 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e005      	b.n	8003396 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800338a:	893b      	ldrh	r3, [r7, #8]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	00010002 	.word	0x00010002

080033a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b4:	e048      	b.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033bc:	d044      	beq.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fe facb 	bl	8001958 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d139      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d10d      	bne.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	e00c      	b.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	43da      	mvns	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	d116      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e023      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10d      	bne.n	800346e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	43da      	mvns	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	e00c      	b.n	8003488 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	429a      	cmp	r2, r3
 800348c:	d093      	beq.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a6:	e071      	b.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b6:	d123      	bne.n	8003500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	f043 0204 	orr.w	r2, r3, #4
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e067      	b.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003506:	d041      	beq.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7fe fa26 	bl	8001958 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d136      	bne.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d10c      	bne.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4013      	ands	r3, r2
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	e00b      	b.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	43da      	mvns	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e021      	b.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	0c1b      	lsrs	r3, r3, #16
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10c      	bne.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	43da      	mvns	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e00b      	b.n	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bf14      	ite	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	2300      	moveq	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f af6d 	bne.w	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e4:	e034      	b.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f886 	bl	80036f8 <I2C_IsAcknowledgeFailed>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035fc:	d028      	beq.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe f9ab 	bl	8001958 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11d      	bne.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361e:	2b80      	cmp	r3, #128	@ 0x80
 8003620:	d016      	beq.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e007      	b.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365a:	2b80      	cmp	r3, #128	@ 0x80
 800365c:	d1c3      	bne.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003674:	e034      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f83e 	bl	80036f8 <I2C_IsAcknowledgeFailed>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e034      	b.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800368c:	d028      	beq.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fe f963 	bl	8001958 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11d      	bne.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d016      	beq.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e007      	b.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d1c3      	bne.n	8003676 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800370e:	d11b      	bne.n	8003748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e267      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d075      	beq.n	8003862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003776:	4b88      	ldr	r3, [pc, #544]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b04      	cmp	r3, #4
 8003780:	d00c      	beq.n	800379c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003782:	4b85      	ldr	r3, [pc, #532]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800378a:	2b08      	cmp	r3, #8
 800378c:	d112      	bne.n	80037b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378e:	4b82      	ldr	r3, [pc, #520]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800379a:	d10b      	bne.n	80037b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379c:	4b7e      	ldr	r3, [pc, #504]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d05b      	beq.n	8003860 <HAL_RCC_OscConfig+0x108>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d157      	bne.n	8003860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e242      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037bc:	d106      	bne.n	80037cc <HAL_RCC_OscConfig+0x74>
 80037be:	4b76      	ldr	r3, [pc, #472]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a75      	ldr	r2, [pc, #468]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e01d      	b.n	8003808 <HAL_RCC_OscConfig+0xb0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x98>
 80037d6:	4b70      	ldr	r3, [pc, #448]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6f      	ldr	r2, [pc, #444]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80037dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0xb0>
 80037f0:	4b69      	ldr	r3, [pc, #420]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a68      	ldr	r2, [pc, #416]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b66      	ldr	r3, [pc, #408]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a65      	ldr	r2, [pc, #404]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 8003802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe f8a2 	bl	8001958 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003818:	f7fe f89e 	bl	8001958 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	@ 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e207      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b5b      	ldr	r3, [pc, #364]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0xc0>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe f88e 	bl	8001958 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe f88a 	bl	8001958 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e1f3      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	4b51      	ldr	r3, [pc, #324]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0xe8>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d063      	beq.n	8003936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800386e:	4b4a      	ldr	r3, [pc, #296]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387a:	4b47      	ldr	r3, [pc, #284]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003882:	2b08      	cmp	r3, #8
 8003884:	d11c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003886:	4b44      	ldr	r3, [pc, #272]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d116      	bne.n	80038c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	4b41      	ldr	r3, [pc, #260]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_RCC_OscConfig+0x152>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e1c7      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4937      	ldr	r1, [pc, #220]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038be:	e03a      	b.n	8003936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c8:	4b34      	ldr	r3, [pc, #208]	@ (800399c <HAL_RCC_OscConfig+0x244>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe f843 	bl	8001958 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fe f83f 	bl	8001958 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e1a8      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f4:	4b28      	ldr	r3, [pc, #160]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4925      	ldr	r1, [pc, #148]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]
 8003908:	e015      	b.n	8003936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800390a:	4b24      	ldr	r3, [pc, #144]	@ (800399c <HAL_RCC_OscConfig+0x244>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe f822 	bl	8001958 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003918:	f7fe f81e 	bl	8001958 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e187      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d036      	beq.n	80039b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394a:	4b15      	ldr	r3, [pc, #84]	@ (80039a0 <HAL_RCC_OscConfig+0x248>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fe f802 	bl	8001958 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003958:	f7fd fffe 	bl	8001958 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e167      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396a:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_OscConfig+0x240>)
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x200>
 8003976:	e01b      	b.n	80039b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003978:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <HAL_RCC_OscConfig+0x248>)
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397e:	f7fd ffeb 	bl	8001958 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	e00e      	b.n	80039a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003986:	f7fd ffe7 	bl	8001958 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d907      	bls.n	80039a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e150      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
 8003998:	40023800 	.word	0x40023800
 800399c:	42470000 	.word	0x42470000
 80039a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a4:	4b88      	ldr	r3, [pc, #544]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ea      	bne.n	8003986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8097 	beq.w	8003aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039be:	2300      	movs	r3, #0
 80039c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c2:	4b81      	ldr	r3, [pc, #516]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	4b7d      	ldr	r3, [pc, #500]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	4a7c      	ldr	r2, [pc, #496]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80039de:	4b7a      	ldr	r3, [pc, #488]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	4b77      	ldr	r3, [pc, #476]	@ (8003bcc <HAL_RCC_OscConfig+0x474>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039fa:	4b74      	ldr	r3, [pc, #464]	@ (8003bcc <HAL_RCC_OscConfig+0x474>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a73      	ldr	r2, [pc, #460]	@ (8003bcc <HAL_RCC_OscConfig+0x474>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a06:	f7fd ffa7 	bl	8001958 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7fd ffa3 	bl	8001958 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e10c      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	4b6a      	ldr	r3, [pc, #424]	@ (8003bcc <HAL_RCC_OscConfig+0x474>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x2ea>
 8003a34:	4b64      	ldr	r3, [pc, #400]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a38:	4a63      	ldr	r2, [pc, #396]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a40:	e01c      	b.n	8003a7c <HAL_RCC_OscConfig+0x324>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x30c>
 8003a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a56:	4b5c      	ldr	r3, [pc, #368]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	4a5b      	ldr	r2, [pc, #364]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0x324>
 8003a64:	4b58      	ldr	r3, [pc, #352]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a68:	4a57      	ldr	r2, [pc, #348]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a70:	4b55      	ldr	r3, [pc, #340]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	4a54      	ldr	r2, [pc, #336]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 0304 	bic.w	r3, r3, #4
 8003a7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d015      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fd ff68 	bl	8001958 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fd ff64 	bl	8001958 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0cb      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa2:	4b49      	ldr	r3, [pc, #292]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0ee      	beq.n	8003a8c <HAL_RCC_OscConfig+0x334>
 8003aae:	e014      	b.n	8003ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab0:	f7fd ff52 	bl	8001958 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fd ff4e 	bl	8001958 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e0b5      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ace:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1ee      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae0:	4b39      	ldr	r3, [pc, #228]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	4a38      	ldr	r2, [pc, #224]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80a1 	beq.w	8003c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003af6:	4b34      	ldr	r3, [pc, #208]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d05c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d141      	bne.n	8003b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b31      	ldr	r3, [pc, #196]	@ (8003bd0 <HAL_RCC_OscConfig+0x478>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fd ff22 	bl	8001958 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd ff1e 	bl	8001958 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e087      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	4b27      	ldr	r3, [pc, #156]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	019b      	lsls	r3, r3, #6
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	085b      	lsrs	r3, r3, #1
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	491b      	ldr	r1, [pc, #108]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b60:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd0 <HAL_RCC_OscConfig+0x478>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fd fef7 	bl	8001958 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fd fef3 	bl	8001958 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e05c      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b80:	4b11      	ldr	r3, [pc, #68]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x416>
 8003b8c:	e054      	b.n	8003c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_RCC_OscConfig+0x478>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd fee0 	bl	8001958 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fedc 	bl	8001958 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e045      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x444>
 8003bba:	e03d      	b.n	8003c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e038      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <HAL_RCC_OscConfig+0x4ec>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d028      	beq.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d121      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d11a      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c04:	4013      	ands	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d111      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800

08003c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0cc      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b68      	ldr	r3, [pc, #416]	@ (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d90c      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b65      	ldr	r3, [pc, #404]	@ (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b63      	ldr	r3, [pc, #396]	@ (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0b8      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c9c:	4b59      	ldr	r3, [pc, #356]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4a58      	ldr	r2, [pc, #352]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ca6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb4:	4b53      	ldr	r3, [pc, #332]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a52      	ldr	r2, [pc, #328]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc0:	4b50      	ldr	r3, [pc, #320]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	494d      	ldr	r1, [pc, #308]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d044      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b47      	ldr	r3, [pc, #284]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d119      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e07f      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d06:	4b3f      	ldr	r3, [pc, #252]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06f      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d16:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e067      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d26:	4b37      	ldr	r3, [pc, #220]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 0203 	bic.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4934      	ldr	r1, [pc, #208]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d38:	f7fd fe0e 	bl	8001958 <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d40:	f7fd fe0a 	bl	8001958 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e04f      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d56:	4b2b      	ldr	r3, [pc, #172]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 020c 	and.w	r2, r3, #12
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1eb      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d68:	4b25      	ldr	r3, [pc, #148]	@ (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d20c      	bcs.n	8003d90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b22      	ldr	r3, [pc, #136]	@ (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e032      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d9c:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4916      	ldr	r1, [pc, #88]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dba:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	490e      	ldr	r1, [pc, #56]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dce:	f000 f821 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	490a      	ldr	r1, [pc, #40]	@ (8003e08 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	5ccb      	ldrb	r3, [r1, r3]
 8003de2:	fa22 f303 	lsr.w	r3, r2, r3
 8003de6:	4a09      	ldr	r2, [pc, #36]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003dea:	4b09      	ldr	r3, [pc, #36]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd fd6e 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023c00 	.word	0x40023c00
 8003e04:	40023800 	.word	0x40023800
 8003e08:	08006f6c 	.word	0x08006f6c
 8003e0c:	2000000c 	.word	0x2000000c
 8003e10:	20000010 	.word	0x20000010

08003e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e18:	b090      	sub	sp, #64	@ 0x40
 8003e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e2c:	4b59      	ldr	r3, [pc, #356]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d00d      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x40>
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	f200 80a1 	bhi.w	8003f80 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x34>
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d003      	beq.n	8003e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e46:	e09b      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e48:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e4c:	e09b      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e4e:	4b53      	ldr	r3, [pc, #332]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e52:	e098      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e54:	4b4f      	ldr	r3, [pc, #316]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d028      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	099b      	lsrs	r3, r3, #6
 8003e70:	2200      	movs	r2, #0
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4b47      	ldr	r3, [pc, #284]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e80:	fb03 f201 	mul.w	r2, r3, r1
 8003e84:	2300      	movs	r3, #0
 8003e86:	fb00 f303 	mul.w	r3, r0, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	4a43      	ldr	r2, [pc, #268]	@ (8003f9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e8e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e94:	460a      	mov	r2, r1
 8003e96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e9a:	4413      	add	r3, r2
 8003e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	61bb      	str	r3, [r7, #24]
 8003ea4:	61fa      	str	r2, [r7, #28]
 8003ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003eae:	f7fc fa47 	bl	8000340 <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eba:	e053      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebc:	4b35      	ldr	r3, [pc, #212]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	617a      	str	r2, [r7, #20]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ece:	f04f 0b00 	mov.w	fp, #0
 8003ed2:	4652      	mov	r2, sl
 8003ed4:	465b      	mov	r3, fp
 8003ed6:	f04f 0000 	mov.w	r0, #0
 8003eda:	f04f 0100 	mov.w	r1, #0
 8003ede:	0159      	lsls	r1, r3, #5
 8003ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee4:	0150      	lsls	r0, r2, #5
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	ebb2 080a 	subs.w	r8, r2, sl
 8003eee:	eb63 090b 	sbc.w	r9, r3, fp
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003efe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f06:	ebb2 0408 	subs.w	r4, r2, r8
 8003f0a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	00eb      	lsls	r3, r5, #3
 8003f18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f1c:	00e2      	lsls	r2, r4, #3
 8003f1e:	4614      	mov	r4, r2
 8003f20:	461d      	mov	r5, r3
 8003f22:	eb14 030a 	adds.w	r3, r4, sl
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	eb45 030b 	adc.w	r3, r5, fp
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	028b      	lsls	r3, r1, #10
 8003f3e:	4621      	mov	r1, r4
 8003f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f44:	4621      	mov	r1, r4
 8003f46:	028a      	lsls	r2, r1, #10
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4e:	2200      	movs	r2, #0
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	60fa      	str	r2, [r7, #12]
 8003f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f58:	f7fc f9f2 	bl	8000340 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f7e:	e002      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f80:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3740      	adds	r7, #64	@ 0x40
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	017d7840 	.word	0x017d7840

08003fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	@ (8003fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c

08003fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fbc:	f7ff fff0 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0a9b      	lsrs	r3, r3, #10
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4903      	ldr	r1, [pc, #12]	@ (8003fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	08006f7c 	.word	0x08006f7c

08003fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e041      	b.n	8004076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd fb12 	bl	8001630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3304      	adds	r3, #4
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f000 fb8c 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d001      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e044      	b.n	8004122 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004130 <HAL_TIM_Base_Start_IT+0xb0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d018      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x6c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c2:	d013      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x6c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004134 <HAL_TIM_Base_Start_IT+0xb4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00e      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x6c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <HAL_TIM_Base_Start_IT+0xb8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d009      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x6c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a17      	ldr	r2, [pc, #92]	@ (800413c <HAL_TIM_Base_Start_IT+0xbc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x6c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a16      	ldr	r2, [pc, #88]	@ (8004140 <HAL_TIM_Base_Start_IT+0xc0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d111      	bne.n	8004110 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d010      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0201 	orr.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410e:	e007      	b.n	8004120 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40014000 	.word	0x40014000

08004144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e041      	b.n	80041da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f839 	bl	80041e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f000 fada 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d020      	beq.n	800425a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01b      	beq.n	800425a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0202 	mvn.w	r2, #2
 800422a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fa5c 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 8004246:	e005      	b.n	8004254 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fa4e 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa5f 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d020      	beq.n	80042a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01b      	beq.n	80042a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f06f 0204 	mvn.w	r2, #4
 8004276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fa36 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 8004292:	e005      	b.n	80042a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fa28 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fa39 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d020      	beq.n	80042f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01b      	beq.n	80042f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0208 	mvn.w	r2, #8
 80042c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2204      	movs	r2, #4
 80042c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fa10 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 80042de:	e005      	b.n	80042ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fa02 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa13 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d020      	beq.n	800433e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01b      	beq.n	800433e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f06f 0210 	mvn.w	r2, #16
 800430e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2208      	movs	r2, #8
 8004314:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f9ea 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 800432a:	e005      	b.n	8004338 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f9dc 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9ed 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f06f 0201 	mvn.w	r2, #1
 800435a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7fc f967 	bl	8000630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00c      	beq.n	8004386 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800437e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fd57 	bl	8004e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00c      	beq.n	80043aa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f9be 	bl	8004726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00c      	beq.n	80043ce <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f06f 0220 	mvn.w	r2, #32
 80043c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fd29 	bl	8004e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e0ae      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b0c      	cmp	r3, #12
 8004402:	f200 809f 	bhi.w	8004544 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004406:	a201      	add	r2, pc, #4	@ (adr r2, 800440c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004441 	.word	0x08004441
 8004410:	08004545 	.word	0x08004545
 8004414:	08004545 	.word	0x08004545
 8004418:	08004545 	.word	0x08004545
 800441c:	08004481 	.word	0x08004481
 8004420:	08004545 	.word	0x08004545
 8004424:	08004545 	.word	0x08004545
 8004428:	08004545 	.word	0x08004545
 800442c:	080044c3 	.word	0x080044c3
 8004430:	08004545 	.word	0x08004545
 8004434:	08004545 	.word	0x08004545
 8004438:	08004545 	.word	0x08004545
 800443c:	08004503 	.word	0x08004503
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fa04 	bl	8004854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0208 	orr.w	r2, r2, #8
 800445a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0204 	bic.w	r2, r2, #4
 800446a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6999      	ldr	r1, [r3, #24]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	619a      	str	r2, [r3, #24]
      break;
 800447e:	e064      	b.n	800454a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fa4a 	bl	8004920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800449a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6999      	ldr	r1, [r3, #24]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	021a      	lsls	r2, r3, #8
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	619a      	str	r2, [r3, #24]
      break;
 80044c0:	e043      	b.n	800454a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fa95 	bl	80049f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0208 	orr.w	r2, r2, #8
 80044dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0204 	bic.w	r2, r2, #4
 80044ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69d9      	ldr	r1, [r3, #28]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	61da      	str	r2, [r3, #28]
      break;
 8004500:	e023      	b.n	800454a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fadf 	bl	8004acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800451c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69da      	ldr	r2, [r3, #28]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800452c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69d9      	ldr	r1, [r3, #28]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	021a      	lsls	r2, r3, #8
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	61da      	str	r2, [r3, #28]
      break;
 8004542:	e002      	b.n	800454a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	75fb      	strb	r3, [r7, #23]
      break;
 8004548:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004552:	7dfb      	ldrb	r3, [r7, #23]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIM_ConfigClockSource+0x1c>
 8004574:	2302      	movs	r3, #2
 8004576:	e0b4      	b.n	80046e2 <HAL_TIM_ConfigClockSource+0x186>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800459e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b0:	d03e      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0xd4>
 80045b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b6:	f200 8087 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045be:	f000 8086 	beq.w	80046ce <HAL_TIM_ConfigClockSource+0x172>
 80045c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c6:	d87f      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b70      	cmp	r3, #112	@ 0x70
 80045ca:	d01a      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0xa6>
 80045cc:	2b70      	cmp	r3, #112	@ 0x70
 80045ce:	d87b      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b60      	cmp	r3, #96	@ 0x60
 80045d2:	d050      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x11a>
 80045d4:	2b60      	cmp	r3, #96	@ 0x60
 80045d6:	d877      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b50      	cmp	r3, #80	@ 0x50
 80045da:	d03c      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0xfa>
 80045dc:	2b50      	cmp	r3, #80	@ 0x50
 80045de:	d873      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045e0:	2b40      	cmp	r3, #64	@ 0x40
 80045e2:	d058      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x13a>
 80045e4:	2b40      	cmp	r3, #64	@ 0x40
 80045e6:	d86f      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045e8:	2b30      	cmp	r3, #48	@ 0x30
 80045ea:	d064      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 80045ec:	2b30      	cmp	r3, #48	@ 0x30
 80045ee:	d86b      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d060      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d867      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d05c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d05a      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	e062      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004612:	f000 fb25 	bl	8004c60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	609a      	str	r2, [r3, #8]
      break;
 800462e:	e04f      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004640:	f000 fb0e 	bl	8004c60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004652:	609a      	str	r2, [r3, #8]
      break;
 8004654:	e03c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fa82 	bl	8004b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2150      	movs	r1, #80	@ 0x50
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fadb 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 8004674:	e02c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004682:	461a      	mov	r2, r3
 8004684:	f000 faa1 	bl	8004bca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2160      	movs	r1, #96	@ 0x60
 800468e:	4618      	mov	r0, r3
 8004690:	f000 facb 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 8004694:	e01c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 fa62 	bl	8004b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2140      	movs	r1, #64	@ 0x40
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fabb 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 80046b4:	e00c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f000 fab2 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 80046c6:	e003      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      break;
 80046cc:	e000      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3a      	ldr	r2, [pc, #232]	@ (8004838 <TIM_Base_SetConfig+0xfc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00f      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475a:	d00b      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a37      	ldr	r2, [pc, #220]	@ (800483c <TIM_Base_SetConfig+0x100>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d007      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a36      	ldr	r2, [pc, #216]	@ (8004840 <TIM_Base_SetConfig+0x104>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0x38>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a35      	ldr	r2, [pc, #212]	@ (8004844 <TIM_Base_SetConfig+0x108>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d108      	bne.n	8004786 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2b      	ldr	r2, [pc, #172]	@ (8004838 <TIM_Base_SetConfig+0xfc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01b      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004794:	d017      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a28      	ldr	r2, [pc, #160]	@ (800483c <TIM_Base_SetConfig+0x100>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a27      	ldr	r2, [pc, #156]	@ (8004840 <TIM_Base_SetConfig+0x104>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00f      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a26      	ldr	r2, [pc, #152]	@ (8004844 <TIM_Base_SetConfig+0x108>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a25      	ldr	r2, [pc, #148]	@ (8004848 <TIM_Base_SetConfig+0x10c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d007      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a24      	ldr	r2, [pc, #144]	@ (800484c <TIM_Base_SetConfig+0x110>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_Base_SetConfig+0x8a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a23      	ldr	r2, [pc, #140]	@ (8004850 <TIM_Base_SetConfig+0x114>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d108      	bne.n	80047d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004838 <TIM_Base_SetConfig+0xfc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d103      	bne.n	800480c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d105      	bne.n	800482a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f023 0201 	bic.w	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	611a      	str	r2, [r3, #16]
  }
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40014000 	.word	0x40014000
 800484c:	40014400 	.word	0x40014400
 8004850:	40014800 	.word	0x40014800

08004854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f023 0201 	bic.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 0302 	bic.w	r3, r3, #2
 800489c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a1c      	ldr	r2, [pc, #112]	@ (800491c <TIM_OC1_SetConfig+0xc8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10c      	bne.n	80048ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 0308 	bic.w	r3, r3, #8
 80048b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f023 0304 	bic.w	r3, r3, #4
 80048c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a13      	ldr	r2, [pc, #76]	@ (800491c <TIM_OC1_SetConfig+0xc8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d111      	bne.n	80048f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	621a      	str	r2, [r3, #32]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40010000 	.word	0x40010000

08004920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f023 0210 	bic.w	r2, r3, #16
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0320 	bic.w	r3, r3, #32
 800496a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <TIM_OC2_SetConfig+0xd4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d10d      	bne.n	800499c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800499a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a15      	ldr	r2, [pc, #84]	@ (80049f4 <TIM_OC2_SetConfig+0xd4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d113      	bne.n	80049cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40010000 	.word	0x40010000

080049f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0303 	bic.w	r3, r3, #3
 8004a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac8 <TIM_OC3_SetConfig+0xd0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d10d      	bne.n	8004a72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a14      	ldr	r2, [pc, #80]	@ (8004ac8 <TIM_OC3_SetConfig+0xd0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d113      	bne.n	8004aa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	621a      	str	r2, [r3, #32]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40010000 	.word	0x40010000

08004acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	031b      	lsls	r3, r3, #12
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a10      	ldr	r2, [pc, #64]	@ (8004b68 <TIM_OC4_SetConfig+0x9c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d109      	bne.n	8004b40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	019b      	lsls	r3, r3, #6
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40010000 	.word	0x40010000

08004b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f023 0201 	bic.w	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 030a 	bic.w	r3, r3, #10
 8004ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b087      	sub	sp, #28
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f023 0210 	bic.w	r2, r3, #16
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	031b      	lsls	r3, r3, #12
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f043 0307 	orr.w	r3, r3, #7
 8004c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	609a      	str	r2, [r3, #8]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	021a      	lsls	r2, r3, #8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	609a      	str	r2, [r3, #8]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e050      	b.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d018      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d04:	d013      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	@ (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a16      	ldr	r2, [pc, #88]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a15      	ldr	r2, [pc, #84]	@ (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a13      	ldr	r2, [pc, #76]	@ (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d10c      	bne.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40014000 	.word	0x40014000

08004d7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e03d      	b.n	8004e14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <arm_rfft_fast_init_f32>:
 8004e48:	084b      	lsrs	r3, r1, #1
 8004e4a:	2b80      	cmp	r3, #128	@ 0x80
 8004e4c:	b410      	push	{r4}
 8004e4e:	8201      	strh	r1, [r0, #16]
 8004e50:	8003      	strh	r3, [r0, #0]
 8004e52:	d046      	beq.n	8004ee2 <arm_rfft_fast_init_f32+0x9a>
 8004e54:	d916      	bls.n	8004e84 <arm_rfft_fast_init_f32+0x3c>
 8004e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e5a:	d03c      	beq.n	8004ed6 <arm_rfft_fast_init_f32+0x8e>
 8004e5c:	d928      	bls.n	8004eb0 <arm_rfft_fast_init_f32+0x68>
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e62:	d01f      	beq.n	8004ea4 <arm_rfft_fast_init_f32+0x5c>
 8004e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e68:	d112      	bne.n	8004e90 <arm_rfft_fast_init_f32+0x48>
 8004e6a:	4920      	ldr	r1, [pc, #128]	@ (8004eec <arm_rfft_fast_init_f32+0xa4>)
 8004e6c:	4a20      	ldr	r2, [pc, #128]	@ (8004ef0 <arm_rfft_fast_init_f32+0xa8>)
 8004e6e:	4b21      	ldr	r3, [pc, #132]	@ (8004ef4 <arm_rfft_fast_init_f32+0xac>)
 8004e70:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8004e74:	8184      	strh	r4, [r0, #12]
 8004e76:	6081      	str	r1, [r0, #8]
 8004e78:	6042      	str	r2, [r0, #4]
 8004e7a:	6143      	str	r3, [r0, #20]
 8004e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e80:	2000      	movs	r0, #0
 8004e82:	4770      	bx	lr
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d01c      	beq.n	8004ec2 <arm_rfft_fast_init_f32+0x7a>
 8004e88:	2b40      	cmp	r3, #64	@ 0x40
 8004e8a:	d006      	beq.n	8004e9a <arm_rfft_fast_init_f32+0x52>
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d01d      	beq.n	8004ecc <arm_rfft_fast_init_f32+0x84>
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	2438      	movs	r4, #56	@ 0x38
 8004e9c:	4916      	ldr	r1, [pc, #88]	@ (8004ef8 <arm_rfft_fast_init_f32+0xb0>)
 8004e9e:	4a17      	ldr	r2, [pc, #92]	@ (8004efc <arm_rfft_fast_init_f32+0xb4>)
 8004ea0:	4b17      	ldr	r3, [pc, #92]	@ (8004f00 <arm_rfft_fast_init_f32+0xb8>)
 8004ea2:	e7e7      	b.n	8004e74 <arm_rfft_fast_init_f32+0x2c>
 8004ea4:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8004ea8:	4916      	ldr	r1, [pc, #88]	@ (8004f04 <arm_rfft_fast_init_f32+0xbc>)
 8004eaa:	4a17      	ldr	r2, [pc, #92]	@ (8004f08 <arm_rfft_fast_init_f32+0xc0>)
 8004eac:	4b17      	ldr	r3, [pc, #92]	@ (8004f0c <arm_rfft_fast_init_f32+0xc4>)
 8004eae:	e7e1      	b.n	8004e74 <arm_rfft_fast_init_f32+0x2c>
 8004eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eb4:	d1ec      	bne.n	8004e90 <arm_rfft_fast_init_f32+0x48>
 8004eb6:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8004eba:	4915      	ldr	r1, [pc, #84]	@ (8004f10 <arm_rfft_fast_init_f32+0xc8>)
 8004ebc:	4a15      	ldr	r2, [pc, #84]	@ (8004f14 <arm_rfft_fast_init_f32+0xcc>)
 8004ebe:	4b16      	ldr	r3, [pc, #88]	@ (8004f18 <arm_rfft_fast_init_f32+0xd0>)
 8004ec0:	e7d8      	b.n	8004e74 <arm_rfft_fast_init_f32+0x2c>
 8004ec2:	2430      	movs	r4, #48	@ 0x30
 8004ec4:	4915      	ldr	r1, [pc, #84]	@ (8004f1c <arm_rfft_fast_init_f32+0xd4>)
 8004ec6:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <arm_rfft_fast_init_f32+0xd8>)
 8004ec8:	4b16      	ldr	r3, [pc, #88]	@ (8004f24 <arm_rfft_fast_init_f32+0xdc>)
 8004eca:	e7d3      	b.n	8004e74 <arm_rfft_fast_init_f32+0x2c>
 8004ecc:	2414      	movs	r4, #20
 8004ece:	4916      	ldr	r1, [pc, #88]	@ (8004f28 <arm_rfft_fast_init_f32+0xe0>)
 8004ed0:	4a16      	ldr	r2, [pc, #88]	@ (8004f2c <arm_rfft_fast_init_f32+0xe4>)
 8004ed2:	4b17      	ldr	r3, [pc, #92]	@ (8004f30 <arm_rfft_fast_init_f32+0xe8>)
 8004ed4:	e7ce      	b.n	8004e74 <arm_rfft_fast_init_f32+0x2c>
 8004ed6:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8004eda:	4916      	ldr	r1, [pc, #88]	@ (8004f34 <arm_rfft_fast_init_f32+0xec>)
 8004edc:	4a16      	ldr	r2, [pc, #88]	@ (8004f38 <arm_rfft_fast_init_f32+0xf0>)
 8004ede:	4b17      	ldr	r3, [pc, #92]	@ (8004f3c <arm_rfft_fast_init_f32+0xf4>)
 8004ee0:	e7c8      	b.n	8004e74 <arm_rfft_fast_init_f32+0x2c>
 8004ee2:	24d0      	movs	r4, #208	@ 0xd0
 8004ee4:	4916      	ldr	r1, [pc, #88]	@ (8004f40 <arm_rfft_fast_init_f32+0xf8>)
 8004ee6:	4a17      	ldr	r2, [pc, #92]	@ (8004f44 <arm_rfft_fast_init_f32+0xfc>)
 8004ee8:	4b17      	ldr	r3, [pc, #92]	@ (8004f48 <arm_rfft_fast_init_f32+0x100>)
 8004eea:	e7c3      	b.n	8004e74 <arm_rfft_fast_init_f32+0x2c>
 8004eec:	08015d94 	.word	0x08015d94
 8004ef0:	08006f8c 	.word	0x08006f8c
 8004ef4:	0800d0fc 	.word	0x0800d0fc
 8004ef8:	0800b08c 	.word	0x0800b08c
 8004efc:	08017b54 	.word	0x08017b54
 8004f00:	0801a044 	.word	0x0801a044
 8004f04:	08013a7c 	.word	0x08013a7c
 8004f08:	0801197c 	.word	0x0801197c
 8004f0c:	0800b0fc 	.word	0x0800b0fc
 8004f10:	08019cd4 	.word	0x08019cd4
 8004f14:	080110fc 	.word	0x080110fc
 8004f18:	08017d54 	.word	0x08017d54
 8004f1c:	08014934 	.word	0x08014934
 8004f20:	0801397c 	.word	0x0801397c
 8004f24:	0800af8c 	.word	0x0800af8c
 8004f28:	0801488c 	.word	0x0801488c
 8004f2c:	080118fc 	.word	0x080118fc
 8004f30:	080148b4 	.word	0x080148b4
 8004f34:	08018554 	.word	0x08018554
 8004f38:	08014d94 	.word	0x08014d94
 8004f3c:	080188d4 	.word	0x080188d4
 8004f40:	0801a244 	.word	0x0801a244
 8004f44:	08014994 	.word	0x08014994
 8004f48:	080198d4 	.word	0x080198d4

08004f4c <arm_rfft_fast_f32>:
 8004f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f50:	8a06      	ldrh	r6, [r0, #16]
 8004f52:	0876      	lsrs	r6, r6, #1
 8004f54:	4607      	mov	r7, r0
 8004f56:	4615      	mov	r5, r2
 8004f58:	8006      	strh	r6, [r0, #0]
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d15c      	bne.n	800501a <arm_rfft_fast_f32+0xce>
 8004f60:	461a      	mov	r2, r3
 8004f62:	2301      	movs	r3, #1
 8004f64:	f000 fbe4 	bl	8005730 <arm_cfft_f32>
 8004f68:	edd4 7a00 	vldr	s15, [r4]
 8004f6c:	ed94 7a01 	vldr	s14, [r4, #4]
 8004f70:	883e      	ldrh	r6, [r7, #0]
 8004f72:	6978      	ldr	r0, [r7, #20]
 8004f74:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004f78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f7c:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 8004f80:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004f84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f88:	3e01      	subs	r6, #1
 8004f8a:	ee26 7a83 	vmul.f32	s14, s13, s6
 8004f8e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004f92:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8004f96:	ed85 7a00 	vstr	s14, [r5]
 8004f9a:	edc5 7a01 	vstr	s15, [r5, #4]
 8004f9e:	3010      	adds	r0, #16
 8004fa0:	f105 0210 	add.w	r2, r5, #16
 8004fa4:	3b08      	subs	r3, #8
 8004fa6:	f104 0110 	add.w	r1, r4, #16
 8004faa:	ed93 7a02 	vldr	s14, [r3, #8]
 8004fae:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004fb2:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004fb6:	edd3 3a03 	vldr	s7, [r3, #12]
 8004fba:	ed11 5a01 	vldr	s10, [r1, #-4]
 8004fbe:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004fc2:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004fc6:	ee77 4a26 	vadd.f32	s9, s14, s13
 8004fca:	ee33 4a85 	vadd.f32	s8, s7, s10
 8004fce:	ee66 6a27 	vmul.f32	s13, s12, s15
 8004fd2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8004fd6:	ee35 5a63 	vsub.f32	s10, s10, s7
 8004fda:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004fde:	ee77 7a05 	vadd.f32	s15, s14, s10
 8004fe2:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004fe6:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004fea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004fee:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004ff2:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004ff6:	ee27 7a03 	vmul.f32	s14, s14, s6
 8004ffa:	3e01      	subs	r6, #1
 8004ffc:	ed02 7a02 	vstr	s14, [r2, #-8]
 8005000:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005004:	f1a3 0308 	sub.w	r3, r3, #8
 8005008:	f101 0108 	add.w	r1, r1, #8
 800500c:	f100 0008 	add.w	r0, r0, #8
 8005010:	f102 0208 	add.w	r2, r2, #8
 8005014:	d1c9      	bne.n	8004faa <arm_rfft_fast_f32+0x5e>
 8005016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800501a:	edd1 7a00 	vldr	s15, [r1]
 800501e:	edd1 6a01 	vldr	s13, [r1, #4]
 8005022:	6941      	ldr	r1, [r0, #20]
 8005024:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005028:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800502c:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8005030:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005034:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005038:	3e01      	subs	r6, #1
 800503a:	ed82 7a00 	vstr	s14, [r2]
 800503e:	edc2 7a01 	vstr	s15, [r2, #4]
 8005042:	00f0      	lsls	r0, r6, #3
 8005044:	b3ee      	cbz	r6, 80050c2 <arm_rfft_fast_f32+0x176>
 8005046:	3808      	subs	r0, #8
 8005048:	f101 0e10 	add.w	lr, r1, #16
 800504c:	4420      	add	r0, r4
 800504e:	f104 0110 	add.w	r1, r4, #16
 8005052:	f102 0c10 	add.w	ip, r2, #16
 8005056:	ed90 7a02 	vldr	s14, [r0, #8]
 800505a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800505e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8005062:	ed90 4a03 	vldr	s8, [r0, #12]
 8005066:	ed11 5a01 	vldr	s10, [r1, #-4]
 800506a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800506e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005072:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005076:	ee26 3a27 	vmul.f32	s6, s12, s15
 800507a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800507e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005082:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005086:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800508a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800508e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005092:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005096:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800509a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800509e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80050a2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80050a6:	3e01      	subs	r6, #1
 80050a8:	ed0c 7a02 	vstr	s14, [ip, #-8]
 80050ac:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80050b0:	f1a0 0008 	sub.w	r0, r0, #8
 80050b4:	f101 0108 	add.w	r1, r1, #8
 80050b8:	f10e 0e08 	add.w	lr, lr, #8
 80050bc:	f10c 0c08 	add.w	ip, ip, #8
 80050c0:	d1c9      	bne.n	8005056 <arm_rfft_fast_f32+0x10a>
 80050c2:	461a      	mov	r2, r3
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	2301      	movs	r3, #1
 80050ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ce:	f000 bb2f 	b.w	8005730 <arm_cfft_f32>
 80050d2:	bf00      	nop

080050d4 <arm_cfft_radix8by2_f32>:
 80050d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d8:	ed2d 8b08 	vpush	{d8-d11}
 80050dc:	4607      	mov	r7, r0
 80050de:	4608      	mov	r0, r1
 80050e0:	f8b7 e000 	ldrh.w	lr, [r7]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80050ea:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80050ee:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80050f2:	f000 80b0 	beq.w	8005256 <arm_cfft_radix8by2_f32+0x182>
 80050f6:	008b      	lsls	r3, r1, #2
 80050f8:	3310      	adds	r3, #16
 80050fa:	18c6      	adds	r6, r0, r3
 80050fc:	3210      	adds	r2, #16
 80050fe:	4443      	add	r3, r8
 8005100:	f100 0510 	add.w	r5, r0, #16
 8005104:	f108 0410 	add.w	r4, r8, #16
 8005108:	ed54 1a04 	vldr	s3, [r4, #-16]
 800510c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005110:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005114:	ed53 3a03 	vldr	s7, [r3, #-12]
 8005118:	ed53 5a02 	vldr	s11, [r3, #-8]
 800511c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005120:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005124:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005128:	ed16 2a04 	vldr	s4, [r6, #-16]
 800512c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005130:	ed15 6a03 	vldr	s12, [r5, #-12]
 8005134:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005138:	ed15 3a04 	vldr	s6, [r5, #-16]
 800513c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005140:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005144:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005148:	ee73 ba21 	vadd.f32	s23, s6, s3
 800514c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005150:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005154:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005158:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800515c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005160:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005164:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005168:	ed45 ba04 	vstr	s23, [r5, #-16]
 800516c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005170:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005174:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005178:	ed06 8a01 	vstr	s16, [r6, #-4]
 800517c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005180:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005184:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005188:	ee76 6a66 	vsub.f32	s13, s12, s13
 800518c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005190:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005194:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005198:	ee33 3a61 	vsub.f32	s6, s6, s3
 800519c:	ee34 4a42 	vsub.f32	s8, s8, s4
 80051a0:	ee26 8a86 	vmul.f32	s16, s13, s12
 80051a4:	ee24 2a06 	vmul.f32	s4, s8, s12
 80051a8:	ee63 1a22 	vmul.f32	s3, s6, s5
 80051ac:	ee24 4a22 	vmul.f32	s8, s8, s5
 80051b0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80051b4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80051b8:	ee23 6a86 	vmul.f32	s12, s7, s12
 80051bc:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80051c0:	ee36 6a04 	vadd.f32	s12, s12, s8
 80051c4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80051c8:	ee72 3a63 	vsub.f32	s7, s4, s7
 80051cc:	ee71 2a88 	vadd.f32	s5, s3, s16
 80051d0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80051d4:	ed44 2a04 	vstr	s5, [r4, #-16]
 80051d8:	ed43 3a04 	vstr	s7, [r3, #-16]
 80051dc:	ed03 6a03 	vstr	s12, [r3, #-12]
 80051e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051e4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80051e8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80051ec:	ed52 5a02 	vldr	s11, [r2, #-8]
 80051f0:	ee35 6a41 	vsub.f32	s12, s10, s2
 80051f4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80051f8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80051fc:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005200:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8005204:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005208:	ee64 4a87 	vmul.f32	s9, s9, s14
 800520c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005210:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005214:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005218:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800521c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005220:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005224:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005228:	f1be 0e01 	subs.w	lr, lr, #1
 800522c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005230:	f105 0510 	add.w	r5, r5, #16
 8005234:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005238:	f106 0610 	add.w	r6, r6, #16
 800523c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005240:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005244:	f102 0210 	add.w	r2, r2, #16
 8005248:	f104 0410 	add.w	r4, r4, #16
 800524c:	f103 0310 	add.w	r3, r3, #16
 8005250:	f47f af5a 	bne.w	8005108 <arm_cfft_radix8by2_f32+0x34>
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	b28c      	uxth	r4, r1
 8005258:	4621      	mov	r1, r4
 800525a:	2302      	movs	r3, #2
 800525c:	f000 fbca 	bl	80059f4 <arm_radix8_butterfly_f32>
 8005260:	ecbd 8b08 	vpop	{d8-d11}
 8005264:	4621      	mov	r1, r4
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4640      	mov	r0, r8
 800526a:	2302      	movs	r3, #2
 800526c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005270:	f000 bbc0 	b.w	80059f4 <arm_radix8_butterfly_f32>

08005274 <arm_cfft_radix8by4_f32>:
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	ed2d 8b0a 	vpush	{d8-d12}
 800527c:	8802      	ldrh	r2, [r0, #0]
 800527e:	ed91 6a00 	vldr	s12, [r1]
 8005282:	b08f      	sub	sp, #60	@ 0x3c
 8005284:	460f      	mov	r7, r1
 8005286:	0852      	lsrs	r2, r2, #1
 8005288:	6841      	ldr	r1, [r0, #4]
 800528a:	900c      	str	r0, [sp, #48]	@ 0x30
 800528c:	0093      	lsls	r3, r2, #2
 800528e:	4638      	mov	r0, r7
 8005290:	4418      	add	r0, r3
 8005292:	4606      	mov	r6, r0
 8005294:	9009      	str	r0, [sp, #36]	@ 0x24
 8005296:	4418      	add	r0, r3
 8005298:	edd0 6a00 	vldr	s13, [r0]
 800529c:	ed96 4a00 	vldr	s8, [r6]
 80052a0:	edd6 2a01 	vldr	s5, [r6, #4]
 80052a4:	edd0 7a01 	vldr	s15, [r0, #4]
 80052a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80052aa:	ee76 5a26 	vadd.f32	s11, s12, s13
 80052ae:	4604      	mov	r4, r0
 80052b0:	4625      	mov	r5, r4
 80052b2:	441c      	add	r4, r3
 80052b4:	edd4 4a00 	vldr	s9, [r4]
 80052b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80052bc:	ed94 3a01 	vldr	s6, [r4, #4]
 80052c0:	9401      	str	r4, [sp, #4]
 80052c2:	ee35 5a84 	vadd.f32	s10, s11, s8
 80052c6:	4630      	mov	r0, r6
 80052c8:	ee35 5a24 	vadd.f32	s10, s10, s9
 80052cc:	463e      	mov	r6, r7
 80052ce:	ee15 ea10 	vmov	lr, s10
 80052d2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80052d6:	f846 eb08 	str.w	lr, [r6], #8
 80052da:	ee37 6a27 	vadd.f32	s12, s14, s15
 80052de:	ed90 5a01 	vldr	s10, [r0, #4]
 80052e2:	9605      	str	r6, [sp, #20]
 80052e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052e8:	9e01      	ldr	r6, [sp, #4]
 80052ea:	9707      	str	r7, [sp, #28]
 80052ec:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80052f0:	ed96 2a01 	vldr	s4, [r6, #4]
 80052f4:	ee36 7a05 	vadd.f32	s14, s12, s10
 80052f8:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80052fc:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8005300:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005304:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8005308:	4604      	mov	r4, r0
 800530a:	46a3      	mov	fp, r4
 800530c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005310:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005314:	ee14 8a10 	vmov	r8, s8
 8005318:	46a4      	mov	ip, r4
 800531a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800531e:	ed87 7a01 	vstr	s14, [r7, #4]
 8005322:	f84b 8b08 	str.w	r8, [fp], #8
 8005326:	f1ac 0704 	sub.w	r7, ip, #4
 800532a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800532e:	f101 0c08 	add.w	ip, r1, #8
 8005332:	462c      	mov	r4, r5
 8005334:	f8cd c010 	str.w	ip, [sp, #16]
 8005338:	ee15 ca90 	vmov	ip, s11
 800533c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005340:	f844 cb08 	str.w	ip, [r4], #8
 8005344:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005348:	ee36 6a43 	vsub.f32	s12, s12, s6
 800534c:	9406      	str	r4, [sp, #24]
 800534e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005352:	f101 0410 	add.w	r4, r1, #16
 8005356:	0852      	lsrs	r2, r2, #1
 8005358:	9402      	str	r4, [sp, #8]
 800535a:	ed85 6a01 	vstr	s12, [r5, #4]
 800535e:	462c      	mov	r4, r5
 8005360:	f101 0518 	add.w	r5, r1, #24
 8005364:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005366:	46b2      	mov	sl, r6
 8005368:	9503      	str	r5, [sp, #12]
 800536a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800536e:	3a02      	subs	r2, #2
 8005370:	ee16 5a90 	vmov	r5, s13
 8005374:	46b6      	mov	lr, r6
 8005376:	4630      	mov	r0, r6
 8005378:	0852      	lsrs	r2, r2, #1
 800537a:	f84a 5b08 	str.w	r5, [sl], #8
 800537e:	f1a0 0604 	sub.w	r6, r0, #4
 8005382:	edce 7a01 	vstr	s15, [lr, #4]
 8005386:	9208      	str	r2, [sp, #32]
 8005388:	f000 8130 	beq.w	80055ec <arm_cfft_radix8by4_f32+0x378>
 800538c:	4691      	mov	r9, r2
 800538e:	9a07      	ldr	r2, [sp, #28]
 8005390:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005394:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8005398:	3b08      	subs	r3, #8
 800539a:	f102 0510 	add.w	r5, r2, #16
 800539e:	f101 0c20 	add.w	ip, r1, #32
 80053a2:	f1a4 020c 	sub.w	r2, r4, #12
 80053a6:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 80053aa:	4433      	add	r3, r6
 80053ac:	3410      	adds	r4, #16
 80053ae:	4650      	mov	r0, sl
 80053b0:	4659      	mov	r1, fp
 80053b2:	ed55 3a02 	vldr	s7, [r5, #-8]
 80053b6:	ed14 5a02 	vldr	s10, [r4, #-8]
 80053ba:	ed91 7a00 	vldr	s14, [r1]
 80053be:	edd0 7a00 	vldr	s15, [r0]
 80053c2:	ed54 5a01 	vldr	s11, [r4, #-4]
 80053c6:	ed15 4a01 	vldr	s8, [r5, #-4]
 80053ca:	edd0 6a01 	vldr	s13, [r0, #4]
 80053ce:	ed91 6a01 	vldr	s12, [r1, #4]
 80053d2:	ee33 8a85 	vadd.f32	s16, s7, s10
 80053d6:	ee34 0a25 	vadd.f32	s0, s8, s11
 80053da:	ee78 4a07 	vadd.f32	s9, s16, s14
 80053de:	ee74 5a65 	vsub.f32	s11, s8, s11
 80053e2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80053e6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80053ea:	ed45 4a02 	vstr	s9, [r5, #-8]
 80053ee:	edd1 4a01 	vldr	s9, [r1, #4]
 80053f2:	ed90 4a01 	vldr	s8, [r0, #4]
 80053f6:	ee70 4a24 	vadd.f32	s9, s0, s9
 80053fa:	ee75 aa06 	vadd.f32	s21, s10, s12
 80053fe:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005402:	ee35 aac7 	vsub.f32	s20, s11, s14
 8005406:	ed45 4a01 	vstr	s9, [r5, #-4]
 800540a:	edd6 1a00 	vldr	s3, [r6]
 800540e:	edd7 0a00 	vldr	s1, [r7]
 8005412:	ed92 4a02 	vldr	s8, [r2, #8]
 8005416:	edd3 3a02 	vldr	s7, [r3, #8]
 800541a:	ed93 2a01 	vldr	s4, [r3, #4]
 800541e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005422:	edd2 2a01 	vldr	s5, [r2, #4]
 8005426:	ed57 9a01 	vldr	s19, [r7, #-4]
 800542a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800542e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8005432:	ee74 8a84 	vadd.f32	s17, s9, s8
 8005436:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800543a:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800543e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005442:	ee18 aa90 	vmov	sl, s17
 8005446:	f847 a908 	str.w	sl, [r7], #-8
 800544a:	edd2 8a01 	vldr	s17, [r2, #4]
 800544e:	ed93 9a01 	vldr	s18, [r3, #4]
 8005452:	ee73 8a28 	vadd.f32	s17, s6, s17
 8005456:	ee3a aa27 	vadd.f32	s20, s20, s15
 800545a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800545e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005462:	edc7 8a01 	vstr	s17, [r7, #4]
 8005466:	ed18 ba02 	vldr	s22, [r8, #-8]
 800546a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800546e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005472:	ee6a ba28 	vmul.f32	s23, s20, s17
 8005476:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800547a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800547e:	ee31 9a20 	vadd.f32	s18, s2, s1
 8005482:	ee79 9a82 	vadd.f32	s19, s19, s4
 8005486:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800548a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800548e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005492:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8005496:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800549a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800549e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80054a2:	ee1c aa10 	vmov	sl, s24
 80054a6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80054aa:	f841 ab08 	str.w	sl, [r1], #8
 80054ae:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80054b2:	ee3b bacb 	vsub.f32	s22, s23, s22
 80054b6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80054ba:	ee33 3a62 	vsub.f32	s6, s6, s5
 80054be:	ed01 aa01 	vstr	s20, [r1, #-4]
 80054c2:	edc2 8a01 	vstr	s17, [r2, #4]
 80054c6:	ed82 ba02 	vstr	s22, [r2, #8]
 80054ca:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80054ce:	ee74 3a63 	vsub.f32	s7, s8, s7
 80054d2:	ee38 8a47 	vsub.f32	s16, s16, s14
 80054d6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80054da:	ee30 0a46 	vsub.f32	s0, s0, s12
 80054de:	ee33 3a42 	vsub.f32	s6, s6, s4
 80054e2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80054e6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80054ea:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80054ee:	ee63 8a04 	vmul.f32	s17, s6, s8
 80054f2:	ee28 aa24 	vmul.f32	s20, s16, s9
 80054f6:	ee60 9a04 	vmul.f32	s19, s0, s8
 80054fa:	ee28 8a04 	vmul.f32	s16, s16, s8
 80054fe:	ee20 0a24 	vmul.f32	s0, s0, s9
 8005502:	ee63 3a84 	vmul.f32	s7, s7, s8
 8005506:	ee39 4a68 	vsub.f32	s8, s18, s17
 800550a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800550e:	ee14 aa10 	vmov	sl, s8
 8005512:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005516:	ee63 4a24 	vmul.f32	s9, s6, s9
 800551a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800551e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005522:	ed04 0a01 	vstr	s0, [r4, #-4]
 8005526:	f846 a908 	str.w	sl, [r6], #-8
 800552a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800552e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8005532:	edc6 3a01 	vstr	s7, [r6, #4]
 8005536:	ee76 6a26 	vadd.f32	s13, s12, s13
 800553a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800553e:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8005542:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8005546:	ee67 5a86 	vmul.f32	s11, s15, s12
 800554a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800554e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005552:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005556:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800555a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800555e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8005562:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800556a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800556e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8005572:	ee21 1a07 	vmul.f32	s2, s2, s14
 8005576:	ee15 aa90 	vmov	sl, s11
 800557a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800557e:	f840 ab08 	str.w	sl, [r0], #8
 8005582:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8005586:	ee76 2a22 	vadd.f32	s5, s12, s5
 800558a:	f1b9 0901 	subs.w	r9, r9, #1
 800558e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005592:	f105 0508 	add.w	r5, r5, #8
 8005596:	ed83 1a02 	vstr	s2, [r3, #8]
 800559a:	edc3 2a01 	vstr	s5, [r3, #4]
 800559e:	f108 0808 	add.w	r8, r8, #8
 80055a2:	f1a2 0208 	sub.w	r2, r2, #8
 80055a6:	f10c 0c10 	add.w	ip, ip, #16
 80055aa:	f104 0408 	add.w	r4, r4, #8
 80055ae:	f10e 0e18 	add.w	lr, lr, #24
 80055b2:	f1a3 0308 	sub.w	r3, r3, #8
 80055b6:	f47f aefc 	bne.w	80053b2 <arm_cfft_radix8by4_f32+0x13e>
 80055ba:	9908      	ldr	r1, [sp, #32]
 80055bc:	9802      	ldr	r0, [sp, #8]
 80055be:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80055c2:	00cb      	lsls	r3, r1, #3
 80055c4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80055c8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80055cc:	9102      	str	r1, [sp, #8]
 80055ce:	9905      	ldr	r1, [sp, #20]
 80055d0:	4419      	add	r1, r3
 80055d2:	9105      	str	r1, [sp, #20]
 80055d4:	9904      	ldr	r1, [sp, #16]
 80055d6:	4419      	add	r1, r3
 80055d8:	9104      	str	r1, [sp, #16]
 80055da:	9906      	ldr	r1, [sp, #24]
 80055dc:	449b      	add	fp, r3
 80055de:	4419      	add	r1, r3
 80055e0:	449a      	add	sl, r3
 80055e2:	9b03      	ldr	r3, [sp, #12]
 80055e4:	9106      	str	r1, [sp, #24]
 80055e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055ea:	9303      	str	r3, [sp, #12]
 80055ec:	9a05      	ldr	r2, [sp, #20]
 80055ee:	9806      	ldr	r0, [sp, #24]
 80055f0:	ed92 4a00 	vldr	s8, [r2]
 80055f4:	ed90 7a00 	vldr	s14, [r0]
 80055f8:	ed9b 3a00 	vldr	s6, [fp]
 80055fc:	edda 3a00 	vldr	s7, [sl]
 8005600:	edd2 4a01 	vldr	s9, [r2, #4]
 8005604:	edd0 6a01 	vldr	s13, [r0, #4]
 8005608:	ed9a 2a01 	vldr	s4, [sl, #4]
 800560c:	eddb 7a01 	vldr	s15, [fp, #4]
 8005610:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8005614:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005616:	ee34 6a07 	vadd.f32	s12, s8, s14
 800561a:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800561e:	ee36 5a03 	vadd.f32	s10, s12, s6
 8005622:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8005626:	ee35 5a23 	vadd.f32	s10, s10, s7
 800562a:	ee34 7a47 	vsub.f32	s14, s8, s14
 800562e:	ed82 5a00 	vstr	s10, [r2]
 8005632:	ed9b 5a01 	vldr	s10, [fp, #4]
 8005636:	edda 4a01 	vldr	s9, [sl, #4]
 800563a:	ee35 5a85 	vadd.f32	s10, s11, s10
 800563e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005642:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005646:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800564a:	ed82 5a01 	vstr	s10, [r2, #4]
 800564e:	9a04      	ldr	r2, [sp, #16]
 8005650:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8005654:	edd2 1a00 	vldr	s3, [r2]
 8005658:	edd2 2a01 	vldr	s5, [r2, #4]
 800565c:	9a02      	ldr	r2, [sp, #8]
 800565e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005662:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005666:	ee64 4a21 	vmul.f32	s9, s8, s3
 800566a:	ee24 4a22 	vmul.f32	s8, s8, s5
 800566e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005672:	ee25 5a21 	vmul.f32	s10, s10, s3
 8005676:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800567a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800567e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005682:	edcb 2a00 	vstr	s5, [fp]
 8005686:	ed8b 5a01 	vstr	s10, [fp, #4]
 800568a:	ed92 4a01 	vldr	s8, [r2, #4]
 800568e:	ed92 5a00 	vldr	s10, [r2]
 8005692:	9a03      	ldr	r2, [sp, #12]
 8005694:	ee36 6a63 	vsub.f32	s12, s12, s7
 8005698:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800569c:	ee66 4a05 	vmul.f32	s9, s12, s10
 80056a0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80056a4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80056a8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80056ac:	ee35 6a46 	vsub.f32	s12, s10, s12
 80056b0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80056b4:	ee76 6a83 	vadd.f32	s13, s13, s6
 80056b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056bc:	ed80 6a01 	vstr	s12, [r0, #4]
 80056c0:	edc0 5a00 	vstr	s11, [r0]
 80056c4:	edd2 5a01 	vldr	s11, [r2, #4]
 80056c8:	9807      	ldr	r0, [sp, #28]
 80056ca:	ee77 7a02 	vadd.f32	s15, s14, s4
 80056ce:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80056d2:	edd2 6a00 	vldr	s13, [r2]
 80056d6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80056da:	ee67 6a26 	vmul.f32	s13, s14, s13
 80056de:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80056e2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80056e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80056ea:	ee36 7a07 	vadd.f32	s14, s12, s14
 80056ee:	edca 7a01 	vstr	s15, [sl, #4]
 80056f2:	ed8a 7a00 	vstr	s14, [sl]
 80056f6:	6872      	ldr	r2, [r6, #4]
 80056f8:	4621      	mov	r1, r4
 80056fa:	2304      	movs	r3, #4
 80056fc:	f000 f97a 	bl	80059f4 <arm_radix8_butterfly_f32>
 8005700:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005702:	6872      	ldr	r2, [r6, #4]
 8005704:	4621      	mov	r1, r4
 8005706:	2304      	movs	r3, #4
 8005708:	f000 f974 	bl	80059f4 <arm_radix8_butterfly_f32>
 800570c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800570e:	6872      	ldr	r2, [r6, #4]
 8005710:	4621      	mov	r1, r4
 8005712:	2304      	movs	r3, #4
 8005714:	f000 f96e 	bl	80059f4 <arm_radix8_butterfly_f32>
 8005718:	6872      	ldr	r2, [r6, #4]
 800571a:	9801      	ldr	r0, [sp, #4]
 800571c:	4621      	mov	r1, r4
 800571e:	2304      	movs	r3, #4
 8005720:	b00f      	add	sp, #60	@ 0x3c
 8005722:	ecbd 8b0a 	vpop	{d8-d12}
 8005726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	f000 b963 	b.w	80059f4 <arm_radix8_butterfly_f32>
 800572e:	bf00      	nop

08005730 <arm_cfft_f32>:
 8005730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005734:	2a01      	cmp	r2, #1
 8005736:	4606      	mov	r6, r0
 8005738:	4617      	mov	r7, r2
 800573a:	460c      	mov	r4, r1
 800573c:	4698      	mov	r8, r3
 800573e:	8805      	ldrh	r5, [r0, #0]
 8005740:	d054      	beq.n	80057ec <arm_cfft_f32+0xbc>
 8005742:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8005746:	d04c      	beq.n	80057e2 <arm_cfft_f32+0xb2>
 8005748:	d916      	bls.n	8005778 <arm_cfft_f32+0x48>
 800574a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800574e:	d01a      	beq.n	8005786 <arm_cfft_f32+0x56>
 8005750:	d95c      	bls.n	800580c <arm_cfft_f32+0xdc>
 8005752:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8005756:	d044      	beq.n	80057e2 <arm_cfft_f32+0xb2>
 8005758:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800575c:	d105      	bne.n	800576a <arm_cfft_f32+0x3a>
 800575e:	2301      	movs	r3, #1
 8005760:	6872      	ldr	r2, [r6, #4]
 8005762:	4629      	mov	r1, r5
 8005764:	4620      	mov	r0, r4
 8005766:	f000 f945 	bl	80059f4 <arm_radix8_butterfly_f32>
 800576a:	f1b8 0f00 	cmp.w	r8, #0
 800576e:	d111      	bne.n	8005794 <arm_cfft_f32+0x64>
 8005770:	2f01      	cmp	r7, #1
 8005772:	d016      	beq.n	80057a2 <arm_cfft_f32+0x72>
 8005774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005778:	2d20      	cmp	r5, #32
 800577a:	d032      	beq.n	80057e2 <arm_cfft_f32+0xb2>
 800577c:	d94a      	bls.n	8005814 <arm_cfft_f32+0xe4>
 800577e:	2d40      	cmp	r5, #64	@ 0x40
 8005780:	d0ed      	beq.n	800575e <arm_cfft_f32+0x2e>
 8005782:	2d80      	cmp	r5, #128	@ 0x80
 8005784:	d1f1      	bne.n	800576a <arm_cfft_f32+0x3a>
 8005786:	4621      	mov	r1, r4
 8005788:	4630      	mov	r0, r6
 800578a:	f7ff fca3 	bl	80050d4 <arm_cfft_radix8by2_f32>
 800578e:	f1b8 0f00 	cmp.w	r8, #0
 8005792:	d0ed      	beq.n	8005770 <arm_cfft_f32+0x40>
 8005794:	68b2      	ldr	r2, [r6, #8]
 8005796:	89b1      	ldrh	r1, [r6, #12]
 8005798:	4620      	mov	r0, r4
 800579a:	f7fa fd21 	bl	80001e0 <arm_bitreversal_32>
 800579e:	2f01      	cmp	r7, #1
 80057a0:	d1e8      	bne.n	8005774 <arm_cfft_f32+0x44>
 80057a2:	ee07 5a90 	vmov	s15, r5
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057b2:	2d00      	cmp	r5, #0
 80057b4:	d0de      	beq.n	8005774 <arm_cfft_f32+0x44>
 80057b6:	f104 0108 	add.w	r1, r4, #8
 80057ba:	2300      	movs	r3, #0
 80057bc:	3301      	adds	r3, #1
 80057be:	429d      	cmp	r5, r3
 80057c0:	f101 0108 	add.w	r1, r1, #8
 80057c4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80057c8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80057cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80057d0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80057d4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80057d8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80057dc:	d1ee      	bne.n	80057bc <arm_cfft_f32+0x8c>
 80057de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e2:	4621      	mov	r1, r4
 80057e4:	4630      	mov	r0, r6
 80057e6:	f7ff fd45 	bl	8005274 <arm_cfft_radix8by4_f32>
 80057ea:	e7be      	b.n	800576a <arm_cfft_f32+0x3a>
 80057ec:	b1ad      	cbz	r5, 800581a <arm_cfft_f32+0xea>
 80057ee:	f101 030c 	add.w	r3, r1, #12
 80057f2:	2200      	movs	r2, #0
 80057f4:	ed53 7a02 	vldr	s15, [r3, #-8]
 80057f8:	3201      	adds	r2, #1
 80057fa:	eef1 7a67 	vneg.f32	s15, s15
 80057fe:	4295      	cmp	r5, r2
 8005800:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005804:	f103 0308 	add.w	r3, r3, #8
 8005808:	d1f4      	bne.n	80057f4 <arm_cfft_f32+0xc4>
 800580a:	e79a      	b.n	8005742 <arm_cfft_f32+0x12>
 800580c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8005810:	d0a5      	beq.n	800575e <arm_cfft_f32+0x2e>
 8005812:	e7aa      	b.n	800576a <arm_cfft_f32+0x3a>
 8005814:	2d10      	cmp	r5, #16
 8005816:	d0b6      	beq.n	8005786 <arm_cfft_f32+0x56>
 8005818:	e7a7      	b.n	800576a <arm_cfft_f32+0x3a>
 800581a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800581e:	d894      	bhi.n	800574a <arm_cfft_f32+0x1a>
 8005820:	e7aa      	b.n	8005778 <arm_cfft_f32+0x48>
 8005822:	bf00      	nop

08005824 <arm_cmplx_mag_f32>:
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800582c:	b084      	sub	sp, #16
 800582e:	d07f      	beq.n	8005930 <arm_cmplx_mag_f32+0x10c>
 8005830:	2700      	movs	r7, #0
 8005832:	f100 0420 	add.w	r4, r0, #32
 8005836:	f101 0510 	add.w	r5, r1, #16
 800583a:	4646      	mov	r6, r8
 800583c:	e05a      	b.n	80058f4 <arm_cmplx_mag_f32+0xd0>
 800583e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005842:	eeb4 0a40 	vcmp.f32	s0, s0
 8005846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584a:	f040 80a4 	bne.w	8005996 <arm_cmplx_mag_f32+0x172>
 800584e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8005852:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8005856:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800585a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800585e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005862:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586e:	f2c0 808f 	blt.w	8005990 <arm_cmplx_mag_f32+0x16c>
 8005872:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005876:	eeb4 0a40 	vcmp.f32	s0, s0
 800587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587e:	f040 80af 	bne.w	80059e0 <arm_cmplx_mag_f32+0x1bc>
 8005882:	ed05 0a03 	vstr	s0, [r5, #-12]
 8005886:	ed54 7a04 	vldr	s15, [r4, #-16]
 800588a:	ed14 0a03 	vldr	s0, [r4, #-12]
 800588e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005892:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005896:	ee77 7a80 	vadd.f32	s15, s15, s0
 800589a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800589e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a2:	db72      	blt.n	800598a <arm_cmplx_mag_f32+0x166>
 80058a4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80058a8:	eeb4 0a40 	vcmp.f32	s0, s0
 80058ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b0:	f040 808c 	bne.w	80059cc <arm_cmplx_mag_f32+0x1a8>
 80058b4:	ed05 0a02 	vstr	s0, [r5, #-8]
 80058b8:	ed54 7a02 	vldr	s15, [r4, #-8]
 80058bc:	ed14 0a01 	vldr	s0, [r4, #-4]
 80058c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80058c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80058c8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80058cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d4:	db20      	blt.n	8005918 <arm_cmplx_mag_f32+0xf4>
 80058d6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80058da:	eeb4 0a40 	vcmp.f32	s0, s0
 80058de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e2:	d169      	bne.n	80059b8 <arm_cmplx_mag_f32+0x194>
 80058e4:	3e01      	subs	r6, #1
 80058e6:	ed05 0a01 	vstr	s0, [r5, #-4]
 80058ea:	f104 0420 	add.w	r4, r4, #32
 80058ee:	f105 0510 	add.w	r5, r5, #16
 80058f2:	d019      	beq.n	8005928 <arm_cmplx_mag_f32+0x104>
 80058f4:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 80058f8:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 80058fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005900:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005904:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800590c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005910:	da95      	bge.n	800583e <arm_cmplx_mag_f32+0x1a>
 8005912:	f845 7c10 	str.w	r7, [r5, #-16]
 8005916:	e79c      	b.n	8005852 <arm_cmplx_mag_f32+0x2e>
 8005918:	3e01      	subs	r6, #1
 800591a:	f845 7c04 	str.w	r7, [r5, #-4]
 800591e:	f104 0420 	add.w	r4, r4, #32
 8005922:	f105 0510 	add.w	r5, r5, #16
 8005926:	d1e5      	bne.n	80058f4 <arm_cmplx_mag_f32+0xd0>
 8005928:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800592c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8005930:	f012 0503 	ands.w	r5, r2, #3
 8005934:	d026      	beq.n	8005984 <arm_cmplx_mag_f32+0x160>
 8005936:	2600      	movs	r6, #0
 8005938:	f100 0408 	add.w	r4, r0, #8
 800593c:	e00c      	b.n	8005958 <arm_cmplx_mag_f32+0x134>
 800593e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005942:	eeb4 0a40 	vcmp.f32	s0, s0
 8005946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594a:	d12e      	bne.n	80059aa <arm_cmplx_mag_f32+0x186>
 800594c:	3d01      	subs	r5, #1
 800594e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005952:	f104 0408 	add.w	r4, r4, #8
 8005956:	d015      	beq.n	8005984 <arm_cmplx_mag_f32+0x160>
 8005958:	ed54 7a02 	vldr	s15, [r4, #-8]
 800595c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005960:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005964:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005968:	3104      	adds	r1, #4
 800596a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800596e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005976:	dae2      	bge.n	800593e <arm_cmplx_mag_f32+0x11a>
 8005978:	3d01      	subs	r5, #1
 800597a:	f841 6c04 	str.w	r6, [r1, #-4]
 800597e:	f104 0408 	add.w	r4, r4, #8
 8005982:	d1e9      	bne.n	8005958 <arm_cmplx_mag_f32+0x134>
 8005984:	b004      	add	sp, #16
 8005986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800598a:	f845 7c08 	str.w	r7, [r5, #-8]
 800598e:	e793      	b.n	80058b8 <arm_cmplx_mag_f32+0x94>
 8005990:	f845 7c0c 	str.w	r7, [r5, #-12]
 8005994:	e777      	b.n	8005886 <arm_cmplx_mag_f32+0x62>
 8005996:	eeb0 0a67 	vmov.f32	s0, s15
 800599a:	9203      	str	r2, [sp, #12]
 800599c:	9102      	str	r1, [sp, #8]
 800599e:	9001      	str	r0, [sp, #4]
 80059a0:	f000 ffba 	bl	8006918 <sqrtf>
 80059a4:	a801      	add	r0, sp, #4
 80059a6:	c807      	ldmia	r0, {r0, r1, r2}
 80059a8:	e751      	b.n	800584e <arm_cmplx_mag_f32+0x2a>
 80059aa:	eeb0 0a67 	vmov.f32	s0, s15
 80059ae:	9101      	str	r1, [sp, #4]
 80059b0:	f000 ffb2 	bl	8006918 <sqrtf>
 80059b4:	9901      	ldr	r1, [sp, #4]
 80059b6:	e7c9      	b.n	800594c <arm_cmplx_mag_f32+0x128>
 80059b8:	eeb0 0a67 	vmov.f32	s0, s15
 80059bc:	9203      	str	r2, [sp, #12]
 80059be:	9102      	str	r1, [sp, #8]
 80059c0:	9001      	str	r0, [sp, #4]
 80059c2:	f000 ffa9 	bl	8006918 <sqrtf>
 80059c6:	a801      	add	r0, sp, #4
 80059c8:	c807      	ldmia	r0, {r0, r1, r2}
 80059ca:	e78b      	b.n	80058e4 <arm_cmplx_mag_f32+0xc0>
 80059cc:	eeb0 0a67 	vmov.f32	s0, s15
 80059d0:	9203      	str	r2, [sp, #12]
 80059d2:	9102      	str	r1, [sp, #8]
 80059d4:	9001      	str	r0, [sp, #4]
 80059d6:	f000 ff9f 	bl	8006918 <sqrtf>
 80059da:	a801      	add	r0, sp, #4
 80059dc:	c807      	ldmia	r0, {r0, r1, r2}
 80059de:	e769      	b.n	80058b4 <arm_cmplx_mag_f32+0x90>
 80059e0:	eeb0 0a67 	vmov.f32	s0, s15
 80059e4:	9203      	str	r2, [sp, #12]
 80059e6:	9102      	str	r1, [sp, #8]
 80059e8:	9001      	str	r0, [sp, #4]
 80059ea:	f000 ff95 	bl	8006918 <sqrtf>
 80059ee:	a801      	add	r0, sp, #4
 80059f0:	c807      	ldmia	r0, {r0, r1, r2}
 80059f2:	e746      	b.n	8005882 <arm_cmplx_mag_f32+0x5e>

080059f4 <arm_radix8_butterfly_f32>:
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	ed2d 8b10 	vpush	{d8-d15}
 80059fc:	461c      	mov	r4, r3
 80059fe:	b09d      	sub	sp, #116	@ 0x74
 8005a00:	4603      	mov	r3, r0
 8005a02:	3304      	adds	r3, #4
 8005a04:	ed9f bac4 	vldr	s22, [pc, #784]	@ 8005d18 <arm_radix8_butterfly_f32+0x324>
 8005a08:	9019      	str	r0, [sp, #100]	@ 0x64
 8005a0a:	921a      	str	r2, [sp, #104]	@ 0x68
 8005a0c:	468b      	mov	fp, r1
 8005a0e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005a10:	468a      	mov	sl, r1
 8005a12:	46a1      	mov	r9, r4
 8005a14:	4607      	mov	r7, r0
 8005a16:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8005a1a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005a1e:	eb03 0508 	add.w	r5, r3, r8
 8005a22:	195c      	adds	r4, r3, r5
 8005a24:	00de      	lsls	r6, r3, #3
 8005a26:	191a      	adds	r2, r3, r4
 8005a28:	9600      	str	r6, [sp, #0]
 8005a2a:	1898      	adds	r0, r3, r2
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	9e00      	ldr	r6, [sp, #0]
 8005a30:	9311      	str	r3, [sp, #68]	@ 0x44
 8005a32:	4401      	add	r1, r0
 8005a34:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8005a38:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8005a3c:	19be      	adds	r6, r7, r6
 8005a3e:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8005a42:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8005a46:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8005a4a:	9f00      	ldr	r7, [sp, #0]
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	eb06 0e07 	add.w	lr, r6, r7
 8005a52:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8005a54:	9302      	str	r3, [sp, #8]
 8005a56:	3204      	adds	r2, #4
 8005a58:	3104      	adds	r1, #4
 8005a5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a5e:	f04f 0c00 	mov.w	ip, #0
 8005a62:	edde 7a00 	vldr	s15, [lr]
 8005a66:	edd6 6a00 	vldr	s13, [r6]
 8005a6a:	ed95 2a00 	vldr	s4, [r5]
 8005a6e:	ed17 aa01 	vldr	s20, [r7, #-4]
 8005a72:	edd4 4a00 	vldr	s9, [r4]
 8005a76:	ed90 5a00 	vldr	s10, [r0]
 8005a7a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005a7e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005a82:	ee77 8a85 	vadd.f32	s17, s15, s10
 8005a86:	ee76 3a87 	vadd.f32	s7, s13, s14
 8005a8a:	ee32 4a20 	vadd.f32	s8, s4, s1
 8005a8e:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8005a92:	ee33 6a84 	vadd.f32	s12, s7, s8
 8005a96:	ee73 5a28 	vadd.f32	s11, s6, s17
 8005a9a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005a9e:	ee75 6a86 	vadd.f32	s13, s11, s12
 8005aa2:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8005aa6:	ed47 6a01 	vstr	s13, [r7, #-4]
 8005aaa:	edc4 5a00 	vstr	s11, [r4]
 8005aae:	ed92 9a00 	vldr	s18, [r2]
 8005ab2:	ed95 1a01 	vldr	s2, [r5, #4]
 8005ab6:	edd6 5a01 	vldr	s11, [r6, #4]
 8005aba:	ed91 6a00 	vldr	s12, [r1]
 8005abe:	edd7 2a00 	vldr	s5, [r7]
 8005ac2:	edd4 1a01 	vldr	s3, [r4, #4]
 8005ac6:	edde 6a01 	vldr	s13, [lr, #4]
 8005aca:	edd0 9a01 	vldr	s19, [r0, #4]
 8005ace:	ee72 0a60 	vsub.f32	s1, s4, s1
 8005ad2:	ee71 aa46 	vsub.f32	s21, s2, s12
 8005ad6:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8005ada:	ee37 0a60 	vsub.f32	s0, s14, s1
 8005ade:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8005ae2:	ee37 7a20 	vadd.f32	s14, s14, s1
 8005ae6:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8005aea:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8005aee:	ee75 5a89 	vadd.f32	s11, s11, s18
 8005af2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8005af6:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8005afa:	ee31 6a06 	vadd.f32	s12, s2, s12
 8005afe:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8005b02:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8005b06:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8005b0a:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8005b0e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8005b12:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8005b16:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8005b1a:	ee33 3a68 	vsub.f32	s6, s6, s17
 8005b1e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8005b22:	ee75 8a86 	vadd.f32	s17, s11, s12
 8005b26:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8005b2a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8005b2e:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8005b32:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8005b36:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005b3a:	ee75 4a27 	vadd.f32	s9, s10, s15
 8005b3e:	ee71 5a49 	vsub.f32	s11, s2, s18
 8005b42:	ee31 2a09 	vadd.f32	s4, s2, s18
 8005b46:	ee75 7a67 	vsub.f32	s15, s10, s15
 8005b4a:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8005b4e:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8005b52:	ee73 0a06 	vadd.f32	s1, s6, s12
 8005b56:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8005b5a:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005b5e:	ee32 8a28 	vadd.f32	s16, s4, s17
 8005b62:	ee33 6a46 	vsub.f32	s12, s6, s12
 8005b66:	ee34 4a25 	vadd.f32	s8, s8, s11
 8005b6a:	ee33 3a80 	vadd.f32	s6, s7, s0
 8005b6e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005b72:	ee71 5a64 	vsub.f32	s11, s2, s9
 8005b76:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8005b7a:	ee32 2a68 	vsub.f32	s4, s4, s17
 8005b7e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005b82:	ee74 4a81 	vadd.f32	s9, s9, s2
 8005b86:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8005b8a:	44dc      	add	ip, fp
 8005b8c:	45e2      	cmp	sl, ip
 8005b8e:	ed87 8a00 	vstr	s16, [r7]
 8005b92:	ed84 2a01 	vstr	s4, [r4, #4]
 8005b96:	441f      	add	r7, r3
 8005b98:	edce 0a00 	vstr	s1, [lr]
 8005b9c:	441c      	add	r4, r3
 8005b9e:	ed80 6a00 	vstr	s12, [r0]
 8005ba2:	edce 1a01 	vstr	s3, [lr, #4]
 8005ba6:	ed80 4a01 	vstr	s8, [r0, #4]
 8005baa:	449e      	add	lr, r3
 8005bac:	ed86 3a00 	vstr	s6, [r6]
 8005bb0:	4418      	add	r0, r3
 8005bb2:	ed41 3a01 	vstr	s7, [r1, #-4]
 8005bb6:	ed02 5a01 	vstr	s10, [r2, #-4]
 8005bba:	ed85 7a00 	vstr	s14, [r5]
 8005bbe:	edc6 5a01 	vstr	s11, [r6, #4]
 8005bc2:	edc1 4a00 	vstr	s9, [r1]
 8005bc6:	441e      	add	r6, r3
 8005bc8:	edc2 6a00 	vstr	s13, [r2]
 8005bcc:	4419      	add	r1, r3
 8005bce:	edc5 7a01 	vstr	s15, [r5, #4]
 8005bd2:	441a      	add	r2, r3
 8005bd4:	441d      	add	r5, r3
 8005bd6:	f63f af44 	bhi.w	8005a62 <arm_radix8_butterfly_f32+0x6e>
 8005bda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005bdc:	2a07      	cmp	r2, #7
 8005bde:	f240 81f5 	bls.w	8005fcc <arm_radix8_butterfly_f32+0x5d8>
 8005be2:	f108 0101 	add.w	r1, r8, #1
 8005be6:	188f      	adds	r7, r1, r2
 8005be8:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8005bec:	19d6      	adds	r6, r2, r7
 8005bee:	eb08 0c09 	add.w	ip, r8, r9
 8005bf2:	1994      	adds	r4, r2, r6
 8005bf4:	eb0c 0e09 	add.w	lr, ip, r9
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	9701      	str	r7, [sp, #4]
 8005bfc:	4420      	add	r0, r4
 8005bfe:	eb0e 0709 	add.w	r7, lr, r9
 8005c02:	1815      	adds	r5, r2, r0
 8005c04:	eb07 0209 	add.w	r2, r7, r9
 8005c08:	9203      	str	r2, [sp, #12]
 8005c0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005c0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c10:	9117      	str	r1, [sp, #92]	@ 0x5c
 8005c12:	440a      	add	r2, r1
 8005c14:	9900      	ldr	r1, [sp, #0]
 8005c16:	3108      	adds	r1, #8
 8005c18:	9100      	str	r1, [sp, #0]
 8005c1a:	9902      	ldr	r1, [sp, #8]
 8005c1c:	3108      	adds	r1, #8
 8005c1e:	9102      	str	r1, [sp, #8]
 8005c20:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8005c22:	00ff      	lsls	r7, r7, #3
 8005c24:	9715      	str	r7, [sp, #84]	@ 0x54
 8005c26:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005c2a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005c2e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8005c32:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8005c34:	9903      	ldr	r1, [sp, #12]
 8005c36:	19d7      	adds	r7, r2, r7
 8005c38:	00c9      	lsls	r1, r1, #3
 8005c3a:	9114      	str	r1, [sp, #80]	@ 0x50
 8005c3c:	9710      	str	r7, [sp, #64]	@ 0x40
 8005c3e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8005c40:	9f00      	ldr	r7, [sp, #0]
 8005c42:	19cf      	adds	r7, r1, r7
 8005c44:	970d      	str	r7, [sp, #52]	@ 0x34
 8005c46:	9f02      	ldr	r7, [sp, #8]
 8005c48:	19cf      	adds	r7, r1, r7
 8005c4a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8005c4e:	970c      	str	r7, [sp, #48]	@ 0x30
 8005c50:	9f01      	ldr	r7, [sp, #4]
 8005c52:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 8005c56:	3504      	adds	r5, #4
 8005c58:	3004      	adds	r0, #4
 8005c5a:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8005c5e:	9508      	str	r5, [sp, #32]
 8005c60:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c62:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8005c64:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8005c66:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 8005c6a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005c6e:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8005c72:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005c74:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 8005c78:	1945      	adds	r5, r0, r5
 8005c7a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005c7e:	460f      	mov	r7, r1
 8005c80:	3404      	adds	r4, #4
 8005c82:	4641      	mov	r1, r8
 8005c84:	1841      	adds	r1, r0, r1
 8005c86:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 8005c8a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005c8c:	eb00 0c06 	add.w	ip, r0, r6
 8005c90:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 8005c94:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005c96:	9506      	str	r5, [sp, #24]
 8005c98:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8005c9a:	9105      	str	r1, [sp, #20]
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	1905      	adds	r5, r0, r4
 8005ca0:	3108      	adds	r1, #8
 8005ca2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8005ca4:	9507      	str	r5, [sp, #28]
 8005ca6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8005ca8:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8005cac:	2101      	movs	r1, #1
 8005cae:	eb00 0e06 	add.w	lr, r0, r6
 8005cb2:	9518      	str	r5, [sp, #96]	@ 0x60
 8005cb4:	9404      	str	r4, [sp, #16]
 8005cb6:	9103      	str	r1, [sp, #12]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4689      	mov	r9, r1
 8005cbc:	9e06      	ldr	r6, [sp, #24]
 8005cbe:	ed90 fa00 	vldr	s30, [r0]
 8005cc2:	edd6 7a01 	vldr	s15, [r6, #4]
 8005cc6:	edd0 ba01 	vldr	s23, [r0, #4]
 8005cca:	edcd 7a00 	vstr	s15, [sp]
 8005cce:	a80d      	add	r0, sp, #52	@ 0x34
 8005cd0:	edde 7a01 	vldr	s15, [lr, #4]
 8005cd4:	9c05      	ldr	r4, [sp, #20]
 8005cd6:	9d07      	ldr	r5, [sp, #28]
 8005cd8:	edd2 fa00 	vldr	s31, [r2]
 8005cdc:	ed92 ca01 	vldr	s24, [r2, #4]
 8005ce0:	edcd 7a01 	vstr	s15, [sp, #4]
 8005ce4:	c807      	ldmia	r0, {r0, r1, r2}
 8005ce6:	eddc 7a01 	vldr	s15, [ip, #4]
 8005cea:	edd4 ea00 	vldr	s29, [r4]
 8005cee:	ed95 ea00 	vldr	s28, [r5]
 8005cf2:	edd6 da00 	vldr	s27, [r6]
 8005cf6:	edd4 aa01 	vldr	s21, [r4, #4]
 8005cfa:	ed95 aa01 	vldr	s20, [r5, #4]
 8005cfe:	ed9e da00 	vldr	s26, [lr]
 8005d02:	eddc ca00 	vldr	s25, [ip]
 8005d06:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d0a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8005d0c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005d0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005d10:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005d12:	edcd 7a02 	vstr	s15, [sp, #8]
 8005d16:	e001      	b.n	8005d1c <arm_radix8_butterfly_f32+0x328>
 8005d18:	3f3504f3 	.word	0x3f3504f3
 8005d1c:	ed16 6a01 	vldr	s12, [r6, #-4]
 8005d20:	ed91 5a00 	vldr	s10, [r1]
 8005d24:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005d28:	edd5 7a00 	vldr	s15, [r5]
 8005d2c:	ed18 7a01 	vldr	s14, [r8, #-4]
 8005d30:	edd2 3a00 	vldr	s7, [r2]
 8005d34:	ed94 3a00 	vldr	s6, [r4]
 8005d38:	ed90 2a00 	vldr	s4, [r0]
 8005d3c:	ed92 0a01 	vldr	s0, [r2, #4]
 8005d40:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005d44:	ee32 1a06 	vadd.f32	s2, s4, s12
 8005d48:	ee33 4a29 	vadd.f32	s8, s6, s19
 8005d4c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005d50:	ee78 1a04 	vadd.f32	s3, s16, s8
 8005d54:	ee71 6a24 	vadd.f32	s13, s2, s9
 8005d58:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005d5c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d64:	ed82 6a00 	vstr	s12, [r2]
 8005d68:	edd5 8a01 	vldr	s17, [r5, #4]
 8005d6c:	ed90 9a01 	vldr	s18, [r0, #4]
 8005d70:	edd6 2a00 	vldr	s5, [r6]
 8005d74:	ed98 7a00 	vldr	s14, [r8]
 8005d78:	edd4 0a01 	vldr	s1, [r4, #4]
 8005d7c:	ed91 6a01 	vldr	s12, [r1, #4]
 8005d80:	edd7 5a00 	vldr	s11, [r7]
 8005d84:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8005d88:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005d8c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005d90:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8005d94:	ee38 4a44 	vsub.f32	s8, s16, s8
 8005d98:	ee38 7a87 	vadd.f32	s14, s17, s14
 8005d9c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8005da0:	ee79 2a22 	vadd.f32	s5, s18, s5
 8005da4:	ee75 8a69 	vsub.f32	s17, s10, s19
 8005da8:	ee32 9a27 	vadd.f32	s18, s4, s15
 8005dac:	ee35 5a29 	vadd.f32	s10, s10, s19
 8005db0:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005db4:	ee30 2a06 	vadd.f32	s4, s0, s12
 8005db8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8005dbc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005dc0:	ee32 9a08 	vadd.f32	s18, s4, s16
 8005dc4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8005dc8:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005dcc:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005dd0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8005dd4:	ee32 1a87 	vadd.f32	s2, s5, s14
 8005dd8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005ddc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8005de0:	ee30 6a46 	vsub.f32	s12, s0, s12
 8005de4:	ee73 0a29 	vadd.f32	s1, s6, s19
 8005de8:	ee36 0a28 	vadd.f32	s0, s12, s17
 8005dec:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005df0:	ee32 7a64 	vsub.f32	s14, s4, s9
 8005df4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8005df8:	ee36 6a68 	vsub.f32	s12, s12, s17
 8005dfc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8005e00:	ee75 8a85 	vadd.f32	s17, s11, s10
 8005e04:	ee74 3a22 	vadd.f32	s7, s8, s5
 8005e08:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8005e0c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8005e10:	ee79 1a41 	vsub.f32	s3, s18, s2
 8005e14:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8005e18:	ee76 5a43 	vsub.f32	s11, s12, s6
 8005e1c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8005e20:	ee74 4a82 	vadd.f32	s9, s9, s4
 8005e24:	ee30 4a60 	vsub.f32	s8, s0, s1
 8005e28:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8005e2c:	ee30 0a80 	vadd.f32	s0, s1, s0
 8005e30:	ee77 9a85 	vadd.f32	s19, s15, s10
 8005e34:	ee33 6a06 	vadd.f32	s12, s6, s12
 8005e38:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005e3c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005e40:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8005e44:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8005e48:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005e4c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005e50:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8005e54:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8005e58:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005e5c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005e60:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8005e64:	ee35 3a03 	vadd.f32	s6, s10, s6
 8005e68:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005e6c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8005e70:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8005e74:	ed9d 4a02 	vldr	s8, [sp, #8]
 8005e78:	ed82 1a01 	vstr	s2, [r2, #4]
 8005e7c:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005e80:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005e84:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005e88:	ed81 3a00 	vstr	s6, [r1]
 8005e8c:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005e90:	ee32 2a05 	vadd.f32	s4, s4, s10
 8005e94:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8005e98:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005e9c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005ea0:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005ea4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005ea8:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005eac:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005eb0:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005eb4:	ed9d 4a00 	vldr	s8, [sp]
 8005eb8:	edc1 6a01 	vstr	s13, [r1, #4]
 8005ebc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005ec0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005ec4:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005ec8:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005ecc:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005ed0:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005ed4:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8005ed8:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8005edc:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8005ee0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8005ee4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005ee8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005eec:	ee75 1a21 	vadd.f32	s3, s10, s3
 8005ef0:	ee30 0a68 	vsub.f32	s0, s0, s17
 8005ef4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8005ef8:	ee70 0a84 	vadd.f32	s1, s1, s8
 8005efc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f00:	44d9      	add	r9, fp
 8005f02:	45ca      	cmp	sl, r9
 8005f04:	ed84 9a00 	vstr	s18, [r4]
 8005f08:	edc4 3a01 	vstr	s7, [r4, #4]
 8005f0c:	441a      	add	r2, r3
 8005f0e:	ed07 7a01 	vstr	s14, [r7, #-4]
 8005f12:	edc7 2a00 	vstr	s5, [r7]
 8005f16:	4419      	add	r1, r3
 8005f18:	ed80 2a00 	vstr	s4, [r0]
 8005f1c:	ed80 8a01 	vstr	s16, [r0, #4]
 8005f20:	441c      	add	r4, r3
 8005f22:	ed48 1a01 	vstr	s3, [r8, #-4]
 8005f26:	ed88 0a00 	vstr	s0, [r8]
 8005f2a:	441f      	add	r7, r3
 8005f2c:	ed46 4a01 	vstr	s9, [r6, #-4]
 8005f30:	4418      	add	r0, r3
 8005f32:	edc6 9a00 	vstr	s19, [r6]
 8005f36:	4498      	add	r8, r3
 8005f38:	edc5 0a00 	vstr	s1, [r5]
 8005f3c:	ed85 6a01 	vstr	s12, [r5, #4]
 8005f40:	441e      	add	r6, r3
 8005f42:	441d      	add	r5, r3
 8005f44:	f63f aeea 	bhi.w	8005d1c <arm_radix8_butterfly_f32+0x328>
 8005f48:	9a03      	ldr	r2, [sp, #12]
 8005f4a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005f4c:	3201      	adds	r2, #1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	9203      	str	r2, [sp, #12]
 8005f52:	9a04      	ldr	r2, [sp, #16]
 8005f54:	4402      	add	r2, r0
 8005f56:	9204      	str	r2, [sp, #16]
 8005f58:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8005f5a:	9a05      	ldr	r2, [sp, #20]
 8005f5c:	4402      	add	r2, r0
 8005f5e:	9205      	str	r2, [sp, #20]
 8005f60:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005f62:	9a07      	ldr	r2, [sp, #28]
 8005f64:	4402      	add	r2, r0
 8005f66:	9207      	str	r2, [sp, #28]
 8005f68:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005f6a:	9a06      	ldr	r2, [sp, #24]
 8005f6c:	4402      	add	r2, r0
 8005f6e:	9206      	str	r2, [sp, #24]
 8005f70:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005f72:	4496      	add	lr, r2
 8005f74:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005f76:	4494      	add	ip, r2
 8005f78:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005f7a:	3208      	adds	r2, #8
 8005f7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005f7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f80:	3208      	adds	r2, #8
 8005f82:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f86:	3208      	adds	r2, #8
 8005f88:	920d      	str	r2, [sp, #52]	@ 0x34
 8005f8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f8c:	3208      	adds	r2, #8
 8005f8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005f90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005f92:	3208      	adds	r2, #8
 8005f94:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005f96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f98:	3208      	adds	r2, #8
 8005f9a:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f9e:	3208      	adds	r2, #8
 8005fa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fa2:	9a08      	ldr	r2, [sp, #32]
 8005fa4:	3208      	adds	r2, #8
 8005fa6:	9208      	str	r2, [sp, #32]
 8005fa8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8005faa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8005fac:	4288      	cmp	r0, r1
 8005fae:	4622      	mov	r2, r4
 8005fb0:	d007      	beq.n	8005fc2 <arm_radix8_butterfly_f32+0x5ce>
 8005fb2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005fb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4401      	add	r1, r0
 8005fbc:	9110      	str	r1, [sp, #64]	@ 0x40
 8005fbe:	9804      	ldr	r0, [sp, #16]
 8005fc0:	e67c      	b.n	8005cbc <arm_radix8_butterfly_f32+0x2c8>
 8005fc2:	4683      	mov	fp, r0
 8005fc4:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 8005fc8:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8005fca:	e524      	b.n	8005a16 <arm_radix8_butterfly_f32+0x22>
 8005fcc:	b01d      	add	sp, #116	@ 0x74
 8005fce:	ecbd 8b10 	vpop	{d8-d15}
 8005fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd6:	bf00      	nop

08005fd8 <siprintf>:
 8005fd8:	b40e      	push	{r1, r2, r3}
 8005fda:	b500      	push	{lr}
 8005fdc:	b09c      	sub	sp, #112	@ 0x70
 8005fde:	ab1d      	add	r3, sp, #116	@ 0x74
 8005fe0:	9002      	str	r0, [sp, #8]
 8005fe2:	9006      	str	r0, [sp, #24]
 8005fe4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005fe8:	4809      	ldr	r0, [pc, #36]	@ (8006010 <siprintf+0x38>)
 8005fea:	9107      	str	r1, [sp, #28]
 8005fec:	9104      	str	r1, [sp, #16]
 8005fee:	4909      	ldr	r1, [pc, #36]	@ (8006014 <siprintf+0x3c>)
 8005ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff4:	9105      	str	r1, [sp, #20]
 8005ff6:	6800      	ldr	r0, [r0, #0]
 8005ff8:	9301      	str	r3, [sp, #4]
 8005ffa:	a902      	add	r1, sp, #8
 8005ffc:	f000 f8aa 	bl	8006154 <_svfiprintf_r>
 8006000:	9b02      	ldr	r3, [sp, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	b01c      	add	sp, #112	@ 0x70
 8006008:	f85d eb04 	ldr.w	lr, [sp], #4
 800600c:	b003      	add	sp, #12
 800600e:	4770      	bx	lr
 8006010:	20000018 	.word	0x20000018
 8006014:	ffff0208 	.word	0xffff0208

08006018 <memset>:
 8006018:	4402      	add	r2, r0
 800601a:	4603      	mov	r3, r0
 800601c:	4293      	cmp	r3, r2
 800601e:	d100      	bne.n	8006022 <memset+0xa>
 8006020:	4770      	bx	lr
 8006022:	f803 1b01 	strb.w	r1, [r3], #1
 8006026:	e7f9      	b.n	800601c <memset+0x4>

08006028 <__errno>:
 8006028:	4b01      	ldr	r3, [pc, #4]	@ (8006030 <__errno+0x8>)
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	20000018 	.word	0x20000018

08006034 <__libc_init_array>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4d0d      	ldr	r5, [pc, #52]	@ (800606c <__libc_init_array+0x38>)
 8006038:	4c0d      	ldr	r4, [pc, #52]	@ (8006070 <__libc_init_array+0x3c>)
 800603a:	1b64      	subs	r4, r4, r5
 800603c:	10a4      	asrs	r4, r4, #2
 800603e:	2600      	movs	r6, #0
 8006040:	42a6      	cmp	r6, r4
 8006042:	d109      	bne.n	8006058 <__libc_init_array+0x24>
 8006044:	4d0b      	ldr	r5, [pc, #44]	@ (8006074 <__libc_init_array+0x40>)
 8006046:	4c0c      	ldr	r4, [pc, #48]	@ (8006078 <__libc_init_array+0x44>)
 8006048:	f000 fc88 	bl	800695c <_init>
 800604c:	1b64      	subs	r4, r4, r5
 800604e:	10a4      	asrs	r4, r4, #2
 8006050:	2600      	movs	r6, #0
 8006052:	42a6      	cmp	r6, r4
 8006054:	d105      	bne.n	8006062 <__libc_init_array+0x2e>
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	f855 3b04 	ldr.w	r3, [r5], #4
 800605c:	4798      	blx	r3
 800605e:	3601      	adds	r6, #1
 8006060:	e7ee      	b.n	8006040 <__libc_init_array+0xc>
 8006062:	f855 3b04 	ldr.w	r3, [r5], #4
 8006066:	4798      	blx	r3
 8006068:	3601      	adds	r6, #1
 800606a:	e7f2      	b.n	8006052 <__libc_init_array+0x1e>
 800606c:	0801a420 	.word	0x0801a420
 8006070:	0801a420 	.word	0x0801a420
 8006074:	0801a420 	.word	0x0801a420
 8006078:	0801a424 	.word	0x0801a424

0800607c <__retarget_lock_acquire_recursive>:
 800607c:	4770      	bx	lr

0800607e <__retarget_lock_release_recursive>:
 800607e:	4770      	bx	lr

08006080 <memcpy>:
 8006080:	440a      	add	r2, r1
 8006082:	4291      	cmp	r1, r2
 8006084:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006088:	d100      	bne.n	800608c <memcpy+0xc>
 800608a:	4770      	bx	lr
 800608c:	b510      	push	{r4, lr}
 800608e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006096:	4291      	cmp	r1, r2
 8006098:	d1f9      	bne.n	800608e <memcpy+0xe>
 800609a:	bd10      	pop	{r4, pc}

0800609c <__ssputs_r>:
 800609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	688e      	ldr	r6, [r1, #8]
 80060a2:	461f      	mov	r7, r3
 80060a4:	42be      	cmp	r6, r7
 80060a6:	680b      	ldr	r3, [r1, #0]
 80060a8:	4682      	mov	sl, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	4690      	mov	r8, r2
 80060ae:	d82d      	bhi.n	800610c <__ssputs_r+0x70>
 80060b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060b8:	d026      	beq.n	8006108 <__ssputs_r+0x6c>
 80060ba:	6965      	ldr	r5, [r4, #20]
 80060bc:	6909      	ldr	r1, [r1, #16]
 80060be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060c2:	eba3 0901 	sub.w	r9, r3, r1
 80060c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060ca:	1c7b      	adds	r3, r7, #1
 80060cc:	444b      	add	r3, r9
 80060ce:	106d      	asrs	r5, r5, #1
 80060d0:	429d      	cmp	r5, r3
 80060d2:	bf38      	it	cc
 80060d4:	461d      	movcc	r5, r3
 80060d6:	0553      	lsls	r3, r2, #21
 80060d8:	d527      	bpl.n	800612a <__ssputs_r+0x8e>
 80060da:	4629      	mov	r1, r5
 80060dc:	f000 f958 	bl	8006390 <_malloc_r>
 80060e0:	4606      	mov	r6, r0
 80060e2:	b360      	cbz	r0, 800613e <__ssputs_r+0xa2>
 80060e4:	6921      	ldr	r1, [r4, #16]
 80060e6:	464a      	mov	r2, r9
 80060e8:	f7ff ffca 	bl	8006080 <memcpy>
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	6126      	str	r6, [r4, #16]
 80060fa:	6165      	str	r5, [r4, #20]
 80060fc:	444e      	add	r6, r9
 80060fe:	eba5 0509 	sub.w	r5, r5, r9
 8006102:	6026      	str	r6, [r4, #0]
 8006104:	60a5      	str	r5, [r4, #8]
 8006106:	463e      	mov	r6, r7
 8006108:	42be      	cmp	r6, r7
 800610a:	d900      	bls.n	800610e <__ssputs_r+0x72>
 800610c:	463e      	mov	r6, r7
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	4632      	mov	r2, r6
 8006112:	4641      	mov	r1, r8
 8006114:	f000 fb84 	bl	8006820 <memmove>
 8006118:	68a3      	ldr	r3, [r4, #8]
 800611a:	1b9b      	subs	r3, r3, r6
 800611c:	60a3      	str	r3, [r4, #8]
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	4433      	add	r3, r6
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	2000      	movs	r0, #0
 8006126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612a:	462a      	mov	r2, r5
 800612c:	f000 fb4a 	bl	80067c4 <_realloc_r>
 8006130:	4606      	mov	r6, r0
 8006132:	2800      	cmp	r0, #0
 8006134:	d1e0      	bne.n	80060f8 <__ssputs_r+0x5c>
 8006136:	6921      	ldr	r1, [r4, #16]
 8006138:	4650      	mov	r0, sl
 800613a:	f000 fb9b 	bl	8006874 <_free_r>
 800613e:	230c      	movs	r3, #12
 8006140:	f8ca 3000 	str.w	r3, [sl]
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800614a:	81a3      	strh	r3, [r4, #12]
 800614c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006150:	e7e9      	b.n	8006126 <__ssputs_r+0x8a>
	...

08006154 <_svfiprintf_r>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	4698      	mov	r8, r3
 800615a:	898b      	ldrh	r3, [r1, #12]
 800615c:	061b      	lsls	r3, r3, #24
 800615e:	b09d      	sub	sp, #116	@ 0x74
 8006160:	4607      	mov	r7, r0
 8006162:	460d      	mov	r5, r1
 8006164:	4614      	mov	r4, r2
 8006166:	d510      	bpl.n	800618a <_svfiprintf_r+0x36>
 8006168:	690b      	ldr	r3, [r1, #16]
 800616a:	b973      	cbnz	r3, 800618a <_svfiprintf_r+0x36>
 800616c:	2140      	movs	r1, #64	@ 0x40
 800616e:	f000 f90f 	bl	8006390 <_malloc_r>
 8006172:	6028      	str	r0, [r5, #0]
 8006174:	6128      	str	r0, [r5, #16]
 8006176:	b930      	cbnz	r0, 8006186 <_svfiprintf_r+0x32>
 8006178:	230c      	movs	r3, #12
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006180:	b01d      	add	sp, #116	@ 0x74
 8006182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006186:	2340      	movs	r3, #64	@ 0x40
 8006188:	616b      	str	r3, [r5, #20]
 800618a:	2300      	movs	r3, #0
 800618c:	9309      	str	r3, [sp, #36]	@ 0x24
 800618e:	2320      	movs	r3, #32
 8006190:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006194:	f8cd 800c 	str.w	r8, [sp, #12]
 8006198:	2330      	movs	r3, #48	@ 0x30
 800619a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006338 <_svfiprintf_r+0x1e4>
 800619e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061a2:	f04f 0901 	mov.w	r9, #1
 80061a6:	4623      	mov	r3, r4
 80061a8:	469a      	mov	sl, r3
 80061aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ae:	b10a      	cbz	r2, 80061b4 <_svfiprintf_r+0x60>
 80061b0:	2a25      	cmp	r2, #37	@ 0x25
 80061b2:	d1f9      	bne.n	80061a8 <_svfiprintf_r+0x54>
 80061b4:	ebba 0b04 	subs.w	fp, sl, r4
 80061b8:	d00b      	beq.n	80061d2 <_svfiprintf_r+0x7e>
 80061ba:	465b      	mov	r3, fp
 80061bc:	4622      	mov	r2, r4
 80061be:	4629      	mov	r1, r5
 80061c0:	4638      	mov	r0, r7
 80061c2:	f7ff ff6b 	bl	800609c <__ssputs_r>
 80061c6:	3001      	adds	r0, #1
 80061c8:	f000 80a7 	beq.w	800631a <_svfiprintf_r+0x1c6>
 80061cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061ce:	445a      	add	r2, fp
 80061d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80061d2:	f89a 3000 	ldrb.w	r3, [sl]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 809f 	beq.w	800631a <_svfiprintf_r+0x1c6>
 80061dc:	2300      	movs	r3, #0
 80061de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e6:	f10a 0a01 	add.w	sl, sl, #1
 80061ea:	9304      	str	r3, [sp, #16]
 80061ec:	9307      	str	r3, [sp, #28]
 80061ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80061f4:	4654      	mov	r4, sl
 80061f6:	2205      	movs	r2, #5
 80061f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061fc:	484e      	ldr	r0, [pc, #312]	@ (8006338 <_svfiprintf_r+0x1e4>)
 80061fe:	f7fa f84f 	bl	80002a0 <memchr>
 8006202:	9a04      	ldr	r2, [sp, #16]
 8006204:	b9d8      	cbnz	r0, 800623e <_svfiprintf_r+0xea>
 8006206:	06d0      	lsls	r0, r2, #27
 8006208:	bf44      	itt	mi
 800620a:	2320      	movmi	r3, #32
 800620c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006210:	0711      	lsls	r1, r2, #28
 8006212:	bf44      	itt	mi
 8006214:	232b      	movmi	r3, #43	@ 0x2b
 8006216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800621a:	f89a 3000 	ldrb.w	r3, [sl]
 800621e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006220:	d015      	beq.n	800624e <_svfiprintf_r+0xfa>
 8006222:	9a07      	ldr	r2, [sp, #28]
 8006224:	4654      	mov	r4, sl
 8006226:	2000      	movs	r0, #0
 8006228:	f04f 0c0a 	mov.w	ip, #10
 800622c:	4621      	mov	r1, r4
 800622e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006232:	3b30      	subs	r3, #48	@ 0x30
 8006234:	2b09      	cmp	r3, #9
 8006236:	d94b      	bls.n	80062d0 <_svfiprintf_r+0x17c>
 8006238:	b1b0      	cbz	r0, 8006268 <_svfiprintf_r+0x114>
 800623a:	9207      	str	r2, [sp, #28]
 800623c:	e014      	b.n	8006268 <_svfiprintf_r+0x114>
 800623e:	eba0 0308 	sub.w	r3, r0, r8
 8006242:	fa09 f303 	lsl.w	r3, r9, r3
 8006246:	4313      	orrs	r3, r2
 8006248:	9304      	str	r3, [sp, #16]
 800624a:	46a2      	mov	sl, r4
 800624c:	e7d2      	b.n	80061f4 <_svfiprintf_r+0xa0>
 800624e:	9b03      	ldr	r3, [sp, #12]
 8006250:	1d19      	adds	r1, r3, #4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	9103      	str	r1, [sp, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	bfbb      	ittet	lt
 800625a:	425b      	neglt	r3, r3
 800625c:	f042 0202 	orrlt.w	r2, r2, #2
 8006260:	9307      	strge	r3, [sp, #28]
 8006262:	9307      	strlt	r3, [sp, #28]
 8006264:	bfb8      	it	lt
 8006266:	9204      	strlt	r2, [sp, #16]
 8006268:	7823      	ldrb	r3, [r4, #0]
 800626a:	2b2e      	cmp	r3, #46	@ 0x2e
 800626c:	d10a      	bne.n	8006284 <_svfiprintf_r+0x130>
 800626e:	7863      	ldrb	r3, [r4, #1]
 8006270:	2b2a      	cmp	r3, #42	@ 0x2a
 8006272:	d132      	bne.n	80062da <_svfiprintf_r+0x186>
 8006274:	9b03      	ldr	r3, [sp, #12]
 8006276:	1d1a      	adds	r2, r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	9203      	str	r2, [sp, #12]
 800627c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006280:	3402      	adds	r4, #2
 8006282:	9305      	str	r3, [sp, #20]
 8006284:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006348 <_svfiprintf_r+0x1f4>
 8006288:	7821      	ldrb	r1, [r4, #0]
 800628a:	2203      	movs	r2, #3
 800628c:	4650      	mov	r0, sl
 800628e:	f7fa f807 	bl	80002a0 <memchr>
 8006292:	b138      	cbz	r0, 80062a4 <_svfiprintf_r+0x150>
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	eba0 000a 	sub.w	r0, r0, sl
 800629a:	2240      	movs	r2, #64	@ 0x40
 800629c:	4082      	lsls	r2, r0
 800629e:	4313      	orrs	r3, r2
 80062a0:	3401      	adds	r4, #1
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a8:	4824      	ldr	r0, [pc, #144]	@ (800633c <_svfiprintf_r+0x1e8>)
 80062aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062ae:	2206      	movs	r2, #6
 80062b0:	f7f9 fff6 	bl	80002a0 <memchr>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d036      	beq.n	8006326 <_svfiprintf_r+0x1d2>
 80062b8:	4b21      	ldr	r3, [pc, #132]	@ (8006340 <_svfiprintf_r+0x1ec>)
 80062ba:	bb1b      	cbnz	r3, 8006304 <_svfiprintf_r+0x1b0>
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	3307      	adds	r3, #7
 80062c0:	f023 0307 	bic.w	r3, r3, #7
 80062c4:	3308      	adds	r3, #8
 80062c6:	9303      	str	r3, [sp, #12]
 80062c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ca:	4433      	add	r3, r6
 80062cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ce:	e76a      	b.n	80061a6 <_svfiprintf_r+0x52>
 80062d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80062d4:	460c      	mov	r4, r1
 80062d6:	2001      	movs	r0, #1
 80062d8:	e7a8      	b.n	800622c <_svfiprintf_r+0xd8>
 80062da:	2300      	movs	r3, #0
 80062dc:	3401      	adds	r4, #1
 80062de:	9305      	str	r3, [sp, #20]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f04f 0c0a 	mov.w	ip, #10
 80062e6:	4620      	mov	r0, r4
 80062e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ec:	3a30      	subs	r2, #48	@ 0x30
 80062ee:	2a09      	cmp	r2, #9
 80062f0:	d903      	bls.n	80062fa <_svfiprintf_r+0x1a6>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0c6      	beq.n	8006284 <_svfiprintf_r+0x130>
 80062f6:	9105      	str	r1, [sp, #20]
 80062f8:	e7c4      	b.n	8006284 <_svfiprintf_r+0x130>
 80062fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80062fe:	4604      	mov	r4, r0
 8006300:	2301      	movs	r3, #1
 8006302:	e7f0      	b.n	80062e6 <_svfiprintf_r+0x192>
 8006304:	ab03      	add	r3, sp, #12
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	462a      	mov	r2, r5
 800630a:	4b0e      	ldr	r3, [pc, #56]	@ (8006344 <_svfiprintf_r+0x1f0>)
 800630c:	a904      	add	r1, sp, #16
 800630e:	4638      	mov	r0, r7
 8006310:	f3af 8000 	nop.w
 8006314:	1c42      	adds	r2, r0, #1
 8006316:	4606      	mov	r6, r0
 8006318:	d1d6      	bne.n	80062c8 <_svfiprintf_r+0x174>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	065b      	lsls	r3, r3, #25
 800631e:	f53f af2d 	bmi.w	800617c <_svfiprintf_r+0x28>
 8006322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006324:	e72c      	b.n	8006180 <_svfiprintf_r+0x2c>
 8006326:	ab03      	add	r3, sp, #12
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	462a      	mov	r2, r5
 800632c:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <_svfiprintf_r+0x1f0>)
 800632e:	a904      	add	r1, sp, #16
 8006330:	4638      	mov	r0, r7
 8006332:	f000 f91b 	bl	800656c <_printf_i>
 8006336:	e7ed      	b.n	8006314 <_svfiprintf_r+0x1c0>
 8006338:	0801a3e4 	.word	0x0801a3e4
 800633c:	0801a3ee 	.word	0x0801a3ee
 8006340:	00000000 	.word	0x00000000
 8006344:	0800609d 	.word	0x0800609d
 8006348:	0801a3ea 	.word	0x0801a3ea

0800634c <sbrk_aligned>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4e0f      	ldr	r6, [pc, #60]	@ (800638c <sbrk_aligned+0x40>)
 8006350:	460c      	mov	r4, r1
 8006352:	6831      	ldr	r1, [r6, #0]
 8006354:	4605      	mov	r5, r0
 8006356:	b911      	cbnz	r1, 800635e <sbrk_aligned+0x12>
 8006358:	f000 fa7c 	bl	8006854 <_sbrk_r>
 800635c:	6030      	str	r0, [r6, #0]
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f000 fa77 	bl	8006854 <_sbrk_r>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d103      	bne.n	8006372 <sbrk_aligned+0x26>
 800636a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800636e:	4620      	mov	r0, r4
 8006370:	bd70      	pop	{r4, r5, r6, pc}
 8006372:	1cc4      	adds	r4, r0, #3
 8006374:	f024 0403 	bic.w	r4, r4, #3
 8006378:	42a0      	cmp	r0, r4
 800637a:	d0f8      	beq.n	800636e <sbrk_aligned+0x22>
 800637c:	1a21      	subs	r1, r4, r0
 800637e:	4628      	mov	r0, r5
 8006380:	f000 fa68 	bl	8006854 <_sbrk_r>
 8006384:	3001      	adds	r0, #1
 8006386:	d1f2      	bne.n	800636e <sbrk_aligned+0x22>
 8006388:	e7ef      	b.n	800636a <sbrk_aligned+0x1e>
 800638a:	bf00      	nop
 800638c:	2000575c 	.word	0x2000575c

08006390 <_malloc_r>:
 8006390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006394:	1ccd      	adds	r5, r1, #3
 8006396:	f025 0503 	bic.w	r5, r5, #3
 800639a:	3508      	adds	r5, #8
 800639c:	2d0c      	cmp	r5, #12
 800639e:	bf38      	it	cc
 80063a0:	250c      	movcc	r5, #12
 80063a2:	2d00      	cmp	r5, #0
 80063a4:	4606      	mov	r6, r0
 80063a6:	db01      	blt.n	80063ac <_malloc_r+0x1c>
 80063a8:	42a9      	cmp	r1, r5
 80063aa:	d904      	bls.n	80063b6 <_malloc_r+0x26>
 80063ac:	230c      	movs	r3, #12
 80063ae:	6033      	str	r3, [r6, #0]
 80063b0:	2000      	movs	r0, #0
 80063b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800648c <_malloc_r+0xfc>
 80063ba:	f000 f9f7 	bl	80067ac <__malloc_lock>
 80063be:	f8d8 3000 	ldr.w	r3, [r8]
 80063c2:	461c      	mov	r4, r3
 80063c4:	bb44      	cbnz	r4, 8006418 <_malloc_r+0x88>
 80063c6:	4629      	mov	r1, r5
 80063c8:	4630      	mov	r0, r6
 80063ca:	f7ff ffbf 	bl	800634c <sbrk_aligned>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	4604      	mov	r4, r0
 80063d2:	d158      	bne.n	8006486 <_malloc_r+0xf6>
 80063d4:	f8d8 4000 	ldr.w	r4, [r8]
 80063d8:	4627      	mov	r7, r4
 80063da:	2f00      	cmp	r7, #0
 80063dc:	d143      	bne.n	8006466 <_malloc_r+0xd6>
 80063de:	2c00      	cmp	r4, #0
 80063e0:	d04b      	beq.n	800647a <_malloc_r+0xea>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	4639      	mov	r1, r7
 80063e6:	4630      	mov	r0, r6
 80063e8:	eb04 0903 	add.w	r9, r4, r3
 80063ec:	f000 fa32 	bl	8006854 <_sbrk_r>
 80063f0:	4581      	cmp	r9, r0
 80063f2:	d142      	bne.n	800647a <_malloc_r+0xea>
 80063f4:	6821      	ldr	r1, [r4, #0]
 80063f6:	1a6d      	subs	r5, r5, r1
 80063f8:	4629      	mov	r1, r5
 80063fa:	4630      	mov	r0, r6
 80063fc:	f7ff ffa6 	bl	800634c <sbrk_aligned>
 8006400:	3001      	adds	r0, #1
 8006402:	d03a      	beq.n	800647a <_malloc_r+0xea>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	442b      	add	r3, r5
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	f8d8 3000 	ldr.w	r3, [r8]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	bb62      	cbnz	r2, 800646c <_malloc_r+0xdc>
 8006412:	f8c8 7000 	str.w	r7, [r8]
 8006416:	e00f      	b.n	8006438 <_malloc_r+0xa8>
 8006418:	6822      	ldr	r2, [r4, #0]
 800641a:	1b52      	subs	r2, r2, r5
 800641c:	d420      	bmi.n	8006460 <_malloc_r+0xd0>
 800641e:	2a0b      	cmp	r2, #11
 8006420:	d917      	bls.n	8006452 <_malloc_r+0xc2>
 8006422:	1961      	adds	r1, r4, r5
 8006424:	42a3      	cmp	r3, r4
 8006426:	6025      	str	r5, [r4, #0]
 8006428:	bf18      	it	ne
 800642a:	6059      	strne	r1, [r3, #4]
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	bf08      	it	eq
 8006430:	f8c8 1000 	streq.w	r1, [r8]
 8006434:	5162      	str	r2, [r4, r5]
 8006436:	604b      	str	r3, [r1, #4]
 8006438:	4630      	mov	r0, r6
 800643a:	f000 f9bd 	bl	80067b8 <__malloc_unlock>
 800643e:	f104 000b 	add.w	r0, r4, #11
 8006442:	1d23      	adds	r3, r4, #4
 8006444:	f020 0007 	bic.w	r0, r0, #7
 8006448:	1ac2      	subs	r2, r0, r3
 800644a:	bf1c      	itt	ne
 800644c:	1a1b      	subne	r3, r3, r0
 800644e:	50a3      	strne	r3, [r4, r2]
 8006450:	e7af      	b.n	80063b2 <_malloc_r+0x22>
 8006452:	6862      	ldr	r2, [r4, #4]
 8006454:	42a3      	cmp	r3, r4
 8006456:	bf0c      	ite	eq
 8006458:	f8c8 2000 	streq.w	r2, [r8]
 800645c:	605a      	strne	r2, [r3, #4]
 800645e:	e7eb      	b.n	8006438 <_malloc_r+0xa8>
 8006460:	4623      	mov	r3, r4
 8006462:	6864      	ldr	r4, [r4, #4]
 8006464:	e7ae      	b.n	80063c4 <_malloc_r+0x34>
 8006466:	463c      	mov	r4, r7
 8006468:	687f      	ldr	r7, [r7, #4]
 800646a:	e7b6      	b.n	80063da <_malloc_r+0x4a>
 800646c:	461a      	mov	r2, r3
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	42a3      	cmp	r3, r4
 8006472:	d1fb      	bne.n	800646c <_malloc_r+0xdc>
 8006474:	2300      	movs	r3, #0
 8006476:	6053      	str	r3, [r2, #4]
 8006478:	e7de      	b.n	8006438 <_malloc_r+0xa8>
 800647a:	230c      	movs	r3, #12
 800647c:	6033      	str	r3, [r6, #0]
 800647e:	4630      	mov	r0, r6
 8006480:	f000 f99a 	bl	80067b8 <__malloc_unlock>
 8006484:	e794      	b.n	80063b0 <_malloc_r+0x20>
 8006486:	6005      	str	r5, [r0, #0]
 8006488:	e7d6      	b.n	8006438 <_malloc_r+0xa8>
 800648a:	bf00      	nop
 800648c:	20005760 	.word	0x20005760

08006490 <_printf_common>:
 8006490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	4616      	mov	r6, r2
 8006496:	4698      	mov	r8, r3
 8006498:	688a      	ldr	r2, [r1, #8]
 800649a:	690b      	ldr	r3, [r1, #16]
 800649c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	bfb8      	it	lt
 80064a4:	4613      	movlt	r3, r2
 80064a6:	6033      	str	r3, [r6, #0]
 80064a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064ac:	4607      	mov	r7, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	b10a      	cbz	r2, 80064b6 <_printf_common+0x26>
 80064b2:	3301      	adds	r3, #1
 80064b4:	6033      	str	r3, [r6, #0]
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	0699      	lsls	r1, r3, #26
 80064ba:	bf42      	ittt	mi
 80064bc:	6833      	ldrmi	r3, [r6, #0]
 80064be:	3302      	addmi	r3, #2
 80064c0:	6033      	strmi	r3, [r6, #0]
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	f015 0506 	ands.w	r5, r5, #6
 80064c8:	d106      	bne.n	80064d8 <_printf_common+0x48>
 80064ca:	f104 0a19 	add.w	sl, r4, #25
 80064ce:	68e3      	ldr	r3, [r4, #12]
 80064d0:	6832      	ldr	r2, [r6, #0]
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	dc26      	bgt.n	8006526 <_printf_common+0x96>
 80064d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	3b00      	subs	r3, #0
 80064e0:	bf18      	it	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	0692      	lsls	r2, r2, #26
 80064e6:	d42b      	bmi.n	8006540 <_printf_common+0xb0>
 80064e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064ec:	4641      	mov	r1, r8
 80064ee:	4638      	mov	r0, r7
 80064f0:	47c8      	blx	r9
 80064f2:	3001      	adds	r0, #1
 80064f4:	d01e      	beq.n	8006534 <_printf_common+0xa4>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	6922      	ldr	r2, [r4, #16]
 80064fa:	f003 0306 	and.w	r3, r3, #6
 80064fe:	2b04      	cmp	r3, #4
 8006500:	bf02      	ittt	eq
 8006502:	68e5      	ldreq	r5, [r4, #12]
 8006504:	6833      	ldreq	r3, [r6, #0]
 8006506:	1aed      	subeq	r5, r5, r3
 8006508:	68a3      	ldr	r3, [r4, #8]
 800650a:	bf0c      	ite	eq
 800650c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006510:	2500      	movne	r5, #0
 8006512:	4293      	cmp	r3, r2
 8006514:	bfc4      	itt	gt
 8006516:	1a9b      	subgt	r3, r3, r2
 8006518:	18ed      	addgt	r5, r5, r3
 800651a:	2600      	movs	r6, #0
 800651c:	341a      	adds	r4, #26
 800651e:	42b5      	cmp	r5, r6
 8006520:	d11a      	bne.n	8006558 <_printf_common+0xc8>
 8006522:	2000      	movs	r0, #0
 8006524:	e008      	b.n	8006538 <_printf_common+0xa8>
 8006526:	2301      	movs	r3, #1
 8006528:	4652      	mov	r2, sl
 800652a:	4641      	mov	r1, r8
 800652c:	4638      	mov	r0, r7
 800652e:	47c8      	blx	r9
 8006530:	3001      	adds	r0, #1
 8006532:	d103      	bne.n	800653c <_printf_common+0xac>
 8006534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653c:	3501      	adds	r5, #1
 800653e:	e7c6      	b.n	80064ce <_printf_common+0x3e>
 8006540:	18e1      	adds	r1, r4, r3
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	2030      	movs	r0, #48	@ 0x30
 8006546:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800654a:	4422      	add	r2, r4
 800654c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006550:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006554:	3302      	adds	r3, #2
 8006556:	e7c7      	b.n	80064e8 <_printf_common+0x58>
 8006558:	2301      	movs	r3, #1
 800655a:	4622      	mov	r2, r4
 800655c:	4641      	mov	r1, r8
 800655e:	4638      	mov	r0, r7
 8006560:	47c8      	blx	r9
 8006562:	3001      	adds	r0, #1
 8006564:	d0e6      	beq.n	8006534 <_printf_common+0xa4>
 8006566:	3601      	adds	r6, #1
 8006568:	e7d9      	b.n	800651e <_printf_common+0x8e>
	...

0800656c <_printf_i>:
 800656c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006570:	7e0f      	ldrb	r7, [r1, #24]
 8006572:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006574:	2f78      	cmp	r7, #120	@ 0x78
 8006576:	4691      	mov	r9, r2
 8006578:	4680      	mov	r8, r0
 800657a:	460c      	mov	r4, r1
 800657c:	469a      	mov	sl, r3
 800657e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006582:	d807      	bhi.n	8006594 <_printf_i+0x28>
 8006584:	2f62      	cmp	r7, #98	@ 0x62
 8006586:	d80a      	bhi.n	800659e <_printf_i+0x32>
 8006588:	2f00      	cmp	r7, #0
 800658a:	f000 80d2 	beq.w	8006732 <_printf_i+0x1c6>
 800658e:	2f58      	cmp	r7, #88	@ 0x58
 8006590:	f000 80b9 	beq.w	8006706 <_printf_i+0x19a>
 8006594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006598:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800659c:	e03a      	b.n	8006614 <_printf_i+0xa8>
 800659e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065a2:	2b15      	cmp	r3, #21
 80065a4:	d8f6      	bhi.n	8006594 <_printf_i+0x28>
 80065a6:	a101      	add	r1, pc, #4	@ (adr r1, 80065ac <_printf_i+0x40>)
 80065a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065ac:	08006605 	.word	0x08006605
 80065b0:	08006619 	.word	0x08006619
 80065b4:	08006595 	.word	0x08006595
 80065b8:	08006595 	.word	0x08006595
 80065bc:	08006595 	.word	0x08006595
 80065c0:	08006595 	.word	0x08006595
 80065c4:	08006619 	.word	0x08006619
 80065c8:	08006595 	.word	0x08006595
 80065cc:	08006595 	.word	0x08006595
 80065d0:	08006595 	.word	0x08006595
 80065d4:	08006595 	.word	0x08006595
 80065d8:	08006719 	.word	0x08006719
 80065dc:	08006643 	.word	0x08006643
 80065e0:	080066d3 	.word	0x080066d3
 80065e4:	08006595 	.word	0x08006595
 80065e8:	08006595 	.word	0x08006595
 80065ec:	0800673b 	.word	0x0800673b
 80065f0:	08006595 	.word	0x08006595
 80065f4:	08006643 	.word	0x08006643
 80065f8:	08006595 	.word	0x08006595
 80065fc:	08006595 	.word	0x08006595
 8006600:	080066db 	.word	0x080066db
 8006604:	6833      	ldr	r3, [r6, #0]
 8006606:	1d1a      	adds	r2, r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6032      	str	r2, [r6, #0]
 800660c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006610:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006614:	2301      	movs	r3, #1
 8006616:	e09d      	b.n	8006754 <_printf_i+0x1e8>
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	6820      	ldr	r0, [r4, #0]
 800661c:	1d19      	adds	r1, r3, #4
 800661e:	6031      	str	r1, [r6, #0]
 8006620:	0606      	lsls	r6, r0, #24
 8006622:	d501      	bpl.n	8006628 <_printf_i+0xbc>
 8006624:	681d      	ldr	r5, [r3, #0]
 8006626:	e003      	b.n	8006630 <_printf_i+0xc4>
 8006628:	0645      	lsls	r5, r0, #25
 800662a:	d5fb      	bpl.n	8006624 <_printf_i+0xb8>
 800662c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006630:	2d00      	cmp	r5, #0
 8006632:	da03      	bge.n	800663c <_printf_i+0xd0>
 8006634:	232d      	movs	r3, #45	@ 0x2d
 8006636:	426d      	negs	r5, r5
 8006638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800663c:	4859      	ldr	r0, [pc, #356]	@ (80067a4 <_printf_i+0x238>)
 800663e:	230a      	movs	r3, #10
 8006640:	e011      	b.n	8006666 <_printf_i+0xfa>
 8006642:	6821      	ldr	r1, [r4, #0]
 8006644:	6833      	ldr	r3, [r6, #0]
 8006646:	0608      	lsls	r0, r1, #24
 8006648:	f853 5b04 	ldr.w	r5, [r3], #4
 800664c:	d402      	bmi.n	8006654 <_printf_i+0xe8>
 800664e:	0649      	lsls	r1, r1, #25
 8006650:	bf48      	it	mi
 8006652:	b2ad      	uxthmi	r5, r5
 8006654:	2f6f      	cmp	r7, #111	@ 0x6f
 8006656:	4853      	ldr	r0, [pc, #332]	@ (80067a4 <_printf_i+0x238>)
 8006658:	6033      	str	r3, [r6, #0]
 800665a:	bf14      	ite	ne
 800665c:	230a      	movne	r3, #10
 800665e:	2308      	moveq	r3, #8
 8006660:	2100      	movs	r1, #0
 8006662:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006666:	6866      	ldr	r6, [r4, #4]
 8006668:	60a6      	str	r6, [r4, #8]
 800666a:	2e00      	cmp	r6, #0
 800666c:	bfa2      	ittt	ge
 800666e:	6821      	ldrge	r1, [r4, #0]
 8006670:	f021 0104 	bicge.w	r1, r1, #4
 8006674:	6021      	strge	r1, [r4, #0]
 8006676:	b90d      	cbnz	r5, 800667c <_printf_i+0x110>
 8006678:	2e00      	cmp	r6, #0
 800667a:	d04b      	beq.n	8006714 <_printf_i+0x1a8>
 800667c:	4616      	mov	r6, r2
 800667e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006682:	fb03 5711 	mls	r7, r3, r1, r5
 8006686:	5dc7      	ldrb	r7, [r0, r7]
 8006688:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800668c:	462f      	mov	r7, r5
 800668e:	42bb      	cmp	r3, r7
 8006690:	460d      	mov	r5, r1
 8006692:	d9f4      	bls.n	800667e <_printf_i+0x112>
 8006694:	2b08      	cmp	r3, #8
 8006696:	d10b      	bne.n	80066b0 <_printf_i+0x144>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	07df      	lsls	r7, r3, #31
 800669c:	d508      	bpl.n	80066b0 <_printf_i+0x144>
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	6861      	ldr	r1, [r4, #4]
 80066a2:	4299      	cmp	r1, r3
 80066a4:	bfde      	ittt	le
 80066a6:	2330      	movle	r3, #48	@ 0x30
 80066a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80066b0:	1b92      	subs	r2, r2, r6
 80066b2:	6122      	str	r2, [r4, #16]
 80066b4:	f8cd a000 	str.w	sl, [sp]
 80066b8:	464b      	mov	r3, r9
 80066ba:	aa03      	add	r2, sp, #12
 80066bc:	4621      	mov	r1, r4
 80066be:	4640      	mov	r0, r8
 80066c0:	f7ff fee6 	bl	8006490 <_printf_common>
 80066c4:	3001      	adds	r0, #1
 80066c6:	d14a      	bne.n	800675e <_printf_i+0x1f2>
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066cc:	b004      	add	sp, #16
 80066ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	f043 0320 	orr.w	r3, r3, #32
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	4833      	ldr	r0, [pc, #204]	@ (80067a8 <_printf_i+0x23c>)
 80066dc:	2778      	movs	r7, #120	@ 0x78
 80066de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	6831      	ldr	r1, [r6, #0]
 80066e6:	061f      	lsls	r7, r3, #24
 80066e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80066ec:	d402      	bmi.n	80066f4 <_printf_i+0x188>
 80066ee:	065f      	lsls	r7, r3, #25
 80066f0:	bf48      	it	mi
 80066f2:	b2ad      	uxthmi	r5, r5
 80066f4:	6031      	str	r1, [r6, #0]
 80066f6:	07d9      	lsls	r1, r3, #31
 80066f8:	bf44      	itt	mi
 80066fa:	f043 0320 	orrmi.w	r3, r3, #32
 80066fe:	6023      	strmi	r3, [r4, #0]
 8006700:	b11d      	cbz	r5, 800670a <_printf_i+0x19e>
 8006702:	2310      	movs	r3, #16
 8006704:	e7ac      	b.n	8006660 <_printf_i+0xf4>
 8006706:	4827      	ldr	r0, [pc, #156]	@ (80067a4 <_printf_i+0x238>)
 8006708:	e7e9      	b.n	80066de <_printf_i+0x172>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	f023 0320 	bic.w	r3, r3, #32
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	e7f6      	b.n	8006702 <_printf_i+0x196>
 8006714:	4616      	mov	r6, r2
 8006716:	e7bd      	b.n	8006694 <_printf_i+0x128>
 8006718:	6833      	ldr	r3, [r6, #0]
 800671a:	6825      	ldr	r5, [r4, #0]
 800671c:	6961      	ldr	r1, [r4, #20]
 800671e:	1d18      	adds	r0, r3, #4
 8006720:	6030      	str	r0, [r6, #0]
 8006722:	062e      	lsls	r6, r5, #24
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	d501      	bpl.n	800672c <_printf_i+0x1c0>
 8006728:	6019      	str	r1, [r3, #0]
 800672a:	e002      	b.n	8006732 <_printf_i+0x1c6>
 800672c:	0668      	lsls	r0, r5, #25
 800672e:	d5fb      	bpl.n	8006728 <_printf_i+0x1bc>
 8006730:	8019      	strh	r1, [r3, #0]
 8006732:	2300      	movs	r3, #0
 8006734:	6123      	str	r3, [r4, #16]
 8006736:	4616      	mov	r6, r2
 8006738:	e7bc      	b.n	80066b4 <_printf_i+0x148>
 800673a:	6833      	ldr	r3, [r6, #0]
 800673c:	1d1a      	adds	r2, r3, #4
 800673e:	6032      	str	r2, [r6, #0]
 8006740:	681e      	ldr	r6, [r3, #0]
 8006742:	6862      	ldr	r2, [r4, #4]
 8006744:	2100      	movs	r1, #0
 8006746:	4630      	mov	r0, r6
 8006748:	f7f9 fdaa 	bl	80002a0 <memchr>
 800674c:	b108      	cbz	r0, 8006752 <_printf_i+0x1e6>
 800674e:	1b80      	subs	r0, r0, r6
 8006750:	6060      	str	r0, [r4, #4]
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	2300      	movs	r3, #0
 8006758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800675c:	e7aa      	b.n	80066b4 <_printf_i+0x148>
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	4632      	mov	r2, r6
 8006762:	4649      	mov	r1, r9
 8006764:	4640      	mov	r0, r8
 8006766:	47d0      	blx	sl
 8006768:	3001      	adds	r0, #1
 800676a:	d0ad      	beq.n	80066c8 <_printf_i+0x15c>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	079b      	lsls	r3, r3, #30
 8006770:	d413      	bmi.n	800679a <_printf_i+0x22e>
 8006772:	68e0      	ldr	r0, [r4, #12]
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	4298      	cmp	r0, r3
 8006778:	bfb8      	it	lt
 800677a:	4618      	movlt	r0, r3
 800677c:	e7a6      	b.n	80066cc <_printf_i+0x160>
 800677e:	2301      	movs	r3, #1
 8006780:	4632      	mov	r2, r6
 8006782:	4649      	mov	r1, r9
 8006784:	4640      	mov	r0, r8
 8006786:	47d0      	blx	sl
 8006788:	3001      	adds	r0, #1
 800678a:	d09d      	beq.n	80066c8 <_printf_i+0x15c>
 800678c:	3501      	adds	r5, #1
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	9903      	ldr	r1, [sp, #12]
 8006792:	1a5b      	subs	r3, r3, r1
 8006794:	42ab      	cmp	r3, r5
 8006796:	dcf2      	bgt.n	800677e <_printf_i+0x212>
 8006798:	e7eb      	b.n	8006772 <_printf_i+0x206>
 800679a:	2500      	movs	r5, #0
 800679c:	f104 0619 	add.w	r6, r4, #25
 80067a0:	e7f5      	b.n	800678e <_printf_i+0x222>
 80067a2:	bf00      	nop
 80067a4:	0801a3f5 	.word	0x0801a3f5
 80067a8:	0801a406 	.word	0x0801a406

080067ac <__malloc_lock>:
 80067ac:	4801      	ldr	r0, [pc, #4]	@ (80067b4 <__malloc_lock+0x8>)
 80067ae:	f7ff bc65 	b.w	800607c <__retarget_lock_acquire_recursive>
 80067b2:	bf00      	nop
 80067b4:	20005758 	.word	0x20005758

080067b8 <__malloc_unlock>:
 80067b8:	4801      	ldr	r0, [pc, #4]	@ (80067c0 <__malloc_unlock+0x8>)
 80067ba:	f7ff bc60 	b.w	800607e <__retarget_lock_release_recursive>
 80067be:	bf00      	nop
 80067c0:	20005758 	.word	0x20005758

080067c4 <_realloc_r>:
 80067c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c8:	4680      	mov	r8, r0
 80067ca:	4615      	mov	r5, r2
 80067cc:	460c      	mov	r4, r1
 80067ce:	b921      	cbnz	r1, 80067da <_realloc_r+0x16>
 80067d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067d4:	4611      	mov	r1, r2
 80067d6:	f7ff bddb 	b.w	8006390 <_malloc_r>
 80067da:	b92a      	cbnz	r2, 80067e8 <_realloc_r+0x24>
 80067dc:	f000 f84a 	bl	8006874 <_free_r>
 80067e0:	2400      	movs	r4, #0
 80067e2:	4620      	mov	r0, r4
 80067e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e8:	f000 f88e 	bl	8006908 <_malloc_usable_size_r>
 80067ec:	4285      	cmp	r5, r0
 80067ee:	4606      	mov	r6, r0
 80067f0:	d802      	bhi.n	80067f8 <_realloc_r+0x34>
 80067f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80067f6:	d8f4      	bhi.n	80067e2 <_realloc_r+0x1e>
 80067f8:	4629      	mov	r1, r5
 80067fa:	4640      	mov	r0, r8
 80067fc:	f7ff fdc8 	bl	8006390 <_malloc_r>
 8006800:	4607      	mov	r7, r0
 8006802:	2800      	cmp	r0, #0
 8006804:	d0ec      	beq.n	80067e0 <_realloc_r+0x1c>
 8006806:	42b5      	cmp	r5, r6
 8006808:	462a      	mov	r2, r5
 800680a:	4621      	mov	r1, r4
 800680c:	bf28      	it	cs
 800680e:	4632      	movcs	r2, r6
 8006810:	f7ff fc36 	bl	8006080 <memcpy>
 8006814:	4621      	mov	r1, r4
 8006816:	4640      	mov	r0, r8
 8006818:	f000 f82c 	bl	8006874 <_free_r>
 800681c:	463c      	mov	r4, r7
 800681e:	e7e0      	b.n	80067e2 <_realloc_r+0x1e>

08006820 <memmove>:
 8006820:	4288      	cmp	r0, r1
 8006822:	b510      	push	{r4, lr}
 8006824:	eb01 0402 	add.w	r4, r1, r2
 8006828:	d902      	bls.n	8006830 <memmove+0x10>
 800682a:	4284      	cmp	r4, r0
 800682c:	4623      	mov	r3, r4
 800682e:	d807      	bhi.n	8006840 <memmove+0x20>
 8006830:	1e43      	subs	r3, r0, #1
 8006832:	42a1      	cmp	r1, r4
 8006834:	d008      	beq.n	8006848 <memmove+0x28>
 8006836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800683a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800683e:	e7f8      	b.n	8006832 <memmove+0x12>
 8006840:	4402      	add	r2, r0
 8006842:	4601      	mov	r1, r0
 8006844:	428a      	cmp	r2, r1
 8006846:	d100      	bne.n	800684a <memmove+0x2a>
 8006848:	bd10      	pop	{r4, pc}
 800684a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800684e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006852:	e7f7      	b.n	8006844 <memmove+0x24>

08006854 <_sbrk_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d06      	ldr	r5, [pc, #24]	@ (8006870 <_sbrk_r+0x1c>)
 8006858:	2300      	movs	r3, #0
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	f7fa ffa2 	bl	80017a8 <_sbrk>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_sbrk_r+0x1a>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_sbrk_r+0x1a>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	20005764 	.word	0x20005764

08006874 <_free_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4605      	mov	r5, r0
 8006878:	2900      	cmp	r1, #0
 800687a:	d041      	beq.n	8006900 <_free_r+0x8c>
 800687c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006880:	1f0c      	subs	r4, r1, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfb8      	it	lt
 8006886:	18e4      	addlt	r4, r4, r3
 8006888:	f7ff ff90 	bl	80067ac <__malloc_lock>
 800688c:	4a1d      	ldr	r2, [pc, #116]	@ (8006904 <_free_r+0x90>)
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	b933      	cbnz	r3, 80068a0 <_free_r+0x2c>
 8006892:	6063      	str	r3, [r4, #4]
 8006894:	6014      	str	r4, [r2, #0]
 8006896:	4628      	mov	r0, r5
 8006898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800689c:	f7ff bf8c 	b.w	80067b8 <__malloc_unlock>
 80068a0:	42a3      	cmp	r3, r4
 80068a2:	d908      	bls.n	80068b6 <_free_r+0x42>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	1821      	adds	r1, r4, r0
 80068a8:	428b      	cmp	r3, r1
 80068aa:	bf01      	itttt	eq
 80068ac:	6819      	ldreq	r1, [r3, #0]
 80068ae:	685b      	ldreq	r3, [r3, #4]
 80068b0:	1809      	addeq	r1, r1, r0
 80068b2:	6021      	streq	r1, [r4, #0]
 80068b4:	e7ed      	b.n	8006892 <_free_r+0x1e>
 80068b6:	461a      	mov	r2, r3
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	b10b      	cbz	r3, 80068c0 <_free_r+0x4c>
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d9fa      	bls.n	80068b6 <_free_r+0x42>
 80068c0:	6811      	ldr	r1, [r2, #0]
 80068c2:	1850      	adds	r0, r2, r1
 80068c4:	42a0      	cmp	r0, r4
 80068c6:	d10b      	bne.n	80068e0 <_free_r+0x6c>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	4401      	add	r1, r0
 80068cc:	1850      	adds	r0, r2, r1
 80068ce:	4283      	cmp	r3, r0
 80068d0:	6011      	str	r1, [r2, #0]
 80068d2:	d1e0      	bne.n	8006896 <_free_r+0x22>
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	6053      	str	r3, [r2, #4]
 80068da:	4408      	add	r0, r1
 80068dc:	6010      	str	r0, [r2, #0]
 80068de:	e7da      	b.n	8006896 <_free_r+0x22>
 80068e0:	d902      	bls.n	80068e8 <_free_r+0x74>
 80068e2:	230c      	movs	r3, #12
 80068e4:	602b      	str	r3, [r5, #0]
 80068e6:	e7d6      	b.n	8006896 <_free_r+0x22>
 80068e8:	6820      	ldr	r0, [r4, #0]
 80068ea:	1821      	adds	r1, r4, r0
 80068ec:	428b      	cmp	r3, r1
 80068ee:	bf04      	itt	eq
 80068f0:	6819      	ldreq	r1, [r3, #0]
 80068f2:	685b      	ldreq	r3, [r3, #4]
 80068f4:	6063      	str	r3, [r4, #4]
 80068f6:	bf04      	itt	eq
 80068f8:	1809      	addeq	r1, r1, r0
 80068fa:	6021      	streq	r1, [r4, #0]
 80068fc:	6054      	str	r4, [r2, #4]
 80068fe:	e7ca      	b.n	8006896 <_free_r+0x22>
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	20005760 	.word	0x20005760

08006908 <_malloc_usable_size_r>:
 8006908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800690c:	1f18      	subs	r0, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	bfbc      	itt	lt
 8006912:	580b      	ldrlt	r3, [r1, r0]
 8006914:	18c0      	addlt	r0, r0, r3
 8006916:	4770      	bx	lr

08006918 <sqrtf>:
 8006918:	b508      	push	{r3, lr}
 800691a:	ed2d 8b02 	vpush	{d8}
 800691e:	eeb0 8a40 	vmov.f32	s16, s0
 8006922:	f000 f817 	bl	8006954 <__ieee754_sqrtf>
 8006926:	eeb4 8a48 	vcmp.f32	s16, s16
 800692a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692e:	d60c      	bvs.n	800694a <sqrtf+0x32>
 8006930:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006950 <sqrtf+0x38>
 8006934:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693c:	d505      	bpl.n	800694a <sqrtf+0x32>
 800693e:	f7ff fb73 	bl	8006028 <__errno>
 8006942:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006946:	2321      	movs	r3, #33	@ 0x21
 8006948:	6003      	str	r3, [r0, #0]
 800694a:	ecbd 8b02 	vpop	{d8}
 800694e:	bd08      	pop	{r3, pc}
 8006950:	00000000 	.word	0x00000000

08006954 <__ieee754_sqrtf>:
 8006954:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006958:	4770      	bx	lr
	...

0800695c <_init>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	bf00      	nop
 8006960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006962:	bc08      	pop	{r3}
 8006964:	469e      	mov	lr, r3
 8006966:	4770      	bx	lr

08006968 <_fini>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	bf00      	nop
 800696c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696e:	bc08      	pop	{r3}
 8006970:	469e      	mov	lr, r3
 8006972:	4770      	bx	lr
