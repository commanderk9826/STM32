
dcMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004c90  08004c90  00005c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df4  08004df4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004df4  08004df4  00005df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dfc  08004dfc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e00  08004e00  00005e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000068  08004e6c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004e6c  00006314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3b9  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002291  00000000  00000000  00014451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000166e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5e  00000000  00000000  00017440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ad6  00000000  00000000  00017e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f92c  00000000  00000000  0002f974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900ce  00000000  00000000  0003f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf36e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fb8  00000000  00000000  000cf3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d336c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c78 	.word	0x08004c78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004c78 	.word	0x08004c78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <setSpeed>:

//외부 장치 선언
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim1;

void setSpeed(uint8_t speed){
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	htim1.Instance->CCR1 = (speed*10)-1;
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	4413      	add	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <setSpeed+0x28>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000084 	.word	0x20000084

080005ac <runMotor>:


void runMotor(uint8_t direction){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	if(direction){
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00a      	beq.n	80005d2 <runMotor+0x26>
		HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <runMotor+0x44>)
 80005c2:	f001 f84f 	bl	8001664 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2140      	movs	r1, #64	@ 0x40
 80005ca:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <runMotor+0x48>)
 80005cc:	f001 f84a 	bl	8001664 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 0);
		HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
	}

}
 80005d0:	e009      	b.n	80005e6 <runMotor+0x3a>
		HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2180      	movs	r1, #128	@ 0x80
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <runMotor+0x44>)
 80005d8:	f001 f844 	bl	8001664 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	@ 0x40
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <runMotor+0x48>)
 80005e2:	f001 f83f 	bl	8001664 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020800 	.word	0x40020800
 80005f4:	40020400 	.word	0x40020400

080005f8 <stopMotor>:

void stopMotor(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2180      	movs	r1, #128	@ 0x80
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <stopMotor+0x1c>)
 8000602:	f001 f82f 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2140      	movs	r1, #64	@ 0x40
 800060a:	4803      	ldr	r0, [pc, #12]	@ (8000618 <stopMotor+0x20>)
 800060c:	f001 f82a 	bl	8001664 <HAL_GPIO_WritePin>

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020800 	.word	0x40020800
 8000618:	40020400 	.word	0x40020400

0800061c <app>:

void app(){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
	//uart 초기
	initUart(&huart2);
 8000622:	4826      	ldr	r0, [pc, #152]	@ (80006bc <app+0xa0>)
 8000624:	f000 fbe4 	bl	8000df0 <initUart>

	//tim1 초기화
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000628:	2100      	movs	r1, #0
 800062a:	4825      	ldr	r0, [pc, #148]	@ (80006c0 <app+0xa4>)
 800062c:	f001 fd34 	bl	8002098 <HAL_TIM_PWM_Start>
	while(1){
		char *msg = getMessage();
 8000630:	f000 fc24 	bl	8000e7c <getMessage>
 8000634:	60f8      	str	r0, [r7, #12]
		// f100, r080, stop
		if(strlen(msg)>2){
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f7ff fdd2 	bl	80001e0 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	2b02      	cmp	r3, #2
 8000640:	d9f6      	bls.n	8000630 <app+0x14>
			if(msg[0]=='f'){
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b66      	cmp	r3, #102	@ 0x66
 8000648:	d112      	bne.n	8000670 <app+0x54>
				runMotor(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f7ff ffae 	bl	80005ac <runMotor>
				int speed = atoi(&msg[1]);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	3301      	adds	r3, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fb47 	bl	8003ce8 <atoi>
 800065a:	6078      	str	r0, [r7, #4]
				setSpeed(speed);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff8d 	bl	8000580 <setSpeed>
				printf("Received: %s\n", msg);
 8000666:	68f9      	ldr	r1, [r7, #12]
 8000668:	4816      	ldr	r0, [pc, #88]	@ (80006c4 <app+0xa8>)
 800066a:	f003 fc87 	bl	8003f7c <iprintf>
 800066e:	e7df      	b.n	8000630 <app+0x14>
			}
			else if(msg[0] == 'r'){
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b72      	cmp	r3, #114	@ 0x72
 8000676:	d112      	bne.n	800069e <app+0x82>
				runMotor(0);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff97 	bl	80005ac <runMotor>
				int speed = atoi(&msg[1]);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fb30 	bl	8003ce8 <atoi>
 8000688:	60b8      	str	r0, [r7, #8]
				setSpeed(speed);
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff76 	bl	8000580 <setSpeed>
				printf("Received: %s\n", msg);
 8000694:	68f9      	ldr	r1, [r7, #12]
 8000696:	480b      	ldr	r0, [pc, #44]	@ (80006c4 <app+0xa8>)
 8000698:	f003 fc70 	bl	8003f7c <iprintf>
 800069c:	e7c8      	b.n	8000630 <app+0x14>
			}
			else if(strncmp(msg, "stop", 4) == 0){
 800069e:	2204      	movs	r2, #4
 80006a0:	4909      	ldr	r1, [pc, #36]	@ (80006c8 <app+0xac>)
 80006a2:	68f8      	ldr	r0, [r7, #12]
 80006a4:	f003 fc7c 	bl	8003fa0 <strncmp>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1c0      	bne.n	8000630 <app+0x14>
				stopMotor();
 80006ae:	f7ff ffa3 	bl	80005f8 <stopMotor>
				printf("Received: %s\n", msg);
 80006b2:	68f9      	ldr	r1, [r7, #12]
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <app+0xa8>)
 80006b6:	f003 fc61 	bl	8003f7c <iprintf>
	while(1){
 80006ba:	e7b9      	b.n	8000630 <app+0x14>
 80006bc:	200000cc 	.word	0x200000cc
 80006c0:	20000084 	.word	0x20000084
 80006c4:	08004c90 	.word	0x08004c90
 80006c8:	08004ca0 	.word	0x08004ca0

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d0:	f000 fc2e 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d4:	f000 f80a 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f000 f930 	bl	800093c <MX_GPIO_Init>
  MX_TIM1_Init();
 80006dc:	f000 f864 	bl	80007a8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006e0:	f000 f902 	bl	80008e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 80006e4:	f7ff ff9a 	bl	800061c <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <main+0x1c>

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fc62 	bl	8003fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <SystemClock_Config+0xb4>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a21      	ldr	r2, [pc, #132]	@ (80007a0 <SystemClock_Config+0xb4>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <SystemClock_Config+0xb4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <SystemClock_Config+0xb8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1b      	ldr	r2, [pc, #108]	@ (80007a4 <SystemClock_Config+0xb8>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <SystemClock_Config+0xb8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 ff9b 	bl	8001698 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000768:	f000 f94e 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f9fe 	bl	8001b88 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000792:	f000 f939 	bl	8000a08 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	@ 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b096      	sub	sp, #88	@ 0x58
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
 80007d6:	615a      	str	r2, [r3, #20]
 80007d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2220      	movs	r2, #32
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fbef 	bl	8003fc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e6:	4b3e      	ldr	r3, [pc, #248]	@ (80008e0 <MX_TIM1_Init+0x138>)
 80007e8:	4a3e      	ldr	r2, [pc, #248]	@ (80008e4 <MX_TIM1_Init+0x13c>)
 80007ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80007ec:	4b3c      	ldr	r3, [pc, #240]	@ (80008e0 <MX_TIM1_Init+0x138>)
 80007ee:	220f      	movs	r2, #15
 80007f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b3b      	ldr	r3, [pc, #236]	@ (80008e0 <MX_TIM1_Init+0x138>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80007f8:	4b39      	ldr	r3, [pc, #228]	@ (80008e0 <MX_TIM1_Init+0x138>)
 80007fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b37      	ldr	r3, [pc, #220]	@ (80008e0 <MX_TIM1_Init+0x138>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000806:	4b36      	ldr	r3, [pc, #216]	@ (80008e0 <MX_TIM1_Init+0x138>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b34      	ldr	r3, [pc, #208]	@ (80008e0 <MX_TIM1_Init+0x138>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000812:	4833      	ldr	r0, [pc, #204]	@ (80008e0 <MX_TIM1_Init+0x138>)
 8000814:	f001 fb98 	bl	8001f48 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800081e:	f000 f8f3 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800082c:	4619      	mov	r1, r3
 800082e:	482c      	ldr	r0, [pc, #176]	@ (80008e0 <MX_TIM1_Init+0x138>)
 8000830:	f001 fda4 	bl	800237c <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800083a:	f000 f8e5 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800083e:	4828      	ldr	r0, [pc, #160]	@ (80008e0 <MX_TIM1_Init+0x138>)
 8000840:	f001 fbd1 	bl	8001fe6 <HAL_TIM_PWM_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800084a:	f000 f8dd 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000856:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800085a:	4619      	mov	r1, r3
 800085c:	4820      	ldr	r0, [pc, #128]	@ (80008e0 <MX_TIM1_Init+0x138>)
 800085e:	f002 f92d 	bl	8002abc <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000868:	f000 f8ce 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086c:	2360      	movs	r3, #96	@ 0x60
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088c:	2200      	movs	r2, #0
 800088e:	4619      	mov	r1, r3
 8000890:	4813      	ldr	r0, [pc, #76]	@ (80008e0 <MX_TIM1_Init+0x138>)
 8000892:	f001 fcb1 	bl	80021f8 <HAL_TIM_PWM_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800089c:	f000 f8b4 	bl	8000a08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <MX_TIM1_Init+0x138>)
 80008c4:	f002 f968 	bl	8002b98 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80008ce:	f000 f89b 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d2:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <MX_TIM1_Init+0x138>)
 80008d4:	f000 f8e8 	bl	8000aa8 <HAL_TIM_MspPostInit>

}
 80008d8:	bf00      	nop
 80008da:	3758      	adds	r7, #88	@ 0x58
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000084 	.word	0x20000084
 80008e4:	40010000 	.word	0x40010000

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <MX_USART2_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000920:	f002 f98c 	bl	8002c3c <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f000 f86d 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000cc 	.word	0x200000cc
 8000938:	40004400 	.word	0x40004400

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <MX_GPIO_Init+0xc0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a28      	ldr	r2, [pc, #160]	@ (80009fc <MX_GPIO_Init+0xc0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <MX_GPIO_Init+0xc0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <MX_GPIO_Init+0xc0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <MX_GPIO_Init+0xc0>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <MX_GPIO_Init+0xc0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <MX_GPIO_Init+0xc0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a1a      	ldr	r2, [pc, #104]	@ (80009fc <MX_GPIO_Init+0xc0>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_GPIO_Init+0xc0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2180      	movs	r1, #128	@ 0x80
 80009aa:	4815      	ldr	r0, [pc, #84]	@ (8000a00 <MX_GPIO_Init+0xc4>)
 80009ac:	f000 fe5a 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2140      	movs	r1, #64	@ 0x40
 80009b4:	4813      	ldr	r0, [pc, #76]	@ (8000a04 <MX_GPIO_Init+0xc8>)
 80009b6:	f000 fe55 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Motor1_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin;
 80009ba:	2380      	movs	r3, #128	@ 0x80
 80009bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Motor1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <MX_GPIO_Init+0xc4>)
 80009d2:	f000 fcc3 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor2_Pin */
  GPIO_InitStruct.Pin = Motor2_Pin;
 80009d6:	2340      	movs	r3, #64	@ 0x40
 80009d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009de:	2301      	movs	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Motor2_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_GPIO_Init+0xc8>)
 80009ee:	f000 fcb5 	bl	800135c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020400 	.word	0x40020400

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	4a0f      	ldr	r2, [pc, #60]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10d      	bne.n	8000a92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <HAL_TIM_Base_MspInit+0x40>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	4a09      	ldr	r2, [pc, #36]	@ (8000aa4 <HAL_TIM_Base_MspInit+0x40>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a86:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <HAL_TIM_Base_MspInit+0x40>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40010000 	.word	0x40010000
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <HAL_TIM_MspPostInit+0x68>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d11e      	bne.n	8000b08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <HAL_TIM_MspPostInit+0x6c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <HAL_TIM_MspPostInit+0x6c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <HAL_TIM_MspPostInit+0x6c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MotorSpeed_Pin;
 8000ae6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorSpeed_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <HAL_TIM_MspPostInit+0x70>)
 8000b04:	f000 fc2a 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40010000 	.word	0x40010000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb0 <HAL_UART_MspInit+0x94>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d133      	bne.n	8000ba6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <HAL_UART_MspInit+0x98>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb4 <HAL_UART_MspInit+0x98>)
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_UART_MspInit+0x98>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <HAL_UART_MspInit+0x98>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <HAL_UART_MspInit+0x98>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_UART_MspInit+0x98>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b76:	230c      	movs	r3, #12
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b86:	2307      	movs	r3, #7
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4809      	ldr	r0, [pc, #36]	@ (8000bb8 <HAL_UART_MspInit+0x9c>)
 8000b92:	f000 fbe3 	bl	800135c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2026      	movs	r0, #38	@ 0x26
 8000b9c:	f000 fb15 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba0:	2026      	movs	r0, #38	@ 0x26
 8000ba2:	f000 fb2e 	bl	8001202 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	@ 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c12:	f000 f9df 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <USART2_IRQHandler+0x10>)
 8000c22:	f002 f90b 	bl	8002e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000cc 	.word	0x200000cc

08000c30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e00a      	b.n	8000c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c42:	f3af 8000 	nop.w
 8000c46:	4601      	mov	r1, r0
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf0      	blt.n	8000c42 <_read+0x12>
  }

  return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c92:	605a      	str	r2, [r3, #4]
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f003 f966 	bl	8003fd4 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20020000 	.word	0x20020000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000114 	.word	0x20000114
 8000d3c:	20000318 	.word	0x20000318

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <_write>:
uint8_t rxCharacter;
uint8_t rxBuffer[rxBufferMax];//circle Buffer
int rxBufferReadIndex;//읽기 위치
int rxBufferWriteIndex;//쓰기 위치

int _write(int file, char* p, int len){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t *)p, len, 10);
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <_write+0x28>)
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	230a      	movs	r3, #10
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	f001 ffae 	bl	8002cdc <HAL_UART_Transmit>
	return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000118 	.word	0x20000118

08000d90 <HAL_UART_RxCpltCallback>:


//수신 인터럽트(interrupt=event) 콜백(listner, isr)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	//수신된 문자 저장
	rxBuffer[rxBufferWriteIndex++]=rxCharacter;
 8000d98:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_UART_RxCpltCallback+0x4c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	490f      	ldr	r1, [pc, #60]	@ (8000ddc <HAL_UART_RxCpltCallback+0x4c>)
 8000da0:	600a      	str	r2, [r1, #0]
 8000da2:	4a0f      	ldr	r2, [pc, #60]	@ (8000de0 <HAL_UART_RxCpltCallback+0x50>)
 8000da4:	7811      	ldrb	r1, [r2, #0]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <HAL_UART_RxCpltCallback+0x54>)
 8000da8:	54d1      	strb	r1, [r2, r3]
	//최대값 도달 시 처음으로
	rxBufferWriteIndex %=rxBufferMax;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_UART_RxCpltCallback+0x4c>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_UART_RxCpltCallback+0x58>)
 8000db0:	fb83 1302 	smull	r1, r3, r3, r2
 8000db4:	1159      	asrs	r1, r3, #5
 8000db6:	17d3      	asrs	r3, r2, #31
 8000db8:	1acb      	subs	r3, r1, r3
 8000dba:	2164      	movs	r1, #100	@ 0x64
 8000dbc:	fb01 f303 	mul.w	r3, r1, r3
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <HAL_UART_RxCpltCallback+0x4c>)
 8000dc4:	6013      	str	r3, [r2, #0]
	//인터럽트 재 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_UART_RxCpltCallback+0x5c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4904      	ldr	r1, [pc, #16]	@ (8000de0 <HAL_UART_RxCpltCallback+0x50>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 f80f 	bl	8002df2 <HAL_UART_Receive_IT>

}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000188 	.word	0x20000188
 8000de0:	2000011c 	.word	0x2000011c
 8000de4:	20000120 	.word	0x20000120
 8000de8:	51eb851f 	.word	0x51eb851f
 8000dec:	20000118 	.word	0x20000118

08000df0 <initUart>:


// uart 장치 초기
void initUart(UART_HandleTypeDef *inHuart){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	//uart 장치 주소 백업
	myHuart = inHuart;
 8000df8:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <initUart+0x24>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
	//인터럽트 셋팅
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <initUart+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2201      	movs	r2, #1
 8000e04:	4904      	ldr	r1, [pc, #16]	@ (8000e18 <initUart+0x28>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fff3 	bl	8002df2 <HAL_UART_Receive_IT>

}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000118 	.word	0x20000118
 8000e18:	2000011c 	.word	0x2000011c

08000e1c <getUart>:

char getUart(){
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
	char result;
	if(rxBufferReadIndex == rxBufferWriteIndex) return 0;
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <getUart+0x50>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <getUart+0x54>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d101      	bne.n	8000e32 <getUart+0x16>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e016      	b.n	8000e60 <getUart+0x44>
	result = rxBuffer[rxBufferReadIndex++];
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <getUart+0x50>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <getUart+0x50>)
 8000e3a:	600a      	str	r2, [r1, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <getUart+0x58>)
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	71fb      	strb	r3, [r7, #7]
	rxBufferReadIndex %=rxBufferMax;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <getUart+0x50>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <getUart+0x5c>)
 8000e48:	fb83 1302 	smull	r1, r3, r3, r2
 8000e4c:	1159      	asrs	r1, r3, #5
 8000e4e:	17d3      	asrs	r3, r2, #31
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	2164      	movs	r1, #100	@ 0x64
 8000e54:	fb01 f303 	mul.w	r3, r1, r3
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <getUart+0x50>)
 8000e5c:	6013      	str	r3, [r2, #0]
	return result;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	20000184 	.word	0x20000184
 8000e70:	20000188 	.word	0x20000188
 8000e74:	20000120 	.word	0x20000120
 8000e78:	51eb851f 	.word	0x51eb851f

08000e7c <getMessage>:

char* getMessage(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
	static char message[50];
	static uint8_t messageCount=0;
	char ch = getUart();
 8000e82:	f7ff ffcb 	bl	8000e1c <getUart>
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if(ch!=0){
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01b      	beq.n	8000ec8 <getMessage+0x4c>
		if(ch=='\n'||ch=='\r'){
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b0a      	cmp	r3, #10
 8000e94:	d002      	beq.n	8000e9c <getMessage+0x20>
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b0d      	cmp	r3, #13
 8000e9a:	d108      	bne.n	8000eae <getMessage+0x32>
			messageCount =0;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <getMessage+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
			memset(message, 0, 50);
 8000ea2:	2232      	movs	r2, #50	@ 0x32
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <getMessage+0x5c>)
 8000ea8:	f003 f88c 	bl	8003fc4 <memset>
 8000eac:	e00c      	b.n	8000ec8 <getMessage+0x4c>
		}
		else if(ch>=0x20){
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b1f      	cmp	r3, #31
 8000eb2:	d909      	bls.n	8000ec8 <getMessage+0x4c>
			message[messageCount++]=ch;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <getMessage+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	b2d1      	uxtb	r1, r2
 8000ebc:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <getMessage+0x58>)
 8000ebe:	7011      	strb	r1, [r2, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4a05      	ldr	r2, [pc, #20]	@ (8000ed8 <getMessage+0x5c>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	5453      	strb	r3, [r2, r1]
		}
	}
	return message;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <getMessage+0x5c>)

}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000018c 	.word	0x2000018c
 8000ed8:	20000190 	.word	0x20000190

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee0:	f7ff ff2e 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f003 f869 	bl	8003fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f7ff fbdd 	bl	80006cc <main>
  bx  lr    
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f20:	08004e04 	.word	0x08004e04
  ldr r2, =_sbss
 8000f24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f28:	20000314 	.word	0x20000314

08000f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <HAL_Init+0x40>)
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <HAL_Init+0x40>)
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <HAL_Init+0x40>)
 8000f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f92b 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	200f      	movs	r0, #15
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fd56 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023c00 	.word	0x40023c00

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f943 	bl	800121e <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fb0:	f000 f90b 	bl	80011ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	@ (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	200001c4 	.word	0x200001c4

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200001c4 	.word	0x200001c4

08001014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800103c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <__NVIC_GetPriorityGrouping+0x18>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0307 	and.w	r3, r3, #7
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db0b      	blt.n	80010a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	4907      	ldr	r1, [pc, #28]	@ (80010b0 <__NVIC_EnableIRQ+0x38>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	@ (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	@ (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	@ 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	@ 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001194:	f7ff ff8e 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff29 	bl	8001014 <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff3e 	bl	800105c <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff8e 	bl	8001108 <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5d 	bl	80010b4 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff31 	bl	8001078 <__NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffa2 	bl	8001170 <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff feda 	bl	8000ffc <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d008      	beq.n	8001268 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e052      	b.n	800130e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0216 	bic.w	r2, r2, #22
 8001276:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001286:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	2b00      	cmp	r3, #0
 800128e:	d103      	bne.n	8001298 <HAL_DMA_Abort+0x62>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0208 	bic.w	r2, r2, #8
 80012a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b8:	e013      	b.n	80012e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ba:	f7ff fe9f 	bl	8000ffc <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d90c      	bls.n	80012e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2220      	movs	r2, #32
 80012cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e015      	b.n	800130e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e4      	bne.n	80012ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f4:	223f      	movs	r2, #63	@ 0x3f
 80012f6:	409a      	lsls	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d004      	beq.n	8001334 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2280      	movs	r2, #128	@ 0x80
 800132e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e00c      	b.n	800134e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2205      	movs	r2, #5
 8001338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0201 	bic.w	r2, r2, #1
 800134a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e159      	b.n	800162c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8148 	bne.w	8001626 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d005      	beq.n	80013ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d130      	bne.n	8001410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b03      	cmp	r3, #3
 800141a:	d017      	beq.n	800144c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a2 	beq.w	8001626 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b57      	ldr	r3, [pc, #348]	@ (8001644 <HAL_GPIO_Init+0x2e8>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a56      	ldr	r2, [pc, #344]	@ (8001644 <HAL_GPIO_Init+0x2e8>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b54      	ldr	r3, [pc, #336]	@ (8001644 <HAL_GPIO_Init+0x2e8>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fe:	4a52      	ldr	r2, [pc, #328]	@ (8001648 <HAL_GPIO_Init+0x2ec>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a49      	ldr	r2, [pc, #292]	@ (800164c <HAL_GPIO_Init+0x2f0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d019      	beq.n	800155e <HAL_GPIO_Init+0x202>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a48      	ldr	r2, [pc, #288]	@ (8001650 <HAL_GPIO_Init+0x2f4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x1fe>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a47      	ldr	r2, [pc, #284]	@ (8001654 <HAL_GPIO_Init+0x2f8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x1fa>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a46      	ldr	r2, [pc, #280]	@ (8001658 <HAL_GPIO_Init+0x2fc>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x1f6>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a45      	ldr	r2, [pc, #276]	@ (800165c <HAL_GPIO_Init+0x300>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x1f2>
 800154a:	2304      	movs	r3, #4
 800154c:	e008      	b.n	8001560 <HAL_GPIO_Init+0x204>
 800154e:	2307      	movs	r3, #7
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x204>
 8001552:	2303      	movs	r3, #3
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x204>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x204>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x204>
 800155e:	2300      	movs	r3, #0
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001570:	4935      	ldr	r1, [pc, #212]	@ (8001648 <HAL_GPIO_Init+0x2ec>)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157e:	4b38      	ldr	r3, [pc, #224]	@ (8001660 <HAL_GPIO_Init+0x304>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001660 <HAL_GPIO_Init+0x304>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <HAL_GPIO_Init+0x304>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015cc:	4a24      	ldr	r2, [pc, #144]	@ (8001660 <HAL_GPIO_Init+0x304>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d2:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <HAL_GPIO_Init+0x304>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001660 <HAL_GPIO_Init+0x304>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_GPIO_Init+0x304>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001620:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_GPIO_Init+0x304>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	f67f aea2 	bls.w	8001378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	40013800 	.word	0x40013800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40020800 	.word	0x40020800
 8001658:	40020c00 	.word	0x40020c00
 800165c:	40021000 	.word	0x40021000
 8001660:	40013c00 	.word	0x40013c00

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e267      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d075      	beq.n	80017a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016b6:	4b88      	ldr	r3, [pc, #544]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d00c      	beq.n	80016dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c2:	4b85      	ldr	r3, [pc, #532]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d112      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ce:	4b82      	ldr	r3, [pc, #520]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016da:	d10b      	bne.n	80016f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	4b7e      	ldr	r3, [pc, #504]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d05b      	beq.n	80017a0 <HAL_RCC_OscConfig+0x108>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d157      	bne.n	80017a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e242      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fc:	d106      	bne.n	800170c <HAL_RCC_OscConfig+0x74>
 80016fe:	4b76      	ldr	r3, [pc, #472]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a75      	ldr	r2, [pc, #468]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b70      	ldr	r3, [pc, #448]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6f      	ldr	r2, [pc, #444]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6d      	ldr	r3, [pc, #436]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6c      	ldr	r2, [pc, #432]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xb0>
 8001730:	4b69      	ldr	r3, [pc, #420]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a68      	ldr	r2, [pc, #416]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b66      	ldr	r3, [pc, #408]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a65      	ldr	r2, [pc, #404]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fc54 	bl	8000ffc <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fc50 	bl	8000ffc <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e207      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b5b      	ldr	r3, [pc, #364]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xc0>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fc40 	bl	8000ffc <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fc3c 	bl	8000ffc <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	@ 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1f3      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b51      	ldr	r3, [pc, #324]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0xe8>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ae:	4b4a      	ldr	r3, [pc, #296]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b47      	ldr	r3, [pc, #284]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	4b44      	ldr	r3, [pc, #272]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1c7      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4937      	ldr	r1, [pc, #220]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <HAL_RCC_OscConfig+0x244>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff fbf5 	bl	8000ffc <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fbf1 	bl	8000ffc <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1a8      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4925      	ldr	r1, [pc, #148]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <HAL_RCC_OscConfig+0x244>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fbd4 	bl	8000ffc <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fbd0 	bl	8000ffc <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e187      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d036      	beq.n	80018f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d016      	beq.n	80018b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <HAL_RCC_OscConfig+0x248>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff fbb4 	bl	8000ffc <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fbb0 	bl	8000ffc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e167      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HAL_RCC_OscConfig+0x240>)
 80018ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x200>
 80018b6:	e01b      	b.n	80018f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_RCC_OscConfig+0x248>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff fb9d 	bl	8000ffc <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	e00e      	b.n	80018e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff fb99 	bl	8000ffc <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d907      	bls.n	80018e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e150      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
 80018d8:	40023800 	.word	0x40023800
 80018dc:	42470000 	.word	0x42470000
 80018e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e4:	4b88      	ldr	r3, [pc, #544]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 80018e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ea      	bne.n	80018c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8097 	beq.w	8001a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	4b81      	ldr	r3, [pc, #516]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	4b7d      	ldr	r3, [pc, #500]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a7c      	ldr	r2, [pc, #496]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b77      	ldr	r3, [pc, #476]	@ (8001b0c <HAL_RCC_OscConfig+0x474>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b74      	ldr	r3, [pc, #464]	@ (8001b0c <HAL_RCC_OscConfig+0x474>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a73      	ldr	r2, [pc, #460]	@ (8001b0c <HAL_RCC_OscConfig+0x474>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7ff fb59 	bl	8000ffc <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff fb55 	bl	8000ffc <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e10c      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b6a      	ldr	r3, [pc, #424]	@ (8001b0c <HAL_RCC_OscConfig+0x474>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x2ea>
 8001974:	4b64      	ldr	r3, [pc, #400]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001978:	4a63      	ldr	r2, [pc, #396]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001980:	e01c      	b.n	80019bc <HAL_RCC_OscConfig+0x324>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x30c>
 800198a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	4a5e      	ldr	r2, [pc, #376]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	@ 0x70
 8001996:	4b5c      	ldr	r3, [pc, #368]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	4a5b      	ldr	r2, [pc, #364]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x324>
 80019a4:	4b58      	ldr	r3, [pc, #352]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a8:	4a57      	ldr	r2, [pc, #348]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80019b0:	4b55      	ldr	r3, [pc, #340]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b4:	4a54      	ldr	r2, [pc, #336]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019b6:	f023 0304 	bic.w	r3, r3, #4
 80019ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d015      	beq.n	80019f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff fb1a 	bl	8000ffc <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff fb16 	bl	8000ffc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0cb      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	4b49      	ldr	r3, [pc, #292]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0ee      	beq.n	80019cc <HAL_RCC_OscConfig+0x334>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fb04 	bl	8000ffc <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff fb00 	bl	8000ffc <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0b5      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ee      	bne.n	80019f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b39      	ldr	r3, [pc, #228]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	4a38      	ldr	r2, [pc, #224]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a1 	beq.w	8001b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a36:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d05c      	beq.n	8001afc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d141      	bne.n	8001ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fad4 	bl	8000ffc <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fad0 	bl	8000ffc <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e087      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	491b      	ldr	r1, [pc, #108]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff faa9 	bl	8000ffc <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff faa5 	bl	8000ffc <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e05c      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x416>
 8001acc:	e054      	b.n	8001b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_RCC_OscConfig+0x478>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fa92 	bl	8000ffc <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fa8e 	bl	8000ffc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e045      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_RCC_OscConfig+0x470>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x444>
 8001afa:	e03d      	b.n	8001b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e038      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_RCC_OscConfig+0x4ec>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d028      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d121      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d11a      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d111      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0cc      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b68      	ldr	r3, [pc, #416]	@ (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d90c      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b65      	ldr	r3, [pc, #404]	@ (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b63      	ldr	r3, [pc, #396]	@ (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0b8      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bdc:	4b59      	ldr	r3, [pc, #356]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a58      	ldr	r2, [pc, #352]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001be6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf4:	4b53      	ldr	r3, [pc, #332]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a52      	ldr	r2, [pc, #328]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b50      	ldr	r3, [pc, #320]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	494d      	ldr	r1, [pc, #308]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d044      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b47      	ldr	r3, [pc, #284]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d119      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e07f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b3f      	ldr	r3, [pc, #252]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e06f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3b      	ldr	r3, [pc, #236]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e067      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b37      	ldr	r3, [pc, #220]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4934      	ldr	r1, [pc, #208]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff f9c0 	bl	8000ffc <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff f9bc 	bl	8000ffc <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e04f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d20c      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e032      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4916      	ldr	r1, [pc, #88]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	490e      	ldr	r1, [pc, #56]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d0e:	f000 f821 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	490a      	ldr	r1, [pc, #40]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f920 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08004ca8 	.word	0x08004ca8
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d58:	b090      	sub	sp, #64	@ 0x40
 8001d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d6c:	4b59      	ldr	r3, [pc, #356]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d00d      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x40>
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	f200 80a1 	bhi.w	8001ec0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x34>
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d86:	e09b      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d88:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d8c:	e09b      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d8e:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x188>)
 8001d90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d92:	e098      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d94:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d028      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001daa:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	099b      	lsrs	r3, r3, #6
 8001db0:	2200      	movs	r2, #0
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x188>)
 8001dc0:	fb03 f201 	mul.w	r2, r3, r1
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	fb00 f303 	mul.w	r3, r0, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a43      	ldr	r2, [pc, #268]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x188>)
 8001dce:	fba0 1202 	umull	r1, r2, r0, r2
 8001dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dda:	4413      	add	r3, r2
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de0:	2200      	movs	r2, #0
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	61fa      	str	r2, [r7, #28]
 8001de6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dee:	f7fe fa4f 	bl	8000290 <__aeabi_uldivmod>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4613      	mov	r3, r2
 8001df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dfa:	e053      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfc:	4b35      	ldr	r3, [pc, #212]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	099b      	lsrs	r3, r3, #6
 8001e02:	2200      	movs	r2, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	617a      	str	r2, [r7, #20]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e0e:	f04f 0b00 	mov.w	fp, #0
 8001e12:	4652      	mov	r2, sl
 8001e14:	465b      	mov	r3, fp
 8001e16:	f04f 0000 	mov.w	r0, #0
 8001e1a:	f04f 0100 	mov.w	r1, #0
 8001e1e:	0159      	lsls	r1, r3, #5
 8001e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e24:	0150      	lsls	r0, r2, #5
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	ebb2 080a 	subs.w	r8, r2, sl
 8001e2e:	eb63 090b 	sbc.w	r9, r3, fp
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e46:	ebb2 0408 	subs.w	r4, r2, r8
 8001e4a:	eb63 0509 	sbc.w	r5, r3, r9
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	00eb      	lsls	r3, r5, #3
 8001e58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e5c:	00e2      	lsls	r2, r4, #3
 8001e5e:	4614      	mov	r4, r2
 8001e60:	461d      	mov	r5, r3
 8001e62:	eb14 030a 	adds.w	r3, r4, sl
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	eb45 030b 	adc.w	r3, r5, fp
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	028b      	lsls	r3, r1, #10
 8001e7e:	4621      	mov	r1, r4
 8001e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e84:	4621      	mov	r1, r4
 8001e86:	028a      	lsls	r2, r1, #10
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	60fa      	str	r2, [r7, #12]
 8001e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e98:	f7fe f9fa 	bl	8000290 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	0c1b      	lsrs	r3, r3, #16
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001eb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ebe:	e002      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3740      	adds	r7, #64	@ 0x40
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	017d7840 	.word	0x017d7840

08001ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	@ (8001ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001efc:	f7ff fff0 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0a9b      	lsrs	r3, r3, #10
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	@ (8001f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	08004cb8 	.word	0x08004cb8

08001f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f24:	f7ff ffdc 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	0b5b      	lsrs	r3, r3, #13
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4903      	ldr	r1, [pc, #12]	@ (8001f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08004cb8 	.word	0x08004cb8

08001f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e041      	b.n	8001fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fd78 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3304      	adds	r3, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f000 fac0 	bl	800250c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e041      	b.n	800207c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d106      	bne.n	8002012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f839 	bl	8002084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f000 fa71 	bl	800250c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_TIM_PWM_Start+0x24>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e022      	b.n	8002102 <HAL_TIM_PWM_Start+0x6a>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d109      	bne.n	80020d6 <HAL_TIM_PWM_Start+0x3e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	bf14      	ite	ne
 80020ce:	2301      	movne	r3, #1
 80020d0:	2300      	moveq	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	e015      	b.n	8002102 <HAL_TIM_PWM_Start+0x6a>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d109      	bne.n	80020f0 <HAL_TIM_PWM_Start+0x58>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e008      	b.n	8002102 <HAL_TIM_PWM_Start+0x6a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e068      	b.n	80021dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d104      	bne.n	800211a <HAL_TIM_PWM_Start+0x82>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002118:	e013      	b.n	8002142 <HAL_TIM_PWM_Start+0xaa>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d104      	bne.n	800212a <HAL_TIM_PWM_Start+0x92>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002128:	e00b      	b.n	8002142 <HAL_TIM_PWM_Start+0xaa>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d104      	bne.n	800213a <HAL_TIM_PWM_Start+0xa2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002138:	e003      	b.n	8002142 <HAL_TIM_PWM_Start+0xaa>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fc90 	bl	8002a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a23      	ldr	r2, [pc, #140]	@ (80021e4 <HAL_TIM_PWM_Start+0x14c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d107      	bne.n	800216a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002168:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1d      	ldr	r2, [pc, #116]	@ (80021e4 <HAL_TIM_PWM_Start+0x14c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d018      	beq.n	80021a6 <HAL_TIM_PWM_Start+0x10e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217c:	d013      	beq.n	80021a6 <HAL_TIM_PWM_Start+0x10e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <HAL_TIM_PWM_Start+0x150>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_TIM_PWM_Start+0x10e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a17      	ldr	r2, [pc, #92]	@ (80021ec <HAL_TIM_PWM_Start+0x154>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_TIM_PWM_Start+0x10e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a16      	ldr	r2, [pc, #88]	@ (80021f0 <HAL_TIM_PWM_Start+0x158>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d004      	beq.n	80021a6 <HAL_TIM_PWM_Start+0x10e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <HAL_TIM_PWM_Start+0x15c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d111      	bne.n	80021ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b06      	cmp	r3, #6
 80021b6:	d010      	beq.n	80021da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c8:	e007      	b.n	80021da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40000800 	.word	0x40000800
 80021f0:	40000c00 	.word	0x40000c00
 80021f4:	40014000 	.word	0x40014000

080021f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002212:	2302      	movs	r3, #2
 8002214:	e0ae      	b.n	8002374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	f200 809f 	bhi.w	8002364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002226:	a201      	add	r2, pc, #4	@ (adr r2, 800222c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	08002261 	.word	0x08002261
 8002230:	08002365 	.word	0x08002365
 8002234:	08002365 	.word	0x08002365
 8002238:	08002365 	.word	0x08002365
 800223c:	080022a1 	.word	0x080022a1
 8002240:	08002365 	.word	0x08002365
 8002244:	08002365 	.word	0x08002365
 8002248:	08002365 	.word	0x08002365
 800224c:	080022e3 	.word	0x080022e3
 8002250:	08002365 	.word	0x08002365
 8002254:	08002365 	.word	0x08002365
 8002258:	08002365 	.word	0x08002365
 800225c:	08002323 	.word	0x08002323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f9dc 	bl	8002624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0208 	orr.w	r2, r2, #8
 800227a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0204 	bic.w	r2, r2, #4
 800228a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6999      	ldr	r1, [r3, #24]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	619a      	str	r2, [r3, #24]
      break;
 800229e:	e064      	b.n	800236a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fa22 	bl	80026f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6999      	ldr	r1, [r3, #24]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	021a      	lsls	r2, r3, #8
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	619a      	str	r2, [r3, #24]
      break;
 80022e0:	e043      	b.n	800236a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fa6d 	bl	80027c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0208 	orr.w	r2, r2, #8
 80022fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0204 	bic.w	r2, r2, #4
 800230c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69d9      	ldr	r1, [r3, #28]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	61da      	str	r2, [r3, #28]
      break;
 8002320:	e023      	b.n	800236a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fab7 	bl	800289c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800234c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69d9      	ldr	r1, [r3, #28]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	021a      	lsls	r2, r3, #8
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	61da      	str	r2, [r3, #28]
      break;
 8002362:	e002      	b.n	800236a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	75fb      	strb	r3, [r7, #23]
      break;
 8002368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002372:	7dfb      	ldrb	r3, [r7, #23]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_TIM_ConfigClockSource+0x1c>
 8002394:	2302      	movs	r3, #2
 8002396:	e0b4      	b.n	8002502 <HAL_TIM_ConfigClockSource+0x186>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023d0:	d03e      	beq.n	8002450 <HAL_TIM_ConfigClockSource+0xd4>
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023d6:	f200 8087 	bhi.w	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023de:	f000 8086 	beq.w	80024ee <HAL_TIM_ConfigClockSource+0x172>
 80023e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e6:	d87f      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b70      	cmp	r3, #112	@ 0x70
 80023ea:	d01a      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0xa6>
 80023ec:	2b70      	cmp	r3, #112	@ 0x70
 80023ee:	d87b      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b60      	cmp	r3, #96	@ 0x60
 80023f2:	d050      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x11a>
 80023f4:	2b60      	cmp	r3, #96	@ 0x60
 80023f6:	d877      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023f8:	2b50      	cmp	r3, #80	@ 0x50
 80023fa:	d03c      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0xfa>
 80023fc:	2b50      	cmp	r3, #80	@ 0x50
 80023fe:	d873      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002400:	2b40      	cmp	r3, #64	@ 0x40
 8002402:	d058      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002404:	2b40      	cmp	r3, #64	@ 0x40
 8002406:	d86f      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002408:	2b30      	cmp	r3, #48	@ 0x30
 800240a:	d064      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 800240c:	2b30      	cmp	r3, #48	@ 0x30
 800240e:	d86b      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002410:	2b20      	cmp	r3, #32
 8002412:	d060      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002414:	2b20      	cmp	r3, #32
 8002416:	d867      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d05c      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 800241c:	2b10      	cmp	r3, #16
 800241e:	d05a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002420:	e062      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002432:	f000 fafd 	bl	8002a30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	609a      	str	r2, [r3, #8]
      break;
 800244e:	e04f      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002460:	f000 fae6 	bl	8002a30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002472:	609a      	str	r2, [r3, #8]
      break;
 8002474:	e03c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002482:	461a      	mov	r2, r3
 8002484:	f000 fa5a 	bl	800293c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2150      	movs	r1, #80	@ 0x50
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fab3 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 8002494:	e02c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024a2:	461a      	mov	r2, r3
 80024a4:	f000 fa79 	bl	800299a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2160      	movs	r1, #96	@ 0x60
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 faa3 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80024b4:	e01c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c2:	461a      	mov	r2, r3
 80024c4:	f000 fa3a 	bl	800293c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2140      	movs	r1, #64	@ 0x40
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fa93 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80024d4:	e00c      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	4610      	mov	r0, r2
 80024e2:	f000 fa8a 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80024e6:	e003      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e000      	b.n	80024f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a3a      	ldr	r2, [pc, #232]	@ (8002608 <TIM_Base_SetConfig+0xfc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d00f      	beq.n	8002544 <TIM_Base_SetConfig+0x38>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252a:	d00b      	beq.n	8002544 <TIM_Base_SetConfig+0x38>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a37      	ldr	r2, [pc, #220]	@ (800260c <TIM_Base_SetConfig+0x100>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d007      	beq.n	8002544 <TIM_Base_SetConfig+0x38>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a36      	ldr	r2, [pc, #216]	@ (8002610 <TIM_Base_SetConfig+0x104>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d003      	beq.n	8002544 <TIM_Base_SetConfig+0x38>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a35      	ldr	r2, [pc, #212]	@ (8002614 <TIM_Base_SetConfig+0x108>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d108      	bne.n	8002556 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800254a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a2b      	ldr	r2, [pc, #172]	@ (8002608 <TIM_Base_SetConfig+0xfc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01b      	beq.n	8002596 <TIM_Base_SetConfig+0x8a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002564:	d017      	beq.n	8002596 <TIM_Base_SetConfig+0x8a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a28      	ldr	r2, [pc, #160]	@ (800260c <TIM_Base_SetConfig+0x100>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <TIM_Base_SetConfig+0x8a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a27      	ldr	r2, [pc, #156]	@ (8002610 <TIM_Base_SetConfig+0x104>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00f      	beq.n	8002596 <TIM_Base_SetConfig+0x8a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a26      	ldr	r2, [pc, #152]	@ (8002614 <TIM_Base_SetConfig+0x108>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00b      	beq.n	8002596 <TIM_Base_SetConfig+0x8a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a25      	ldr	r2, [pc, #148]	@ (8002618 <TIM_Base_SetConfig+0x10c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <TIM_Base_SetConfig+0x8a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a24      	ldr	r2, [pc, #144]	@ (800261c <TIM_Base_SetConfig+0x110>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d003      	beq.n	8002596 <TIM_Base_SetConfig+0x8a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a23      	ldr	r2, [pc, #140]	@ (8002620 <TIM_Base_SetConfig+0x114>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d108      	bne.n	80025a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800259c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002608 <TIM_Base_SetConfig+0xfc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d103      	bne.n	80025dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f023 0201 	bic.w	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	611a      	str	r2, [r3, #16]
  }
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40010000 	.word	0x40010000
 800260c:	40000400 	.word	0x40000400
 8002610:	40000800 	.word	0x40000800
 8002614:	40000c00 	.word	0x40000c00
 8002618:	40014000 	.word	0x40014000
 800261c:	40014400 	.word	0x40014400
 8002620:	40014800 	.word	0x40014800

08002624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f023 0201 	bic.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f023 0302 	bic.w	r3, r3, #2
 800266c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a1c      	ldr	r2, [pc, #112]	@ (80026ec <TIM_OC1_SetConfig+0xc8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10c      	bne.n	800269a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0308 	bic.w	r3, r3, #8
 8002686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a13      	ldr	r2, [pc, #76]	@ (80026ec <TIM_OC1_SetConfig+0xc8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d111      	bne.n	80026c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	621a      	str	r2, [r3, #32]
}
 80026e0:	bf00      	nop
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40010000 	.word	0x40010000

080026f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f023 0210 	bic.w	r2, r3, #16
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800271e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0320 	bic.w	r3, r3, #32
 800273a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a1e      	ldr	r2, [pc, #120]	@ (80027c4 <TIM_OC2_SetConfig+0xd4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10d      	bne.n	800276c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800276a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a15      	ldr	r2, [pc, #84]	@ (80027c4 <TIM_OC2_SetConfig+0xd4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d113      	bne.n	800279c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800277a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	621a      	str	r2, [r3, #32]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40010000 	.word	0x40010000

080027c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0303 	bic.w	r3, r3, #3
 80027fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <TIM_OC3_SetConfig+0xd0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10d      	bne.n	8002842 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800282c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a14      	ldr	r2, [pc, #80]	@ (8002898 <TIM_OC3_SetConfig+0xd0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d113      	bne.n	8002872 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	621a      	str	r2, [r3, #32]
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40010000 	.word	0x40010000

0800289c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	031b      	lsls	r3, r3, #12
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a10      	ldr	r2, [pc, #64]	@ (8002938 <TIM_OC4_SetConfig+0x9c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d109      	bne.n	8002910 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	621a      	str	r2, [r3, #32]
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40010000 	.word	0x40010000

0800293c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0201 	bic.w	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f023 030a 	bic.w	r3, r3, #10
 8002978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299a:	b480      	push	{r7}
 800299c:	b087      	sub	sp, #28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f023 0210 	bic.w	r2, r3, #16
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	031b      	lsls	r3, r3, #12
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f043 0307 	orr.w	r3, r3, #7
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	021a      	lsls	r2, r3, #8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2201      	movs	r2, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1a      	ldr	r2, [r3, #32]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e050      	b.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1c      	ldr	r2, [pc, #112]	@ (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d018      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b20:	d013      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a18      	ldr	r2, [pc, #96]	@ (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00e      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a16      	ldr	r2, [pc, #88]	@ (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a15      	ldr	r2, [pc, #84]	@ (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a13      	ldr	r2, [pc, #76]	@ (8002b94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10c      	bne.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40014000 	.word	0x40014000

08002b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e03d      	b.n	8002c30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e042      	b.n	8002cd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fd ff5a 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	@ 0x24
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fdbd 	bl	8003800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	@ 0x28
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d175      	bne.n	8002de8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_UART_Transmit+0x2c>
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e06e      	b.n	8002dea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2221      	movs	r2, #33	@ 0x21
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe f96f 	bl	8000ffc <HAL_GetTick>
 8002d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d34:	d108      	bne.n	8002d48 <HAL_UART_Transmit+0x6c>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d104      	bne.n	8002d48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	e003      	b.n	8002d50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d50:	e02e      	b.n	8002db0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2180      	movs	r1, #128	@ 0x80
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fb1f 	bl	80033a0 <UART_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e03a      	b.n	8002dea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e007      	b.n	8002da2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1cb      	bne.n	8002d52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2140      	movs	r1, #64	@ 0x40
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 faeb 	bl	80033a0 <UART_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e006      	b.n	8002dea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d112      	bne.n	8002e32 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_UART_Receive_IT+0x26>
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e00b      	b.n	8002e34 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	461a      	mov	r2, r3
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fb12 	bl	8003452 <UART_Start_Receive_IT>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	e000      	b.n	8002e34 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b0ba      	sub	sp, #232	@ 0xe8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x66>
 8002e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fbf2 	bl	8003684 <UART_Receive_IT>
      return;
 8002ea0:	e25b      	b.n	800335a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80de 	beq.w	8003068 <HAL_UART_IRQHandler+0x22c>
 8002eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ebc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80d1 	beq.w	8003068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_UART_IRQHandler+0xae>
 8002ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_UART_IRQHandler+0xd2>
 8002ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	f043 0202 	orr.w	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_UART_IRQHandler+0xf6>
 8002f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d011      	beq.n	8002f62 <HAL_UART_IRQHandler+0x126>
 8002f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	f043 0208 	orr.w	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 81f2 	beq.w	8003350 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_UART_IRQHandler+0x14e>
 8002f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fb7d 	bl	8003684 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f94:	2b40      	cmp	r3, #64	@ 0x40
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x17a>
 8002fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d04f      	beq.n	8003056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa85 	bl	80034c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc6:	2b40      	cmp	r3, #64	@ 0x40
 8002fc8:	d141      	bne.n	800304e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3314      	adds	r3, #20
 8002ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800300e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1d9      	bne.n	8002fca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d013      	beq.n	8003046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	4a7e      	ldr	r2, [pc, #504]	@ (800321c <HAL_UART_IRQHandler+0x3e0>)
 8003024:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe f973 	bl	8001316 <HAL_DMA_Abort_IT>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003040:	4610      	mov	r0, r2
 8003042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	e00e      	b.n	8003064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f994 	bl	8003374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304c:	e00a      	b.n	8003064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f990 	bl	8003374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	e006      	b.n	8003064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f98c 	bl	8003374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003062:	e175      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003064:	bf00      	nop
    return;
 8003066:	e173      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	2b01      	cmp	r3, #1
 800306e:	f040 814f 	bne.w	8003310 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8148 	beq.w	8003310 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8141 	beq.w	8003310 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ae:	2b40      	cmp	r3, #64	@ 0x40
 80030b0:	f040 80b6 	bne.w	8003220 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8145 	beq.w	8003354 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030d2:	429a      	cmp	r2, r3
 80030d4:	f080 813e 	bcs.w	8003354 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ea:	f000 8088 	beq.w	80031fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800310c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800311a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800311e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003126:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d9      	bne.n	80030ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3314      	adds	r3, #20
 8003140:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800314a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800315e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003162:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003166:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e1      	bne.n	800313a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3314      	adds	r3, #20
 800317c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800318c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3314      	adds	r3, #20
 8003196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800319a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800319c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e3      	bne.n	8003176 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ce:	f023 0310 	bic.w	r3, r3, #16
 80031d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e3      	bne.n	80031bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe f81c 	bl	8001236 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800320c:	b29b      	uxth	r3, r3
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8b7 	bl	8003388 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800321a:	e09b      	b.n	8003354 <HAL_UART_IRQHandler+0x518>
 800321c:	0800358d 	.word	0x0800358d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003228:	b29b      	uxth	r3, r3
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 808e 	beq.w	8003358 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800323c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8089 	beq.w	8003358 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800325c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800326a:	647a      	str	r2, [r7, #68]	@ 0x44
 800326c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e3      	bne.n	8003246 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3314      	adds	r3, #20
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	623b      	str	r3, [r7, #32]
   return(result);
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3314      	adds	r3, #20
 800329e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80032a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e3      	bne.n	800327e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	330c      	adds	r3, #12
 80032ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	e853 3f00 	ldrex	r3, [r3]
 80032d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0310 	bic.w	r3, r3, #16
 80032da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032e8:	61fa      	str	r2, [r7, #28]
 80032ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	69b9      	ldr	r1, [r7, #24]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	e841 2300 	strex	r3, r2, [r1]
 80032f4:	617b      	str	r3, [r7, #20]
   return(result);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e3      	bne.n	80032c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003302:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003306:	4619      	mov	r1, r3
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f83d 	bl	8003388 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800330e:	e023      	b.n	8003358 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_UART_IRQHandler+0x4f4>
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f943 	bl	80035b4 <UART_Transmit_IT>
    return;
 800332e:	e014      	b.n	800335a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <HAL_UART_IRQHandler+0x51e>
 800333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f983 	bl	8003654 <UART_EndTransmit_IT>
    return;
 800334e:	e004      	b.n	800335a <HAL_UART_IRQHandler+0x51e>
    return;
 8003350:	bf00      	nop
 8003352:	e002      	b.n	800335a <HAL_UART_IRQHandler+0x51e>
      return;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <HAL_UART_IRQHandler+0x51e>
      return;
 8003358:	bf00      	nop
  }
}
 800335a:	37e8      	adds	r7, #232	@ 0xe8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b0:	e03b      	b.n	800342a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b8:	d037      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fd fe1f 	bl	8000ffc <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	6a3a      	ldr	r2, [r7, #32]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e03a      	b.n	800344a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d023      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x8a>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b80      	cmp	r3, #128	@ 0x80
 80033e6:	d020      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x8a>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b40      	cmp	r3, #64	@ 0x40
 80033ec:	d01d      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d116      	bne.n	800342a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f857 	bl	80034c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2208      	movs	r2, #8
 800341c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4013      	ands	r3, r2
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	bf0c      	ite	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	2300      	movne	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	429a      	cmp	r2, r3
 8003446:	d0b4      	beq.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	4613      	mov	r3, r2
 800345e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	88fa      	ldrh	r2, [r7, #6]
 800346a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2222      	movs	r2, #34	@ 0x22
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003496:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b095      	sub	sp, #84	@ 0x54
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80034f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e5      	bne.n	80034ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	61fb      	str	r3, [r7, #28]
   return(result);
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3314      	adds	r3, #20
 8003520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e5      	bne.n	8003502 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	2b01      	cmp	r3, #1
 800353c:	d119      	bne.n	8003572 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	60bb      	str	r3, [r7, #8]
   return(result);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f023 0310 	bic.w	r3, r3, #16
 8003554:	647b      	str	r3, [r7, #68]	@ 0x44
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800355e:	61ba      	str	r2, [r7, #24]
 8003560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	6979      	ldr	r1, [r7, #20]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	613b      	str	r3, [r7, #16]
   return(result);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e5      	bne.n	800353e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003580:	bf00      	nop
 8003582:	3754      	adds	r7, #84	@ 0x54
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff fee4 	bl	8003374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b21      	cmp	r3, #33	@ 0x21
 80035c6:	d13e      	bne.n	8003646 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d0:	d114      	bne.n	80035fc <UART_Transmit_IT+0x48>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d110      	bne.n	80035fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	1c9a      	adds	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	621a      	str	r2, [r3, #32]
 80035fa:	e008      	b.n	800360e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6211      	str	r1, [r2, #32]
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29b      	uxth	r3, r3
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4619      	mov	r1, r3
 800361c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003630:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003640:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800366a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fe73 	bl	8003360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	@ 0x30
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b22      	cmp	r3, #34	@ 0x22
 8003696:	f040 80ae 	bne.w	80037f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a2:	d117      	bne.n	80036d4 <UART_Receive_IT+0x50>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d113      	bne.n	80036d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036cc:	1c9a      	adds	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80036d2:	e026      	b.n	8003722 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e6:	d007      	beq.n	80036f8 <UART_Receive_IT+0x74>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <UART_Receive_IT+0x82>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e008      	b.n	8003718 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003712:	b2da      	uxtb	r2, r3
 8003714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003716:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29b      	uxth	r3, r3
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	4619      	mov	r1, r3
 8003730:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003732:	2b00      	cmp	r3, #0
 8003734:	d15d      	bne.n	80037f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0220 	bic.w	r2, r2, #32
 8003744:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003754:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003778:	2b01      	cmp	r3, #1
 800377a:	d135      	bne.n	80037e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	613b      	str	r3, [r7, #16]
   return(result);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f023 0310 	bic.w	r3, r3, #16
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	330c      	adds	r3, #12
 80037a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a2:	623a      	str	r2, [r7, #32]
 80037a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	69f9      	ldr	r1, [r7, #28]
 80037a8:	6a3a      	ldr	r2, [r7, #32]
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e5      	bne.n	8003782 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d10a      	bne.n	80037da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff fdd1 	bl	8003388 <HAL_UARTEx_RxEventCallback>
 80037e6:	e002      	b.n	80037ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fad1 	bl	8000d90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e002      	b.n	80037f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037f6:	2302      	movs	r3, #2
  }
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3730      	adds	r7, #48	@ 0x30
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003804:	b0c0      	sub	sp, #256	@ 0x100
 8003806:	af00      	add	r7, sp, #0
 8003808:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	68d9      	ldr	r1, [r3, #12]
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	ea40 0301 	orr.w	r3, r0, r1
 8003828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	431a      	orrs	r2, r3
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	431a      	orrs	r2, r3
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003858:	f021 010c 	bic.w	r1, r1, #12
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003866:	430b      	orrs	r3, r1
 8003868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387a:	6999      	ldr	r1, [r3, #24]
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	ea40 0301 	orr.w	r3, r0, r1
 8003886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b8f      	ldr	r3, [pc, #572]	@ (8003acc <UART_SetConfig+0x2cc>)
 8003890:	429a      	cmp	r2, r3
 8003892:	d005      	beq.n	80038a0 <UART_SetConfig+0xa0>
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ad0 <UART_SetConfig+0x2d0>)
 800389c:	429a      	cmp	r2, r3
 800389e:	d104      	bne.n	80038aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038a0:	f7fe fb3e 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 80038a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038a8:	e003      	b.n	80038b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038aa:	f7fe fb25 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 80038ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038bc:	f040 810c 	bne.w	8003ad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	1891      	adds	r1, r2, r2
 80038d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038da:	415b      	adcs	r3, r3
 80038dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038e2:	4621      	mov	r1, r4
 80038e4:	eb12 0801 	adds.w	r8, r2, r1
 80038e8:	4629      	mov	r1, r5
 80038ea:	eb43 0901 	adc.w	r9, r3, r1
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003902:	4690      	mov	r8, r2
 8003904:	4699      	mov	r9, r3
 8003906:	4623      	mov	r3, r4
 8003908:	eb18 0303 	adds.w	r3, r8, r3
 800390c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003910:	462b      	mov	r3, r5
 8003912:	eb49 0303 	adc.w	r3, r9, r3
 8003916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003926:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800392a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800392e:	460b      	mov	r3, r1
 8003930:	18db      	adds	r3, r3, r3
 8003932:	653b      	str	r3, [r7, #80]	@ 0x50
 8003934:	4613      	mov	r3, r2
 8003936:	eb42 0303 	adc.w	r3, r2, r3
 800393a:	657b      	str	r3, [r7, #84]	@ 0x54
 800393c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003944:	f7fc fca4 	bl	8000290 <__aeabi_uldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4b61      	ldr	r3, [pc, #388]	@ (8003ad4 <UART_SetConfig+0x2d4>)
 800394e:	fba3 2302 	umull	r2, r3, r3, r2
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	011c      	lsls	r4, r3, #4
 8003956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003960:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003968:	4642      	mov	r2, r8
 800396a:	464b      	mov	r3, r9
 800396c:	1891      	adds	r1, r2, r2
 800396e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003970:	415b      	adcs	r3, r3
 8003972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003978:	4641      	mov	r1, r8
 800397a:	eb12 0a01 	adds.w	sl, r2, r1
 800397e:	4649      	mov	r1, r9
 8003980:	eb43 0b01 	adc.w	fp, r3, r1
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003998:	4692      	mov	sl, r2
 800399a:	469b      	mov	fp, r3
 800399c:	4643      	mov	r3, r8
 800399e:	eb1a 0303 	adds.w	r3, sl, r3
 80039a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039a6:	464b      	mov	r3, r9
 80039a8:	eb4b 0303 	adc.w	r3, fp, r3
 80039ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039c4:	460b      	mov	r3, r1
 80039c6:	18db      	adds	r3, r3, r3
 80039c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ca:	4613      	mov	r3, r2
 80039cc:	eb42 0303 	adc.w	r3, r2, r3
 80039d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039da:	f7fc fc59 	bl	8000290 <__aeabi_uldivmod>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4611      	mov	r1, r2
 80039e4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <UART_SetConfig+0x2d4>)
 80039e6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	2264      	movs	r2, #100	@ 0x64
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	1acb      	subs	r3, r1, r3
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039fa:	4b36      	ldr	r3, [pc, #216]	@ (8003ad4 <UART_SetConfig+0x2d4>)
 80039fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a08:	441c      	add	r4, r3
 8003a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	1891      	adds	r1, r2, r2
 8003a22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a24:	415b      	adcs	r3, r3
 8003a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a2c:	4641      	mov	r1, r8
 8003a2e:	1851      	adds	r1, r2, r1
 8003a30:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a32:	4649      	mov	r1, r9
 8003a34:	414b      	adcs	r3, r1
 8003a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a44:	4659      	mov	r1, fp
 8003a46:	00cb      	lsls	r3, r1, #3
 8003a48:	4651      	mov	r1, sl
 8003a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a4e:	4651      	mov	r1, sl
 8003a50:	00ca      	lsls	r2, r1, #3
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	4642      	mov	r2, r8
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a60:	464b      	mov	r3, r9
 8003a62:	460a      	mov	r2, r1
 8003a64:	eb42 0303 	adc.w	r3, r2, r3
 8003a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a80:	460b      	mov	r3, r1
 8003a82:	18db      	adds	r3, r3, r3
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a86:	4613      	mov	r3, r2
 8003a88:	eb42 0303 	adc.w	r3, r2, r3
 8003a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a96:	f7fc fbfb 	bl	8000290 <__aeabi_uldivmod>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <UART_SetConfig+0x2d4>)
 8003aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	2164      	movs	r1, #100	@ 0x64
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	3332      	adds	r3, #50	@ 0x32
 8003ab2:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <UART_SetConfig+0x2d4>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	f003 0207 	and.w	r2, r3, #7
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4422      	add	r2, r4
 8003ac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ac8:	e106      	b.n	8003cd8 <UART_SetConfig+0x4d8>
 8003aca:	bf00      	nop
 8003acc:	40011000 	.word	0x40011000
 8003ad0:	40011400 	.word	0x40011400
 8003ad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ae2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aea:	4642      	mov	r2, r8
 8003aec:	464b      	mov	r3, r9
 8003aee:	1891      	adds	r1, r2, r2
 8003af0:	6239      	str	r1, [r7, #32]
 8003af2:	415b      	adcs	r3, r3
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003afa:	4641      	mov	r1, r8
 8003afc:	1854      	adds	r4, r2, r1
 8003afe:	4649      	mov	r1, r9
 8003b00:	eb43 0501 	adc.w	r5, r3, r1
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	00eb      	lsls	r3, r5, #3
 8003b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b12:	00e2      	lsls	r2, r4, #3
 8003b14:	4614      	mov	r4, r2
 8003b16:	461d      	mov	r5, r3
 8003b18:	4643      	mov	r3, r8
 8003b1a:	18e3      	adds	r3, r4, r3
 8003b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b20:	464b      	mov	r3, r9
 8003b22:	eb45 0303 	adc.w	r3, r5, r3
 8003b26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b46:	4629      	mov	r1, r5
 8003b48:	008b      	lsls	r3, r1, #2
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b50:	4621      	mov	r1, r4
 8003b52:	008a      	lsls	r2, r1, #2
 8003b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b58:	f7fc fb9a 	bl	8000290 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4b60      	ldr	r3, [pc, #384]	@ (8003ce4 <UART_SetConfig+0x4e4>)
 8003b62:	fba3 2302 	umull	r2, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	011c      	lsls	r4, r3, #4
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	1891      	adds	r1, r2, r2
 8003b82:	61b9      	str	r1, [r7, #24]
 8003b84:	415b      	adcs	r3, r3
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	1851      	adds	r1, r2, r1
 8003b90:	6139      	str	r1, [r7, #16]
 8003b92:	4649      	mov	r1, r9
 8003b94:	414b      	adcs	r3, r1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	00cb      	lsls	r3, r1, #3
 8003ba8:	4651      	mov	r1, sl
 8003baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bae:	4651      	mov	r1, sl
 8003bb0:	00ca      	lsls	r2, r1, #3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4642      	mov	r2, r8
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003be4:	4649      	mov	r1, r9
 8003be6:	008b      	lsls	r3, r1, #2
 8003be8:	4641      	mov	r1, r8
 8003bea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bee:	4641      	mov	r1, r8
 8003bf0:	008a      	lsls	r2, r1, #2
 8003bf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bf6:	f7fc fb4b 	bl	8000290 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4b38      	ldr	r3, [pc, #224]	@ (8003ce4 <UART_SetConfig+0x4e4>)
 8003c02:	fba3 2301 	umull	r2, r3, r3, r1
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2264      	movs	r2, #100	@ 0x64
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	1acb      	subs	r3, r1, r3
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	@ 0x32
 8003c14:	4a33      	ldr	r2, [pc, #204]	@ (8003ce4 <UART_SetConfig+0x4e4>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c20:	441c      	add	r4, r3
 8003c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c26:	2200      	movs	r2, #0
 8003c28:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c40:	4641      	mov	r1, r8
 8003c42:	1851      	adds	r1, r2, r1
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	4649      	mov	r1, r9
 8003c48:	414b      	adcs	r3, r1
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c58:	4659      	mov	r1, fp
 8003c5a:	00cb      	lsls	r3, r1, #3
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c62:	4651      	mov	r1, sl
 8003c64:	00ca      	lsls	r2, r1, #3
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c72:	464b      	mov	r3, r9
 8003c74:	460a      	mov	r2, r1
 8003c76:	eb42 0303 	adc.w	r3, r2, r3
 8003c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c86:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c94:	4649      	mov	r1, r9
 8003c96:	008b      	lsls	r3, r1, #2
 8003c98:	4641      	mov	r1, r8
 8003c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	008a      	lsls	r2, r1, #2
 8003ca2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ca6:	f7fc faf3 	bl	8000290 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <UART_SetConfig+0x4e4>)
 8003cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	2164      	movs	r1, #100	@ 0x64
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	3332      	adds	r3, #50	@ 0x32
 8003cc2:	4a08      	ldr	r2, [pc, #32]	@ (8003ce4 <UART_SetConfig+0x4e4>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4422      	add	r2, r4
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce4:	51eb851f 	.word	0x51eb851f

08003ce8 <atoi>:
 8003ce8:	220a      	movs	r2, #10
 8003cea:	2100      	movs	r1, #0
 8003cec:	f000 b91e 	b.w	8003f2c <strtol>

08003cf0 <std>:
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8003cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cfe:	6083      	str	r3, [r0, #8]
 8003d00:	8181      	strh	r1, [r0, #12]
 8003d02:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d04:	81c2      	strh	r2, [r0, #14]
 8003d06:	6183      	str	r3, [r0, #24]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	305c      	adds	r0, #92	@ 0x5c
 8003d0e:	f000 f959 	bl	8003fc4 <memset>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <std+0x58>)
 8003d14:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <std+0x5c>)
 8003d18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <std+0x60>)
 8003d1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <std+0x64>)
 8003d20:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d22:	4b0d      	ldr	r3, [pc, #52]	@ (8003d58 <std+0x68>)
 8003d24:	6224      	str	r4, [r4, #32]
 8003d26:	429c      	cmp	r4, r3
 8003d28:	d006      	beq.n	8003d38 <std+0x48>
 8003d2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d2e:	4294      	cmp	r4, r2
 8003d30:	d002      	beq.n	8003d38 <std+0x48>
 8003d32:	33d0      	adds	r3, #208	@ 0xd0
 8003d34:	429c      	cmp	r4, r3
 8003d36:	d105      	bne.n	8003d44 <std+0x54>
 8003d38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d40:	f000 b972 	b.w	8004028 <__retarget_lock_init_recursive>
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	bf00      	nop
 8003d48:	08004881 	.word	0x08004881
 8003d4c:	080048a3 	.word	0x080048a3
 8003d50:	080048db 	.word	0x080048db
 8003d54:	080048ff 	.word	0x080048ff
 8003d58:	200001c8 	.word	0x200001c8

08003d5c <stdio_exit_handler>:
 8003d5c:	4a02      	ldr	r2, [pc, #8]	@ (8003d68 <stdio_exit_handler+0xc>)
 8003d5e:	4903      	ldr	r1, [pc, #12]	@ (8003d6c <stdio_exit_handler+0x10>)
 8003d60:	4803      	ldr	r0, [pc, #12]	@ (8003d70 <stdio_exit_handler+0x14>)
 8003d62:	f000 b8ed 	b.w	8003f40 <_fwalk_sglue>
 8003d66:	bf00      	nop
 8003d68:	2000000c 	.word	0x2000000c
 8003d6c:	08004819 	.word	0x08004819
 8003d70:	2000001c 	.word	0x2000001c

08003d74 <cleanup_stdio>:
 8003d74:	6841      	ldr	r1, [r0, #4]
 8003d76:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <cleanup_stdio+0x34>)
 8003d78:	4299      	cmp	r1, r3
 8003d7a:	b510      	push	{r4, lr}
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	d001      	beq.n	8003d84 <cleanup_stdio+0x10>
 8003d80:	f000 fd4a 	bl	8004818 <_fflush_r>
 8003d84:	68a1      	ldr	r1, [r4, #8]
 8003d86:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <cleanup_stdio+0x38>)
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	d002      	beq.n	8003d92 <cleanup_stdio+0x1e>
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f000 fd43 	bl	8004818 <_fflush_r>
 8003d92:	68e1      	ldr	r1, [r4, #12]
 8003d94:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <cleanup_stdio+0x3c>)
 8003d96:	4299      	cmp	r1, r3
 8003d98:	d004      	beq.n	8003da4 <cleanup_stdio+0x30>
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da0:	f000 bd3a 	b.w	8004818 <_fflush_r>
 8003da4:	bd10      	pop	{r4, pc}
 8003da6:	bf00      	nop
 8003da8:	200001c8 	.word	0x200001c8
 8003dac:	20000230 	.word	0x20000230
 8003db0:	20000298 	.word	0x20000298

08003db4 <global_stdio_init.part.0>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <global_stdio_init.part.0+0x30>)
 8003db8:	4c0b      	ldr	r4, [pc, #44]	@ (8003de8 <global_stdio_init.part.0+0x34>)
 8003dba:	4a0c      	ldr	r2, [pc, #48]	@ (8003dec <global_stdio_init.part.0+0x38>)
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	f7ff ff94 	bl	8003cf0 <std>
 8003dc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003dcc:	2201      	movs	r2, #1
 8003dce:	2109      	movs	r1, #9
 8003dd0:	f7ff ff8e 	bl	8003cf0 <std>
 8003dd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003dd8:	2202      	movs	r2, #2
 8003dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dde:	2112      	movs	r1, #18
 8003de0:	f7ff bf86 	b.w	8003cf0 <std>
 8003de4:	20000300 	.word	0x20000300
 8003de8:	200001c8 	.word	0x200001c8
 8003dec:	08003d5d 	.word	0x08003d5d

08003df0 <__sfp_lock_acquire>:
 8003df0:	4801      	ldr	r0, [pc, #4]	@ (8003df8 <__sfp_lock_acquire+0x8>)
 8003df2:	f000 b91a 	b.w	800402a <__retarget_lock_acquire_recursive>
 8003df6:	bf00      	nop
 8003df8:	20000305 	.word	0x20000305

08003dfc <__sfp_lock_release>:
 8003dfc:	4801      	ldr	r0, [pc, #4]	@ (8003e04 <__sfp_lock_release+0x8>)
 8003dfe:	f000 b915 	b.w	800402c <__retarget_lock_release_recursive>
 8003e02:	bf00      	nop
 8003e04:	20000305 	.word	0x20000305

08003e08 <__sinit>:
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	f7ff fff0 	bl	8003df0 <__sfp_lock_acquire>
 8003e10:	6a23      	ldr	r3, [r4, #32]
 8003e12:	b11b      	cbz	r3, 8003e1c <__sinit+0x14>
 8003e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e18:	f7ff bff0 	b.w	8003dfc <__sfp_lock_release>
 8003e1c:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <__sinit+0x28>)
 8003e1e:	6223      	str	r3, [r4, #32]
 8003e20:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <__sinit+0x2c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f5      	bne.n	8003e14 <__sinit+0xc>
 8003e28:	f7ff ffc4 	bl	8003db4 <global_stdio_init.part.0>
 8003e2c:	e7f2      	b.n	8003e14 <__sinit+0xc>
 8003e2e:	bf00      	nop
 8003e30:	08003d75 	.word	0x08003d75
 8003e34:	20000300 	.word	0x20000300

08003e38 <_strtol_l.constprop.0>:
 8003e38:	2b24      	cmp	r3, #36	@ 0x24
 8003e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3e:	4686      	mov	lr, r0
 8003e40:	4690      	mov	r8, r2
 8003e42:	d801      	bhi.n	8003e48 <_strtol_l.constprop.0+0x10>
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d106      	bne.n	8003e56 <_strtol_l.constprop.0+0x1e>
 8003e48:	f000 f8c4 	bl	8003fd4 <__errno>
 8003e4c:	2316      	movs	r3, #22
 8003e4e:	6003      	str	r3, [r0, #0]
 8003e50:	2000      	movs	r0, #0
 8003e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e56:	4834      	ldr	r0, [pc, #208]	@ (8003f28 <_strtol_l.constprop.0+0xf0>)
 8003e58:	460d      	mov	r5, r1
 8003e5a:	462a      	mov	r2, r5
 8003e5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e60:	5d06      	ldrb	r6, [r0, r4]
 8003e62:	f016 0608 	ands.w	r6, r6, #8
 8003e66:	d1f8      	bne.n	8003e5a <_strtol_l.constprop.0+0x22>
 8003e68:	2c2d      	cmp	r4, #45	@ 0x2d
 8003e6a:	d12d      	bne.n	8003ec8 <_strtol_l.constprop.0+0x90>
 8003e6c:	782c      	ldrb	r4, [r5, #0]
 8003e6e:	2601      	movs	r6, #1
 8003e70:	1c95      	adds	r5, r2, #2
 8003e72:	f033 0210 	bics.w	r2, r3, #16
 8003e76:	d109      	bne.n	8003e8c <_strtol_l.constprop.0+0x54>
 8003e78:	2c30      	cmp	r4, #48	@ 0x30
 8003e7a:	d12a      	bne.n	8003ed2 <_strtol_l.constprop.0+0x9a>
 8003e7c:	782a      	ldrb	r2, [r5, #0]
 8003e7e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003e82:	2a58      	cmp	r2, #88	@ 0x58
 8003e84:	d125      	bne.n	8003ed2 <_strtol_l.constprop.0+0x9a>
 8003e86:	786c      	ldrb	r4, [r5, #1]
 8003e88:	2310      	movs	r3, #16
 8003e8a:	3502      	adds	r5, #2
 8003e8c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003e90:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8003e94:	2200      	movs	r2, #0
 8003e96:	fbbc f9f3 	udiv	r9, ip, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	fb03 ca19 	mls	sl, r3, r9, ip
 8003ea0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003ea4:	2f09      	cmp	r7, #9
 8003ea6:	d81b      	bhi.n	8003ee0 <_strtol_l.constprop.0+0xa8>
 8003ea8:	463c      	mov	r4, r7
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	dd27      	ble.n	8003efe <_strtol_l.constprop.0+0xc6>
 8003eae:	1c57      	adds	r7, r2, #1
 8003eb0:	d007      	beq.n	8003ec2 <_strtol_l.constprop.0+0x8a>
 8003eb2:	4581      	cmp	r9, r0
 8003eb4:	d320      	bcc.n	8003ef8 <_strtol_l.constprop.0+0xc0>
 8003eb6:	d101      	bne.n	8003ebc <_strtol_l.constprop.0+0x84>
 8003eb8:	45a2      	cmp	sl, r4
 8003eba:	db1d      	blt.n	8003ef8 <_strtol_l.constprop.0+0xc0>
 8003ebc:	fb00 4003 	mla	r0, r0, r3, r4
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ec6:	e7eb      	b.n	8003ea0 <_strtol_l.constprop.0+0x68>
 8003ec8:	2c2b      	cmp	r4, #43	@ 0x2b
 8003eca:	bf04      	itt	eq
 8003ecc:	782c      	ldrbeq	r4, [r5, #0]
 8003ece:	1c95      	addeq	r5, r2, #2
 8003ed0:	e7cf      	b.n	8003e72 <_strtol_l.constprop.0+0x3a>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1da      	bne.n	8003e8c <_strtol_l.constprop.0+0x54>
 8003ed6:	2c30      	cmp	r4, #48	@ 0x30
 8003ed8:	bf0c      	ite	eq
 8003eda:	2308      	moveq	r3, #8
 8003edc:	230a      	movne	r3, #10
 8003ede:	e7d5      	b.n	8003e8c <_strtol_l.constprop.0+0x54>
 8003ee0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003ee4:	2f19      	cmp	r7, #25
 8003ee6:	d801      	bhi.n	8003eec <_strtol_l.constprop.0+0xb4>
 8003ee8:	3c37      	subs	r4, #55	@ 0x37
 8003eea:	e7de      	b.n	8003eaa <_strtol_l.constprop.0+0x72>
 8003eec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003ef0:	2f19      	cmp	r7, #25
 8003ef2:	d804      	bhi.n	8003efe <_strtol_l.constprop.0+0xc6>
 8003ef4:	3c57      	subs	r4, #87	@ 0x57
 8003ef6:	e7d8      	b.n	8003eaa <_strtol_l.constprop.0+0x72>
 8003ef8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003efc:	e7e1      	b.n	8003ec2 <_strtol_l.constprop.0+0x8a>
 8003efe:	1c53      	adds	r3, r2, #1
 8003f00:	d108      	bne.n	8003f14 <_strtol_l.constprop.0+0xdc>
 8003f02:	2322      	movs	r3, #34	@ 0x22
 8003f04:	f8ce 3000 	str.w	r3, [lr]
 8003f08:	4660      	mov	r0, ip
 8003f0a:	f1b8 0f00 	cmp.w	r8, #0
 8003f0e:	d0a0      	beq.n	8003e52 <_strtol_l.constprop.0+0x1a>
 8003f10:	1e69      	subs	r1, r5, #1
 8003f12:	e006      	b.n	8003f22 <_strtol_l.constprop.0+0xea>
 8003f14:	b106      	cbz	r6, 8003f18 <_strtol_l.constprop.0+0xe0>
 8003f16:	4240      	negs	r0, r0
 8003f18:	f1b8 0f00 	cmp.w	r8, #0
 8003f1c:	d099      	beq.n	8003e52 <_strtol_l.constprop.0+0x1a>
 8003f1e:	2a00      	cmp	r2, #0
 8003f20:	d1f6      	bne.n	8003f10 <_strtol_l.constprop.0+0xd8>
 8003f22:	f8c8 1000 	str.w	r1, [r8]
 8003f26:	e794      	b.n	8003e52 <_strtol_l.constprop.0+0x1a>
 8003f28:	08004cc1 	.word	0x08004cc1

08003f2c <strtol>:
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	460a      	mov	r2, r1
 8003f30:	4601      	mov	r1, r0
 8003f32:	4802      	ldr	r0, [pc, #8]	@ (8003f3c <strtol+0x10>)
 8003f34:	6800      	ldr	r0, [r0, #0]
 8003f36:	f7ff bf7f 	b.w	8003e38 <_strtol_l.constprop.0>
 8003f3a:	bf00      	nop
 8003f3c:	20000018 	.word	0x20000018

08003f40 <_fwalk_sglue>:
 8003f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f44:	4607      	mov	r7, r0
 8003f46:	4688      	mov	r8, r1
 8003f48:	4614      	mov	r4, r2
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f50:	f1b9 0901 	subs.w	r9, r9, #1
 8003f54:	d505      	bpl.n	8003f62 <_fwalk_sglue+0x22>
 8003f56:	6824      	ldr	r4, [r4, #0]
 8003f58:	2c00      	cmp	r4, #0
 8003f5a:	d1f7      	bne.n	8003f4c <_fwalk_sglue+0xc>
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f62:	89ab      	ldrh	r3, [r5, #12]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d907      	bls.n	8003f78 <_fwalk_sglue+0x38>
 8003f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	d003      	beq.n	8003f78 <_fwalk_sglue+0x38>
 8003f70:	4629      	mov	r1, r5
 8003f72:	4638      	mov	r0, r7
 8003f74:	47c0      	blx	r8
 8003f76:	4306      	orrs	r6, r0
 8003f78:	3568      	adds	r5, #104	@ 0x68
 8003f7a:	e7e9      	b.n	8003f50 <_fwalk_sglue+0x10>

08003f7c <iprintf>:
 8003f7c:	b40f      	push	{r0, r1, r2, r3}
 8003f7e:	b507      	push	{r0, r1, r2, lr}
 8003f80:	4906      	ldr	r1, [pc, #24]	@ (8003f9c <iprintf+0x20>)
 8003f82:	ab04      	add	r3, sp, #16
 8003f84:	6808      	ldr	r0, [r1, #0]
 8003f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f8a:	6881      	ldr	r1, [r0, #8]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	f000 f877 	bl	8004080 <_vfiprintf_r>
 8003f92:	b003      	add	sp, #12
 8003f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f98:	b004      	add	sp, #16
 8003f9a:	4770      	bx	lr
 8003f9c:	20000018 	.word	0x20000018

08003fa0 <strncmp>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	b16a      	cbz	r2, 8003fc0 <strncmp+0x20>
 8003fa4:	3901      	subs	r1, #1
 8003fa6:	1884      	adds	r4, r0, r2
 8003fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d103      	bne.n	8003fbc <strncmp+0x1c>
 8003fb4:	42a0      	cmp	r0, r4
 8003fb6:	d001      	beq.n	8003fbc <strncmp+0x1c>
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	d1f5      	bne.n	8003fa8 <strncmp+0x8>
 8003fbc:	1ad0      	subs	r0, r2, r3
 8003fbe:	bd10      	pop	{r4, pc}
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	e7fc      	b.n	8003fbe <strncmp+0x1e>

08003fc4 <memset>:
 8003fc4:	4402      	add	r2, r0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d100      	bne.n	8003fce <memset+0xa>
 8003fcc:	4770      	bx	lr
 8003fce:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd2:	e7f9      	b.n	8003fc8 <memset+0x4>

08003fd4 <__errno>:
 8003fd4:	4b01      	ldr	r3, [pc, #4]	@ (8003fdc <__errno+0x8>)
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000018 	.word	0x20000018

08003fe0 <__libc_init_array>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8004018 <__libc_init_array+0x38>)
 8003fe4:	4c0d      	ldr	r4, [pc, #52]	@ (800401c <__libc_init_array+0x3c>)
 8003fe6:	1b64      	subs	r4, r4, r5
 8003fe8:	10a4      	asrs	r4, r4, #2
 8003fea:	2600      	movs	r6, #0
 8003fec:	42a6      	cmp	r6, r4
 8003fee:	d109      	bne.n	8004004 <__libc_init_array+0x24>
 8003ff0:	4d0b      	ldr	r5, [pc, #44]	@ (8004020 <__libc_init_array+0x40>)
 8003ff2:	4c0c      	ldr	r4, [pc, #48]	@ (8004024 <__libc_init_array+0x44>)
 8003ff4:	f000 fe40 	bl	8004c78 <_init>
 8003ff8:	1b64      	subs	r4, r4, r5
 8003ffa:	10a4      	asrs	r4, r4, #2
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	42a6      	cmp	r6, r4
 8004000:	d105      	bne.n	800400e <__libc_init_array+0x2e>
 8004002:	bd70      	pop	{r4, r5, r6, pc}
 8004004:	f855 3b04 	ldr.w	r3, [r5], #4
 8004008:	4798      	blx	r3
 800400a:	3601      	adds	r6, #1
 800400c:	e7ee      	b.n	8003fec <__libc_init_array+0xc>
 800400e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004012:	4798      	blx	r3
 8004014:	3601      	adds	r6, #1
 8004016:	e7f2      	b.n	8003ffe <__libc_init_array+0x1e>
 8004018:	08004dfc 	.word	0x08004dfc
 800401c:	08004dfc 	.word	0x08004dfc
 8004020:	08004dfc 	.word	0x08004dfc
 8004024:	08004e00 	.word	0x08004e00

08004028 <__retarget_lock_init_recursive>:
 8004028:	4770      	bx	lr

0800402a <__retarget_lock_acquire_recursive>:
 800402a:	4770      	bx	lr

0800402c <__retarget_lock_release_recursive>:
 800402c:	4770      	bx	lr

0800402e <__sfputc_r>:
 800402e:	6893      	ldr	r3, [r2, #8]
 8004030:	3b01      	subs	r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	b410      	push	{r4}
 8004036:	6093      	str	r3, [r2, #8]
 8004038:	da08      	bge.n	800404c <__sfputc_r+0x1e>
 800403a:	6994      	ldr	r4, [r2, #24]
 800403c:	42a3      	cmp	r3, r4
 800403e:	db01      	blt.n	8004044 <__sfputc_r+0x16>
 8004040:	290a      	cmp	r1, #10
 8004042:	d103      	bne.n	800404c <__sfputc_r+0x1e>
 8004044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004048:	f000 bc5d 	b.w	8004906 <__swbuf_r>
 800404c:	6813      	ldr	r3, [r2, #0]
 800404e:	1c58      	adds	r0, r3, #1
 8004050:	6010      	str	r0, [r2, #0]
 8004052:	7019      	strb	r1, [r3, #0]
 8004054:	4608      	mov	r0, r1
 8004056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800405a:	4770      	bx	lr

0800405c <__sfputs_r>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	4606      	mov	r6, r0
 8004060:	460f      	mov	r7, r1
 8004062:	4614      	mov	r4, r2
 8004064:	18d5      	adds	r5, r2, r3
 8004066:	42ac      	cmp	r4, r5
 8004068:	d101      	bne.n	800406e <__sfputs_r+0x12>
 800406a:	2000      	movs	r0, #0
 800406c:	e007      	b.n	800407e <__sfputs_r+0x22>
 800406e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004072:	463a      	mov	r2, r7
 8004074:	4630      	mov	r0, r6
 8004076:	f7ff ffda 	bl	800402e <__sfputc_r>
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	d1f3      	bne.n	8004066 <__sfputs_r+0xa>
 800407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004080 <_vfiprintf_r>:
 8004080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004084:	460d      	mov	r5, r1
 8004086:	b09d      	sub	sp, #116	@ 0x74
 8004088:	4614      	mov	r4, r2
 800408a:	4698      	mov	r8, r3
 800408c:	4606      	mov	r6, r0
 800408e:	b118      	cbz	r0, 8004098 <_vfiprintf_r+0x18>
 8004090:	6a03      	ldr	r3, [r0, #32]
 8004092:	b90b      	cbnz	r3, 8004098 <_vfiprintf_r+0x18>
 8004094:	f7ff feb8 	bl	8003e08 <__sinit>
 8004098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800409a:	07d9      	lsls	r1, r3, #31
 800409c:	d405      	bmi.n	80040aa <_vfiprintf_r+0x2a>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	059a      	lsls	r2, r3, #22
 80040a2:	d402      	bmi.n	80040aa <_vfiprintf_r+0x2a>
 80040a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040a6:	f7ff ffc0 	bl	800402a <__retarget_lock_acquire_recursive>
 80040aa:	89ab      	ldrh	r3, [r5, #12]
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	d501      	bpl.n	80040b4 <_vfiprintf_r+0x34>
 80040b0:	692b      	ldr	r3, [r5, #16]
 80040b2:	b99b      	cbnz	r3, 80040dc <_vfiprintf_r+0x5c>
 80040b4:	4629      	mov	r1, r5
 80040b6:	4630      	mov	r0, r6
 80040b8:	f000 fc64 	bl	8004984 <__swsetup_r>
 80040bc:	b170      	cbz	r0, 80040dc <_vfiprintf_r+0x5c>
 80040be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040c0:	07dc      	lsls	r4, r3, #31
 80040c2:	d504      	bpl.n	80040ce <_vfiprintf_r+0x4e>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040c8:	b01d      	add	sp, #116	@ 0x74
 80040ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ce:	89ab      	ldrh	r3, [r5, #12]
 80040d0:	0598      	lsls	r0, r3, #22
 80040d2:	d4f7      	bmi.n	80040c4 <_vfiprintf_r+0x44>
 80040d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040d6:	f7ff ffa9 	bl	800402c <__retarget_lock_release_recursive>
 80040da:	e7f3      	b.n	80040c4 <_vfiprintf_r+0x44>
 80040dc:	2300      	movs	r3, #0
 80040de:	9309      	str	r3, [sp, #36]	@ 0x24
 80040e0:	2320      	movs	r3, #32
 80040e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040ea:	2330      	movs	r3, #48	@ 0x30
 80040ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800429c <_vfiprintf_r+0x21c>
 80040f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040f4:	f04f 0901 	mov.w	r9, #1
 80040f8:	4623      	mov	r3, r4
 80040fa:	469a      	mov	sl, r3
 80040fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004100:	b10a      	cbz	r2, 8004106 <_vfiprintf_r+0x86>
 8004102:	2a25      	cmp	r2, #37	@ 0x25
 8004104:	d1f9      	bne.n	80040fa <_vfiprintf_r+0x7a>
 8004106:	ebba 0b04 	subs.w	fp, sl, r4
 800410a:	d00b      	beq.n	8004124 <_vfiprintf_r+0xa4>
 800410c:	465b      	mov	r3, fp
 800410e:	4622      	mov	r2, r4
 8004110:	4629      	mov	r1, r5
 8004112:	4630      	mov	r0, r6
 8004114:	f7ff ffa2 	bl	800405c <__sfputs_r>
 8004118:	3001      	adds	r0, #1
 800411a:	f000 80a7 	beq.w	800426c <_vfiprintf_r+0x1ec>
 800411e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004120:	445a      	add	r2, fp
 8004122:	9209      	str	r2, [sp, #36]	@ 0x24
 8004124:	f89a 3000 	ldrb.w	r3, [sl]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 809f 	beq.w	800426c <_vfiprintf_r+0x1ec>
 800412e:	2300      	movs	r3, #0
 8004130:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004138:	f10a 0a01 	add.w	sl, sl, #1
 800413c:	9304      	str	r3, [sp, #16]
 800413e:	9307      	str	r3, [sp, #28]
 8004140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004144:	931a      	str	r3, [sp, #104]	@ 0x68
 8004146:	4654      	mov	r4, sl
 8004148:	2205      	movs	r2, #5
 800414a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414e:	4853      	ldr	r0, [pc, #332]	@ (800429c <_vfiprintf_r+0x21c>)
 8004150:	f7fc f84e 	bl	80001f0 <memchr>
 8004154:	9a04      	ldr	r2, [sp, #16]
 8004156:	b9d8      	cbnz	r0, 8004190 <_vfiprintf_r+0x110>
 8004158:	06d1      	lsls	r1, r2, #27
 800415a:	bf44      	itt	mi
 800415c:	2320      	movmi	r3, #32
 800415e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004162:	0713      	lsls	r3, r2, #28
 8004164:	bf44      	itt	mi
 8004166:	232b      	movmi	r3, #43	@ 0x2b
 8004168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800416c:	f89a 3000 	ldrb.w	r3, [sl]
 8004170:	2b2a      	cmp	r3, #42	@ 0x2a
 8004172:	d015      	beq.n	80041a0 <_vfiprintf_r+0x120>
 8004174:	9a07      	ldr	r2, [sp, #28]
 8004176:	4654      	mov	r4, sl
 8004178:	2000      	movs	r0, #0
 800417a:	f04f 0c0a 	mov.w	ip, #10
 800417e:	4621      	mov	r1, r4
 8004180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004184:	3b30      	subs	r3, #48	@ 0x30
 8004186:	2b09      	cmp	r3, #9
 8004188:	d94b      	bls.n	8004222 <_vfiprintf_r+0x1a2>
 800418a:	b1b0      	cbz	r0, 80041ba <_vfiprintf_r+0x13a>
 800418c:	9207      	str	r2, [sp, #28]
 800418e:	e014      	b.n	80041ba <_vfiprintf_r+0x13a>
 8004190:	eba0 0308 	sub.w	r3, r0, r8
 8004194:	fa09 f303 	lsl.w	r3, r9, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	46a2      	mov	sl, r4
 800419e:	e7d2      	b.n	8004146 <_vfiprintf_r+0xc6>
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	1d19      	adds	r1, r3, #4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	9103      	str	r1, [sp, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bfbb      	ittet	lt
 80041ac:	425b      	neglt	r3, r3
 80041ae:	f042 0202 	orrlt.w	r2, r2, #2
 80041b2:	9307      	strge	r3, [sp, #28]
 80041b4:	9307      	strlt	r3, [sp, #28]
 80041b6:	bfb8      	it	lt
 80041b8:	9204      	strlt	r2, [sp, #16]
 80041ba:	7823      	ldrb	r3, [r4, #0]
 80041bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80041be:	d10a      	bne.n	80041d6 <_vfiprintf_r+0x156>
 80041c0:	7863      	ldrb	r3, [r4, #1]
 80041c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80041c4:	d132      	bne.n	800422c <_vfiprintf_r+0x1ac>
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	9203      	str	r2, [sp, #12]
 80041ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041d2:	3402      	adds	r4, #2
 80041d4:	9305      	str	r3, [sp, #20]
 80041d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80042ac <_vfiprintf_r+0x22c>
 80041da:	7821      	ldrb	r1, [r4, #0]
 80041dc:	2203      	movs	r2, #3
 80041de:	4650      	mov	r0, sl
 80041e0:	f7fc f806 	bl	80001f0 <memchr>
 80041e4:	b138      	cbz	r0, 80041f6 <_vfiprintf_r+0x176>
 80041e6:	9b04      	ldr	r3, [sp, #16]
 80041e8:	eba0 000a 	sub.w	r0, r0, sl
 80041ec:	2240      	movs	r2, #64	@ 0x40
 80041ee:	4082      	lsls	r2, r0
 80041f0:	4313      	orrs	r3, r2
 80041f2:	3401      	adds	r4, #1
 80041f4:	9304      	str	r3, [sp, #16]
 80041f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041fa:	4829      	ldr	r0, [pc, #164]	@ (80042a0 <_vfiprintf_r+0x220>)
 80041fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004200:	2206      	movs	r2, #6
 8004202:	f7fb fff5 	bl	80001f0 <memchr>
 8004206:	2800      	cmp	r0, #0
 8004208:	d03f      	beq.n	800428a <_vfiprintf_r+0x20a>
 800420a:	4b26      	ldr	r3, [pc, #152]	@ (80042a4 <_vfiprintf_r+0x224>)
 800420c:	bb1b      	cbnz	r3, 8004256 <_vfiprintf_r+0x1d6>
 800420e:	9b03      	ldr	r3, [sp, #12]
 8004210:	3307      	adds	r3, #7
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	3308      	adds	r3, #8
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800421c:	443b      	add	r3, r7
 800421e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004220:	e76a      	b.n	80040f8 <_vfiprintf_r+0x78>
 8004222:	fb0c 3202 	mla	r2, ip, r2, r3
 8004226:	460c      	mov	r4, r1
 8004228:	2001      	movs	r0, #1
 800422a:	e7a8      	b.n	800417e <_vfiprintf_r+0xfe>
 800422c:	2300      	movs	r3, #0
 800422e:	3401      	adds	r4, #1
 8004230:	9305      	str	r3, [sp, #20]
 8004232:	4619      	mov	r1, r3
 8004234:	f04f 0c0a 	mov.w	ip, #10
 8004238:	4620      	mov	r0, r4
 800423a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800423e:	3a30      	subs	r2, #48	@ 0x30
 8004240:	2a09      	cmp	r2, #9
 8004242:	d903      	bls.n	800424c <_vfiprintf_r+0x1cc>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0c6      	beq.n	80041d6 <_vfiprintf_r+0x156>
 8004248:	9105      	str	r1, [sp, #20]
 800424a:	e7c4      	b.n	80041d6 <_vfiprintf_r+0x156>
 800424c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004250:	4604      	mov	r4, r0
 8004252:	2301      	movs	r3, #1
 8004254:	e7f0      	b.n	8004238 <_vfiprintf_r+0x1b8>
 8004256:	ab03      	add	r3, sp, #12
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	462a      	mov	r2, r5
 800425c:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <_vfiprintf_r+0x228>)
 800425e:	a904      	add	r1, sp, #16
 8004260:	4630      	mov	r0, r6
 8004262:	f3af 8000 	nop.w
 8004266:	4607      	mov	r7, r0
 8004268:	1c78      	adds	r0, r7, #1
 800426a:	d1d6      	bne.n	800421a <_vfiprintf_r+0x19a>
 800426c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800426e:	07d9      	lsls	r1, r3, #31
 8004270:	d405      	bmi.n	800427e <_vfiprintf_r+0x1fe>
 8004272:	89ab      	ldrh	r3, [r5, #12]
 8004274:	059a      	lsls	r2, r3, #22
 8004276:	d402      	bmi.n	800427e <_vfiprintf_r+0x1fe>
 8004278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800427a:	f7ff fed7 	bl	800402c <__retarget_lock_release_recursive>
 800427e:	89ab      	ldrh	r3, [r5, #12]
 8004280:	065b      	lsls	r3, r3, #25
 8004282:	f53f af1f 	bmi.w	80040c4 <_vfiprintf_r+0x44>
 8004286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004288:	e71e      	b.n	80040c8 <_vfiprintf_r+0x48>
 800428a:	ab03      	add	r3, sp, #12
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	462a      	mov	r2, r5
 8004290:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <_vfiprintf_r+0x228>)
 8004292:	a904      	add	r1, sp, #16
 8004294:	4630      	mov	r0, r6
 8004296:	f000 f91b 	bl	80044d0 <_printf_i>
 800429a:	e7e4      	b.n	8004266 <_vfiprintf_r+0x1e6>
 800429c:	08004dc1 	.word	0x08004dc1
 80042a0:	08004dcb 	.word	0x08004dcb
 80042a4:	00000000 	.word	0x00000000
 80042a8:	0800405d 	.word	0x0800405d
 80042ac:	08004dc7 	.word	0x08004dc7

080042b0 <sbrk_aligned>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	4e0f      	ldr	r6, [pc, #60]	@ (80042f0 <sbrk_aligned+0x40>)
 80042b4:	460c      	mov	r4, r1
 80042b6:	6831      	ldr	r1, [r6, #0]
 80042b8:	4605      	mov	r5, r0
 80042ba:	b911      	cbnz	r1, 80042c2 <sbrk_aligned+0x12>
 80042bc:	f000 fc70 	bl	8004ba0 <_sbrk_r>
 80042c0:	6030      	str	r0, [r6, #0]
 80042c2:	4621      	mov	r1, r4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 fc6b 	bl	8004ba0 <_sbrk_r>
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	d103      	bne.n	80042d6 <sbrk_aligned+0x26>
 80042ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80042d2:	4620      	mov	r0, r4
 80042d4:	bd70      	pop	{r4, r5, r6, pc}
 80042d6:	1cc4      	adds	r4, r0, #3
 80042d8:	f024 0403 	bic.w	r4, r4, #3
 80042dc:	42a0      	cmp	r0, r4
 80042de:	d0f8      	beq.n	80042d2 <sbrk_aligned+0x22>
 80042e0:	1a21      	subs	r1, r4, r0
 80042e2:	4628      	mov	r0, r5
 80042e4:	f000 fc5c 	bl	8004ba0 <_sbrk_r>
 80042e8:	3001      	adds	r0, #1
 80042ea:	d1f2      	bne.n	80042d2 <sbrk_aligned+0x22>
 80042ec:	e7ef      	b.n	80042ce <sbrk_aligned+0x1e>
 80042ee:	bf00      	nop
 80042f0:	20000308 	.word	0x20000308

080042f4 <_malloc_r>:
 80042f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f8:	1ccd      	adds	r5, r1, #3
 80042fa:	f025 0503 	bic.w	r5, r5, #3
 80042fe:	3508      	adds	r5, #8
 8004300:	2d0c      	cmp	r5, #12
 8004302:	bf38      	it	cc
 8004304:	250c      	movcc	r5, #12
 8004306:	2d00      	cmp	r5, #0
 8004308:	4606      	mov	r6, r0
 800430a:	db01      	blt.n	8004310 <_malloc_r+0x1c>
 800430c:	42a9      	cmp	r1, r5
 800430e:	d904      	bls.n	800431a <_malloc_r+0x26>
 8004310:	230c      	movs	r3, #12
 8004312:	6033      	str	r3, [r6, #0]
 8004314:	2000      	movs	r0, #0
 8004316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800431a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043f0 <_malloc_r+0xfc>
 800431e:	f000 faa3 	bl	8004868 <__malloc_lock>
 8004322:	f8d8 3000 	ldr.w	r3, [r8]
 8004326:	461c      	mov	r4, r3
 8004328:	bb44      	cbnz	r4, 800437c <_malloc_r+0x88>
 800432a:	4629      	mov	r1, r5
 800432c:	4630      	mov	r0, r6
 800432e:	f7ff ffbf 	bl	80042b0 <sbrk_aligned>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	4604      	mov	r4, r0
 8004336:	d158      	bne.n	80043ea <_malloc_r+0xf6>
 8004338:	f8d8 4000 	ldr.w	r4, [r8]
 800433c:	4627      	mov	r7, r4
 800433e:	2f00      	cmp	r7, #0
 8004340:	d143      	bne.n	80043ca <_malloc_r+0xd6>
 8004342:	2c00      	cmp	r4, #0
 8004344:	d04b      	beq.n	80043de <_malloc_r+0xea>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	4639      	mov	r1, r7
 800434a:	4630      	mov	r0, r6
 800434c:	eb04 0903 	add.w	r9, r4, r3
 8004350:	f000 fc26 	bl	8004ba0 <_sbrk_r>
 8004354:	4581      	cmp	r9, r0
 8004356:	d142      	bne.n	80043de <_malloc_r+0xea>
 8004358:	6821      	ldr	r1, [r4, #0]
 800435a:	1a6d      	subs	r5, r5, r1
 800435c:	4629      	mov	r1, r5
 800435e:	4630      	mov	r0, r6
 8004360:	f7ff ffa6 	bl	80042b0 <sbrk_aligned>
 8004364:	3001      	adds	r0, #1
 8004366:	d03a      	beq.n	80043de <_malloc_r+0xea>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	442b      	add	r3, r5
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	f8d8 3000 	ldr.w	r3, [r8]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	bb62      	cbnz	r2, 80043d0 <_malloc_r+0xdc>
 8004376:	f8c8 7000 	str.w	r7, [r8]
 800437a:	e00f      	b.n	800439c <_malloc_r+0xa8>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	1b52      	subs	r2, r2, r5
 8004380:	d420      	bmi.n	80043c4 <_malloc_r+0xd0>
 8004382:	2a0b      	cmp	r2, #11
 8004384:	d917      	bls.n	80043b6 <_malloc_r+0xc2>
 8004386:	1961      	adds	r1, r4, r5
 8004388:	42a3      	cmp	r3, r4
 800438a:	6025      	str	r5, [r4, #0]
 800438c:	bf18      	it	ne
 800438e:	6059      	strne	r1, [r3, #4]
 8004390:	6863      	ldr	r3, [r4, #4]
 8004392:	bf08      	it	eq
 8004394:	f8c8 1000 	streq.w	r1, [r8]
 8004398:	5162      	str	r2, [r4, r5]
 800439a:	604b      	str	r3, [r1, #4]
 800439c:	4630      	mov	r0, r6
 800439e:	f000 fa69 	bl	8004874 <__malloc_unlock>
 80043a2:	f104 000b 	add.w	r0, r4, #11
 80043a6:	1d23      	adds	r3, r4, #4
 80043a8:	f020 0007 	bic.w	r0, r0, #7
 80043ac:	1ac2      	subs	r2, r0, r3
 80043ae:	bf1c      	itt	ne
 80043b0:	1a1b      	subne	r3, r3, r0
 80043b2:	50a3      	strne	r3, [r4, r2]
 80043b4:	e7af      	b.n	8004316 <_malloc_r+0x22>
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	bf0c      	ite	eq
 80043bc:	f8c8 2000 	streq.w	r2, [r8]
 80043c0:	605a      	strne	r2, [r3, #4]
 80043c2:	e7eb      	b.n	800439c <_malloc_r+0xa8>
 80043c4:	4623      	mov	r3, r4
 80043c6:	6864      	ldr	r4, [r4, #4]
 80043c8:	e7ae      	b.n	8004328 <_malloc_r+0x34>
 80043ca:	463c      	mov	r4, r7
 80043cc:	687f      	ldr	r7, [r7, #4]
 80043ce:	e7b6      	b.n	800433e <_malloc_r+0x4a>
 80043d0:	461a      	mov	r2, r3
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	d1fb      	bne.n	80043d0 <_malloc_r+0xdc>
 80043d8:	2300      	movs	r3, #0
 80043da:	6053      	str	r3, [r2, #4]
 80043dc:	e7de      	b.n	800439c <_malloc_r+0xa8>
 80043de:	230c      	movs	r3, #12
 80043e0:	6033      	str	r3, [r6, #0]
 80043e2:	4630      	mov	r0, r6
 80043e4:	f000 fa46 	bl	8004874 <__malloc_unlock>
 80043e8:	e794      	b.n	8004314 <_malloc_r+0x20>
 80043ea:	6005      	str	r5, [r0, #0]
 80043ec:	e7d6      	b.n	800439c <_malloc_r+0xa8>
 80043ee:	bf00      	nop
 80043f0:	2000030c 	.word	0x2000030c

080043f4 <_printf_common>:
 80043f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f8:	4616      	mov	r6, r2
 80043fa:	4698      	mov	r8, r3
 80043fc:	688a      	ldr	r2, [r1, #8]
 80043fe:	690b      	ldr	r3, [r1, #16]
 8004400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004404:	4293      	cmp	r3, r2
 8004406:	bfb8      	it	lt
 8004408:	4613      	movlt	r3, r2
 800440a:	6033      	str	r3, [r6, #0]
 800440c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004410:	4607      	mov	r7, r0
 8004412:	460c      	mov	r4, r1
 8004414:	b10a      	cbz	r2, 800441a <_printf_common+0x26>
 8004416:	3301      	adds	r3, #1
 8004418:	6033      	str	r3, [r6, #0]
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	0699      	lsls	r1, r3, #26
 800441e:	bf42      	ittt	mi
 8004420:	6833      	ldrmi	r3, [r6, #0]
 8004422:	3302      	addmi	r3, #2
 8004424:	6033      	strmi	r3, [r6, #0]
 8004426:	6825      	ldr	r5, [r4, #0]
 8004428:	f015 0506 	ands.w	r5, r5, #6
 800442c:	d106      	bne.n	800443c <_printf_common+0x48>
 800442e:	f104 0a19 	add.w	sl, r4, #25
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	6832      	ldr	r2, [r6, #0]
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	42ab      	cmp	r3, r5
 800443a:	dc26      	bgt.n	800448a <_printf_common+0x96>
 800443c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	3b00      	subs	r3, #0
 8004444:	bf18      	it	ne
 8004446:	2301      	movne	r3, #1
 8004448:	0692      	lsls	r2, r2, #26
 800444a:	d42b      	bmi.n	80044a4 <_printf_common+0xb0>
 800444c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004450:	4641      	mov	r1, r8
 8004452:	4638      	mov	r0, r7
 8004454:	47c8      	blx	r9
 8004456:	3001      	adds	r0, #1
 8004458:	d01e      	beq.n	8004498 <_printf_common+0xa4>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	6922      	ldr	r2, [r4, #16]
 800445e:	f003 0306 	and.w	r3, r3, #6
 8004462:	2b04      	cmp	r3, #4
 8004464:	bf02      	ittt	eq
 8004466:	68e5      	ldreq	r5, [r4, #12]
 8004468:	6833      	ldreq	r3, [r6, #0]
 800446a:	1aed      	subeq	r5, r5, r3
 800446c:	68a3      	ldr	r3, [r4, #8]
 800446e:	bf0c      	ite	eq
 8004470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004474:	2500      	movne	r5, #0
 8004476:	4293      	cmp	r3, r2
 8004478:	bfc4      	itt	gt
 800447a:	1a9b      	subgt	r3, r3, r2
 800447c:	18ed      	addgt	r5, r5, r3
 800447e:	2600      	movs	r6, #0
 8004480:	341a      	adds	r4, #26
 8004482:	42b5      	cmp	r5, r6
 8004484:	d11a      	bne.n	80044bc <_printf_common+0xc8>
 8004486:	2000      	movs	r0, #0
 8004488:	e008      	b.n	800449c <_printf_common+0xa8>
 800448a:	2301      	movs	r3, #1
 800448c:	4652      	mov	r2, sl
 800448e:	4641      	mov	r1, r8
 8004490:	4638      	mov	r0, r7
 8004492:	47c8      	blx	r9
 8004494:	3001      	adds	r0, #1
 8004496:	d103      	bne.n	80044a0 <_printf_common+0xac>
 8004498:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	3501      	adds	r5, #1
 80044a2:	e7c6      	b.n	8004432 <_printf_common+0x3e>
 80044a4:	18e1      	adds	r1, r4, r3
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	2030      	movs	r0, #48	@ 0x30
 80044aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044ae:	4422      	add	r2, r4
 80044b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044b8:	3302      	adds	r3, #2
 80044ba:	e7c7      	b.n	800444c <_printf_common+0x58>
 80044bc:	2301      	movs	r3, #1
 80044be:	4622      	mov	r2, r4
 80044c0:	4641      	mov	r1, r8
 80044c2:	4638      	mov	r0, r7
 80044c4:	47c8      	blx	r9
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0e6      	beq.n	8004498 <_printf_common+0xa4>
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7d9      	b.n	8004482 <_printf_common+0x8e>
	...

080044d0 <_printf_i>:
 80044d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	7e0f      	ldrb	r7, [r1, #24]
 80044d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044d8:	2f78      	cmp	r7, #120	@ 0x78
 80044da:	4691      	mov	r9, r2
 80044dc:	4680      	mov	r8, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	469a      	mov	sl, r3
 80044e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044e6:	d807      	bhi.n	80044f8 <_printf_i+0x28>
 80044e8:	2f62      	cmp	r7, #98	@ 0x62
 80044ea:	d80a      	bhi.n	8004502 <_printf_i+0x32>
 80044ec:	2f00      	cmp	r7, #0
 80044ee:	f000 80d2 	beq.w	8004696 <_printf_i+0x1c6>
 80044f2:	2f58      	cmp	r7, #88	@ 0x58
 80044f4:	f000 80b9 	beq.w	800466a <_printf_i+0x19a>
 80044f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004500:	e03a      	b.n	8004578 <_printf_i+0xa8>
 8004502:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004506:	2b15      	cmp	r3, #21
 8004508:	d8f6      	bhi.n	80044f8 <_printf_i+0x28>
 800450a:	a101      	add	r1, pc, #4	@ (adr r1, 8004510 <_printf_i+0x40>)
 800450c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004510:	08004569 	.word	0x08004569
 8004514:	0800457d 	.word	0x0800457d
 8004518:	080044f9 	.word	0x080044f9
 800451c:	080044f9 	.word	0x080044f9
 8004520:	080044f9 	.word	0x080044f9
 8004524:	080044f9 	.word	0x080044f9
 8004528:	0800457d 	.word	0x0800457d
 800452c:	080044f9 	.word	0x080044f9
 8004530:	080044f9 	.word	0x080044f9
 8004534:	080044f9 	.word	0x080044f9
 8004538:	080044f9 	.word	0x080044f9
 800453c:	0800467d 	.word	0x0800467d
 8004540:	080045a7 	.word	0x080045a7
 8004544:	08004637 	.word	0x08004637
 8004548:	080044f9 	.word	0x080044f9
 800454c:	080044f9 	.word	0x080044f9
 8004550:	0800469f 	.word	0x0800469f
 8004554:	080044f9 	.word	0x080044f9
 8004558:	080045a7 	.word	0x080045a7
 800455c:	080044f9 	.word	0x080044f9
 8004560:	080044f9 	.word	0x080044f9
 8004564:	0800463f 	.word	0x0800463f
 8004568:	6833      	ldr	r3, [r6, #0]
 800456a:	1d1a      	adds	r2, r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6032      	str	r2, [r6, #0]
 8004570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004574:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004578:	2301      	movs	r3, #1
 800457a:	e09d      	b.n	80046b8 <_printf_i+0x1e8>
 800457c:	6833      	ldr	r3, [r6, #0]
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	1d19      	adds	r1, r3, #4
 8004582:	6031      	str	r1, [r6, #0]
 8004584:	0606      	lsls	r6, r0, #24
 8004586:	d501      	bpl.n	800458c <_printf_i+0xbc>
 8004588:	681d      	ldr	r5, [r3, #0]
 800458a:	e003      	b.n	8004594 <_printf_i+0xc4>
 800458c:	0645      	lsls	r5, r0, #25
 800458e:	d5fb      	bpl.n	8004588 <_printf_i+0xb8>
 8004590:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004594:	2d00      	cmp	r5, #0
 8004596:	da03      	bge.n	80045a0 <_printf_i+0xd0>
 8004598:	232d      	movs	r3, #45	@ 0x2d
 800459a:	426d      	negs	r5, r5
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045a0:	4859      	ldr	r0, [pc, #356]	@ (8004708 <_printf_i+0x238>)
 80045a2:	230a      	movs	r3, #10
 80045a4:	e011      	b.n	80045ca <_printf_i+0xfa>
 80045a6:	6821      	ldr	r1, [r4, #0]
 80045a8:	6833      	ldr	r3, [r6, #0]
 80045aa:	0608      	lsls	r0, r1, #24
 80045ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80045b0:	d402      	bmi.n	80045b8 <_printf_i+0xe8>
 80045b2:	0649      	lsls	r1, r1, #25
 80045b4:	bf48      	it	mi
 80045b6:	b2ad      	uxthmi	r5, r5
 80045b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80045ba:	4853      	ldr	r0, [pc, #332]	@ (8004708 <_printf_i+0x238>)
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	bf14      	ite	ne
 80045c0:	230a      	movne	r3, #10
 80045c2:	2308      	moveq	r3, #8
 80045c4:	2100      	movs	r1, #0
 80045c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045ca:	6866      	ldr	r6, [r4, #4]
 80045cc:	60a6      	str	r6, [r4, #8]
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	bfa2      	ittt	ge
 80045d2:	6821      	ldrge	r1, [r4, #0]
 80045d4:	f021 0104 	bicge.w	r1, r1, #4
 80045d8:	6021      	strge	r1, [r4, #0]
 80045da:	b90d      	cbnz	r5, 80045e0 <_printf_i+0x110>
 80045dc:	2e00      	cmp	r6, #0
 80045de:	d04b      	beq.n	8004678 <_printf_i+0x1a8>
 80045e0:	4616      	mov	r6, r2
 80045e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80045e6:	fb03 5711 	mls	r7, r3, r1, r5
 80045ea:	5dc7      	ldrb	r7, [r0, r7]
 80045ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045f0:	462f      	mov	r7, r5
 80045f2:	42bb      	cmp	r3, r7
 80045f4:	460d      	mov	r5, r1
 80045f6:	d9f4      	bls.n	80045e2 <_printf_i+0x112>
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d10b      	bne.n	8004614 <_printf_i+0x144>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	07df      	lsls	r7, r3, #31
 8004600:	d508      	bpl.n	8004614 <_printf_i+0x144>
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	6861      	ldr	r1, [r4, #4]
 8004606:	4299      	cmp	r1, r3
 8004608:	bfde      	ittt	le
 800460a:	2330      	movle	r3, #48	@ 0x30
 800460c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004610:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004614:	1b92      	subs	r2, r2, r6
 8004616:	6122      	str	r2, [r4, #16]
 8004618:	f8cd a000 	str.w	sl, [sp]
 800461c:	464b      	mov	r3, r9
 800461e:	aa03      	add	r2, sp, #12
 8004620:	4621      	mov	r1, r4
 8004622:	4640      	mov	r0, r8
 8004624:	f7ff fee6 	bl	80043f4 <_printf_common>
 8004628:	3001      	adds	r0, #1
 800462a:	d14a      	bne.n	80046c2 <_printf_i+0x1f2>
 800462c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004630:	b004      	add	sp, #16
 8004632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	4833      	ldr	r0, [pc, #204]	@ (800470c <_printf_i+0x23c>)
 8004640:	2778      	movs	r7, #120	@ 0x78
 8004642:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	6831      	ldr	r1, [r6, #0]
 800464a:	061f      	lsls	r7, r3, #24
 800464c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004650:	d402      	bmi.n	8004658 <_printf_i+0x188>
 8004652:	065f      	lsls	r7, r3, #25
 8004654:	bf48      	it	mi
 8004656:	b2ad      	uxthmi	r5, r5
 8004658:	6031      	str	r1, [r6, #0]
 800465a:	07d9      	lsls	r1, r3, #31
 800465c:	bf44      	itt	mi
 800465e:	f043 0320 	orrmi.w	r3, r3, #32
 8004662:	6023      	strmi	r3, [r4, #0]
 8004664:	b11d      	cbz	r5, 800466e <_printf_i+0x19e>
 8004666:	2310      	movs	r3, #16
 8004668:	e7ac      	b.n	80045c4 <_printf_i+0xf4>
 800466a:	4827      	ldr	r0, [pc, #156]	@ (8004708 <_printf_i+0x238>)
 800466c:	e7e9      	b.n	8004642 <_printf_i+0x172>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	f023 0320 	bic.w	r3, r3, #32
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	e7f6      	b.n	8004666 <_printf_i+0x196>
 8004678:	4616      	mov	r6, r2
 800467a:	e7bd      	b.n	80045f8 <_printf_i+0x128>
 800467c:	6833      	ldr	r3, [r6, #0]
 800467e:	6825      	ldr	r5, [r4, #0]
 8004680:	6961      	ldr	r1, [r4, #20]
 8004682:	1d18      	adds	r0, r3, #4
 8004684:	6030      	str	r0, [r6, #0]
 8004686:	062e      	lsls	r6, r5, #24
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	d501      	bpl.n	8004690 <_printf_i+0x1c0>
 800468c:	6019      	str	r1, [r3, #0]
 800468e:	e002      	b.n	8004696 <_printf_i+0x1c6>
 8004690:	0668      	lsls	r0, r5, #25
 8004692:	d5fb      	bpl.n	800468c <_printf_i+0x1bc>
 8004694:	8019      	strh	r1, [r3, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	6123      	str	r3, [r4, #16]
 800469a:	4616      	mov	r6, r2
 800469c:	e7bc      	b.n	8004618 <_printf_i+0x148>
 800469e:	6833      	ldr	r3, [r6, #0]
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	6032      	str	r2, [r6, #0]
 80046a4:	681e      	ldr	r6, [r3, #0]
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	2100      	movs	r1, #0
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7fb fda0 	bl	80001f0 <memchr>
 80046b0:	b108      	cbz	r0, 80046b6 <_printf_i+0x1e6>
 80046b2:	1b80      	subs	r0, r0, r6
 80046b4:	6060      	str	r0, [r4, #4]
 80046b6:	6863      	ldr	r3, [r4, #4]
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	2300      	movs	r3, #0
 80046bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046c0:	e7aa      	b.n	8004618 <_printf_i+0x148>
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	4632      	mov	r2, r6
 80046c6:	4649      	mov	r1, r9
 80046c8:	4640      	mov	r0, r8
 80046ca:	47d0      	blx	sl
 80046cc:	3001      	adds	r0, #1
 80046ce:	d0ad      	beq.n	800462c <_printf_i+0x15c>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	079b      	lsls	r3, r3, #30
 80046d4:	d413      	bmi.n	80046fe <_printf_i+0x22e>
 80046d6:	68e0      	ldr	r0, [r4, #12]
 80046d8:	9b03      	ldr	r3, [sp, #12]
 80046da:	4298      	cmp	r0, r3
 80046dc:	bfb8      	it	lt
 80046de:	4618      	movlt	r0, r3
 80046e0:	e7a6      	b.n	8004630 <_printf_i+0x160>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4632      	mov	r2, r6
 80046e6:	4649      	mov	r1, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	47d0      	blx	sl
 80046ec:	3001      	adds	r0, #1
 80046ee:	d09d      	beq.n	800462c <_printf_i+0x15c>
 80046f0:	3501      	adds	r5, #1
 80046f2:	68e3      	ldr	r3, [r4, #12]
 80046f4:	9903      	ldr	r1, [sp, #12]
 80046f6:	1a5b      	subs	r3, r3, r1
 80046f8:	42ab      	cmp	r3, r5
 80046fa:	dcf2      	bgt.n	80046e2 <_printf_i+0x212>
 80046fc:	e7eb      	b.n	80046d6 <_printf_i+0x206>
 80046fe:	2500      	movs	r5, #0
 8004700:	f104 0619 	add.w	r6, r4, #25
 8004704:	e7f5      	b.n	80046f2 <_printf_i+0x222>
 8004706:	bf00      	nop
 8004708:	08004dd2 	.word	0x08004dd2
 800470c:	08004de3 	.word	0x08004de3

08004710 <__sflush_r>:
 8004710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004718:	0716      	lsls	r6, r2, #28
 800471a:	4605      	mov	r5, r0
 800471c:	460c      	mov	r4, r1
 800471e:	d454      	bmi.n	80047ca <__sflush_r+0xba>
 8004720:	684b      	ldr	r3, [r1, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	dc02      	bgt.n	800472c <__sflush_r+0x1c>
 8004726:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	dd48      	ble.n	80047be <__sflush_r+0xae>
 800472c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800472e:	2e00      	cmp	r6, #0
 8004730:	d045      	beq.n	80047be <__sflush_r+0xae>
 8004732:	2300      	movs	r3, #0
 8004734:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004738:	682f      	ldr	r7, [r5, #0]
 800473a:	6a21      	ldr	r1, [r4, #32]
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	d030      	beq.n	80047a2 <__sflush_r+0x92>
 8004740:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	0759      	lsls	r1, r3, #29
 8004746:	d505      	bpl.n	8004754 <__sflush_r+0x44>
 8004748:	6863      	ldr	r3, [r4, #4]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800474e:	b10b      	cbz	r3, 8004754 <__sflush_r+0x44>
 8004750:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	2300      	movs	r3, #0
 8004756:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004758:	6a21      	ldr	r1, [r4, #32]
 800475a:	4628      	mov	r0, r5
 800475c:	47b0      	blx	r6
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	d106      	bne.n	8004772 <__sflush_r+0x62>
 8004764:	6829      	ldr	r1, [r5, #0]
 8004766:	291d      	cmp	r1, #29
 8004768:	d82b      	bhi.n	80047c2 <__sflush_r+0xb2>
 800476a:	4a2a      	ldr	r2, [pc, #168]	@ (8004814 <__sflush_r+0x104>)
 800476c:	410a      	asrs	r2, r1
 800476e:	07d6      	lsls	r6, r2, #31
 8004770:	d427      	bmi.n	80047c2 <__sflush_r+0xb2>
 8004772:	2200      	movs	r2, #0
 8004774:	6062      	str	r2, [r4, #4]
 8004776:	04d9      	lsls	r1, r3, #19
 8004778:	6922      	ldr	r2, [r4, #16]
 800477a:	6022      	str	r2, [r4, #0]
 800477c:	d504      	bpl.n	8004788 <__sflush_r+0x78>
 800477e:	1c42      	adds	r2, r0, #1
 8004780:	d101      	bne.n	8004786 <__sflush_r+0x76>
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	b903      	cbnz	r3, 8004788 <__sflush_r+0x78>
 8004786:	6560      	str	r0, [r4, #84]	@ 0x54
 8004788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800478a:	602f      	str	r7, [r5, #0]
 800478c:	b1b9      	cbz	r1, 80047be <__sflush_r+0xae>
 800478e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004792:	4299      	cmp	r1, r3
 8004794:	d002      	beq.n	800479c <__sflush_r+0x8c>
 8004796:	4628      	mov	r0, r5
 8004798:	f000 fa24 	bl	8004be4 <_free_r>
 800479c:	2300      	movs	r3, #0
 800479e:	6363      	str	r3, [r4, #52]	@ 0x34
 80047a0:	e00d      	b.n	80047be <__sflush_r+0xae>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b0      	blx	r6
 80047a8:	4602      	mov	r2, r0
 80047aa:	1c50      	adds	r0, r2, #1
 80047ac:	d1c9      	bne.n	8004742 <__sflush_r+0x32>
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0c6      	beq.n	8004742 <__sflush_r+0x32>
 80047b4:	2b1d      	cmp	r3, #29
 80047b6:	d001      	beq.n	80047bc <__sflush_r+0xac>
 80047b8:	2b16      	cmp	r3, #22
 80047ba:	d11e      	bne.n	80047fa <__sflush_r+0xea>
 80047bc:	602f      	str	r7, [r5, #0]
 80047be:	2000      	movs	r0, #0
 80047c0:	e022      	b.n	8004808 <__sflush_r+0xf8>
 80047c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047c6:	b21b      	sxth	r3, r3
 80047c8:	e01b      	b.n	8004802 <__sflush_r+0xf2>
 80047ca:	690f      	ldr	r7, [r1, #16]
 80047cc:	2f00      	cmp	r7, #0
 80047ce:	d0f6      	beq.n	80047be <__sflush_r+0xae>
 80047d0:	0793      	lsls	r3, r2, #30
 80047d2:	680e      	ldr	r6, [r1, #0]
 80047d4:	bf08      	it	eq
 80047d6:	694b      	ldreq	r3, [r1, #20]
 80047d8:	600f      	str	r7, [r1, #0]
 80047da:	bf18      	it	ne
 80047dc:	2300      	movne	r3, #0
 80047de:	eba6 0807 	sub.w	r8, r6, r7
 80047e2:	608b      	str	r3, [r1, #8]
 80047e4:	f1b8 0f00 	cmp.w	r8, #0
 80047e8:	dde9      	ble.n	80047be <__sflush_r+0xae>
 80047ea:	6a21      	ldr	r1, [r4, #32]
 80047ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80047ee:	4643      	mov	r3, r8
 80047f0:	463a      	mov	r2, r7
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b0      	blx	r6
 80047f6:	2800      	cmp	r0, #0
 80047f8:	dc08      	bgt.n	800480c <__sflush_r+0xfc>
 80047fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800480c:	4407      	add	r7, r0
 800480e:	eba8 0800 	sub.w	r8, r8, r0
 8004812:	e7e7      	b.n	80047e4 <__sflush_r+0xd4>
 8004814:	dfbffffe 	.word	0xdfbffffe

08004818 <_fflush_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	690b      	ldr	r3, [r1, #16]
 800481c:	4605      	mov	r5, r0
 800481e:	460c      	mov	r4, r1
 8004820:	b913      	cbnz	r3, 8004828 <_fflush_r+0x10>
 8004822:	2500      	movs	r5, #0
 8004824:	4628      	mov	r0, r5
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	b118      	cbz	r0, 8004832 <_fflush_r+0x1a>
 800482a:	6a03      	ldr	r3, [r0, #32]
 800482c:	b90b      	cbnz	r3, 8004832 <_fflush_r+0x1a>
 800482e:	f7ff faeb 	bl	8003e08 <__sinit>
 8004832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f3      	beq.n	8004822 <_fflush_r+0xa>
 800483a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800483c:	07d0      	lsls	r0, r2, #31
 800483e:	d404      	bmi.n	800484a <_fflush_r+0x32>
 8004840:	0599      	lsls	r1, r3, #22
 8004842:	d402      	bmi.n	800484a <_fflush_r+0x32>
 8004844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004846:	f7ff fbf0 	bl	800402a <__retarget_lock_acquire_recursive>
 800484a:	4628      	mov	r0, r5
 800484c:	4621      	mov	r1, r4
 800484e:	f7ff ff5f 	bl	8004710 <__sflush_r>
 8004852:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004854:	07da      	lsls	r2, r3, #31
 8004856:	4605      	mov	r5, r0
 8004858:	d4e4      	bmi.n	8004824 <_fflush_r+0xc>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	059b      	lsls	r3, r3, #22
 800485e:	d4e1      	bmi.n	8004824 <_fflush_r+0xc>
 8004860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004862:	f7ff fbe3 	bl	800402c <__retarget_lock_release_recursive>
 8004866:	e7dd      	b.n	8004824 <_fflush_r+0xc>

08004868 <__malloc_lock>:
 8004868:	4801      	ldr	r0, [pc, #4]	@ (8004870 <__malloc_lock+0x8>)
 800486a:	f7ff bbde 	b.w	800402a <__retarget_lock_acquire_recursive>
 800486e:	bf00      	nop
 8004870:	20000304 	.word	0x20000304

08004874 <__malloc_unlock>:
 8004874:	4801      	ldr	r0, [pc, #4]	@ (800487c <__malloc_unlock+0x8>)
 8004876:	f7ff bbd9 	b.w	800402c <__retarget_lock_release_recursive>
 800487a:	bf00      	nop
 800487c:	20000304 	.word	0x20000304

08004880 <__sread>:
 8004880:	b510      	push	{r4, lr}
 8004882:	460c      	mov	r4, r1
 8004884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004888:	f000 f978 	bl	8004b7c <_read_r>
 800488c:	2800      	cmp	r0, #0
 800488e:	bfab      	itete	ge
 8004890:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004892:	89a3      	ldrhlt	r3, [r4, #12]
 8004894:	181b      	addge	r3, r3, r0
 8004896:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800489a:	bfac      	ite	ge
 800489c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800489e:	81a3      	strhlt	r3, [r4, #12]
 80048a0:	bd10      	pop	{r4, pc}

080048a2 <__swrite>:
 80048a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a6:	461f      	mov	r7, r3
 80048a8:	898b      	ldrh	r3, [r1, #12]
 80048aa:	05db      	lsls	r3, r3, #23
 80048ac:	4605      	mov	r5, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	4616      	mov	r6, r2
 80048b2:	d505      	bpl.n	80048c0 <__swrite+0x1e>
 80048b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b8:	2302      	movs	r3, #2
 80048ba:	2200      	movs	r2, #0
 80048bc:	f000 f94c 	bl	8004b58 <_lseek_r>
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048ca:	81a3      	strh	r3, [r4, #12]
 80048cc:	4632      	mov	r2, r6
 80048ce:	463b      	mov	r3, r7
 80048d0:	4628      	mov	r0, r5
 80048d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d6:	f000 b973 	b.w	8004bc0 <_write_r>

080048da <__sseek>:
 80048da:	b510      	push	{r4, lr}
 80048dc:	460c      	mov	r4, r1
 80048de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e2:	f000 f939 	bl	8004b58 <_lseek_r>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	bf15      	itete	ne
 80048ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048f6:	81a3      	strheq	r3, [r4, #12]
 80048f8:	bf18      	it	ne
 80048fa:	81a3      	strhne	r3, [r4, #12]
 80048fc:	bd10      	pop	{r4, pc}

080048fe <__sclose>:
 80048fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004902:	f000 b8f7 	b.w	8004af4 <_close_r>

08004906 <__swbuf_r>:
 8004906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004908:	460e      	mov	r6, r1
 800490a:	4614      	mov	r4, r2
 800490c:	4605      	mov	r5, r0
 800490e:	b118      	cbz	r0, 8004918 <__swbuf_r+0x12>
 8004910:	6a03      	ldr	r3, [r0, #32]
 8004912:	b90b      	cbnz	r3, 8004918 <__swbuf_r+0x12>
 8004914:	f7ff fa78 	bl	8003e08 <__sinit>
 8004918:	69a3      	ldr	r3, [r4, #24]
 800491a:	60a3      	str	r3, [r4, #8]
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	071a      	lsls	r2, r3, #28
 8004920:	d501      	bpl.n	8004926 <__swbuf_r+0x20>
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	b943      	cbnz	r3, 8004938 <__swbuf_r+0x32>
 8004926:	4621      	mov	r1, r4
 8004928:	4628      	mov	r0, r5
 800492a:	f000 f82b 	bl	8004984 <__swsetup_r>
 800492e:	b118      	cbz	r0, 8004938 <__swbuf_r+0x32>
 8004930:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004934:	4638      	mov	r0, r7
 8004936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	6922      	ldr	r2, [r4, #16]
 800493c:	1a98      	subs	r0, r3, r2
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	b2f6      	uxtb	r6, r6
 8004942:	4283      	cmp	r3, r0
 8004944:	4637      	mov	r7, r6
 8004946:	dc05      	bgt.n	8004954 <__swbuf_r+0x4e>
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f7ff ff64 	bl	8004818 <_fflush_r>
 8004950:	2800      	cmp	r0, #0
 8004952:	d1ed      	bne.n	8004930 <__swbuf_r+0x2a>
 8004954:	68a3      	ldr	r3, [r4, #8]
 8004956:	3b01      	subs	r3, #1
 8004958:	60a3      	str	r3, [r4, #8]
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	6022      	str	r2, [r4, #0]
 8004960:	701e      	strb	r6, [r3, #0]
 8004962:	6962      	ldr	r2, [r4, #20]
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	429a      	cmp	r2, r3
 8004968:	d004      	beq.n	8004974 <__swbuf_r+0x6e>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	07db      	lsls	r3, r3, #31
 800496e:	d5e1      	bpl.n	8004934 <__swbuf_r+0x2e>
 8004970:	2e0a      	cmp	r6, #10
 8004972:	d1df      	bne.n	8004934 <__swbuf_r+0x2e>
 8004974:	4621      	mov	r1, r4
 8004976:	4628      	mov	r0, r5
 8004978:	f7ff ff4e 	bl	8004818 <_fflush_r>
 800497c:	2800      	cmp	r0, #0
 800497e:	d0d9      	beq.n	8004934 <__swbuf_r+0x2e>
 8004980:	e7d6      	b.n	8004930 <__swbuf_r+0x2a>
	...

08004984 <__swsetup_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <__swsetup_r+0xa8>)
 8004988:	4605      	mov	r5, r0
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	460c      	mov	r4, r1
 800498e:	b118      	cbz	r0, 8004998 <__swsetup_r+0x14>
 8004990:	6a03      	ldr	r3, [r0, #32]
 8004992:	b90b      	cbnz	r3, 8004998 <__swsetup_r+0x14>
 8004994:	f7ff fa38 	bl	8003e08 <__sinit>
 8004998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800499c:	0719      	lsls	r1, r3, #28
 800499e:	d422      	bmi.n	80049e6 <__swsetup_r+0x62>
 80049a0:	06da      	lsls	r2, r3, #27
 80049a2:	d407      	bmi.n	80049b4 <__swsetup_r+0x30>
 80049a4:	2209      	movs	r2, #9
 80049a6:	602a      	str	r2, [r5, #0]
 80049a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049b2:	e033      	b.n	8004a1c <__swsetup_r+0x98>
 80049b4:	0758      	lsls	r0, r3, #29
 80049b6:	d512      	bpl.n	80049de <__swsetup_r+0x5a>
 80049b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049ba:	b141      	cbz	r1, 80049ce <__swsetup_r+0x4a>
 80049bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049c0:	4299      	cmp	r1, r3
 80049c2:	d002      	beq.n	80049ca <__swsetup_r+0x46>
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 f90d 	bl	8004be4 <_free_r>
 80049ca:	2300      	movs	r3, #0
 80049cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	2300      	movs	r3, #0
 80049d8:	6063      	str	r3, [r4, #4]
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	89a3      	ldrh	r3, [r4, #12]
 80049e0:	f043 0308 	orr.w	r3, r3, #8
 80049e4:	81a3      	strh	r3, [r4, #12]
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	b94b      	cbnz	r3, 80049fe <__swsetup_r+0x7a>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80049f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f4:	d003      	beq.n	80049fe <__swsetup_r+0x7a>
 80049f6:	4621      	mov	r1, r4
 80049f8:	4628      	mov	r0, r5
 80049fa:	f000 f83f 	bl	8004a7c <__smakebuf_r>
 80049fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a02:	f013 0201 	ands.w	r2, r3, #1
 8004a06:	d00a      	beq.n	8004a1e <__swsetup_r+0x9a>
 8004a08:	2200      	movs	r2, #0
 8004a0a:	60a2      	str	r2, [r4, #8]
 8004a0c:	6962      	ldr	r2, [r4, #20]
 8004a0e:	4252      	negs	r2, r2
 8004a10:	61a2      	str	r2, [r4, #24]
 8004a12:	6922      	ldr	r2, [r4, #16]
 8004a14:	b942      	cbnz	r2, 8004a28 <__swsetup_r+0xa4>
 8004a16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a1a:	d1c5      	bne.n	80049a8 <__swsetup_r+0x24>
 8004a1c:	bd38      	pop	{r3, r4, r5, pc}
 8004a1e:	0799      	lsls	r1, r3, #30
 8004a20:	bf58      	it	pl
 8004a22:	6962      	ldrpl	r2, [r4, #20]
 8004a24:	60a2      	str	r2, [r4, #8]
 8004a26:	e7f4      	b.n	8004a12 <__swsetup_r+0x8e>
 8004a28:	2000      	movs	r0, #0
 8004a2a:	e7f7      	b.n	8004a1c <__swsetup_r+0x98>
 8004a2c:	20000018 	.word	0x20000018

08004a30 <__swhatbuf_r>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	460c      	mov	r4, r1
 8004a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a38:	2900      	cmp	r1, #0
 8004a3a:	b096      	sub	sp, #88	@ 0x58
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	461e      	mov	r6, r3
 8004a40:	da0d      	bge.n	8004a5e <__swhatbuf_r+0x2e>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	bf14      	ite	ne
 8004a4e:	2340      	movne	r3, #64	@ 0x40
 8004a50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a54:	2000      	movs	r0, #0
 8004a56:	6031      	str	r1, [r6, #0]
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	b016      	add	sp, #88	@ 0x58
 8004a5c:	bd70      	pop	{r4, r5, r6, pc}
 8004a5e:	466a      	mov	r2, sp
 8004a60:	f000 f858 	bl	8004b14 <_fstat_r>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	dbec      	blt.n	8004a42 <__swhatbuf_r+0x12>
 8004a68:	9901      	ldr	r1, [sp, #4]
 8004a6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a72:	4259      	negs	r1, r3
 8004a74:	4159      	adcs	r1, r3
 8004a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a7a:	e7eb      	b.n	8004a54 <__swhatbuf_r+0x24>

08004a7c <__smakebuf_r>:
 8004a7c:	898b      	ldrh	r3, [r1, #12]
 8004a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a80:	079d      	lsls	r5, r3, #30
 8004a82:	4606      	mov	r6, r0
 8004a84:	460c      	mov	r4, r1
 8004a86:	d507      	bpl.n	8004a98 <__smakebuf_r+0x1c>
 8004a88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	6123      	str	r3, [r4, #16]
 8004a90:	2301      	movs	r3, #1
 8004a92:	6163      	str	r3, [r4, #20]
 8004a94:	b003      	add	sp, #12
 8004a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a98:	ab01      	add	r3, sp, #4
 8004a9a:	466a      	mov	r2, sp
 8004a9c:	f7ff ffc8 	bl	8004a30 <__swhatbuf_r>
 8004aa0:	9f00      	ldr	r7, [sp, #0]
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7ff fc24 	bl	80042f4 <_malloc_r>
 8004aac:	b948      	cbnz	r0, 8004ac2 <__smakebuf_r+0x46>
 8004aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab2:	059a      	lsls	r2, r3, #22
 8004ab4:	d4ee      	bmi.n	8004a94 <__smakebuf_r+0x18>
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	f043 0302 	orr.w	r3, r3, #2
 8004abe:	81a3      	strh	r3, [r4, #12]
 8004ac0:	e7e2      	b.n	8004a88 <__smakebuf_r+0xc>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	6020      	str	r0, [r4, #0]
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004ad2:	b15b      	cbz	r3, 8004aec <__smakebuf_r+0x70>
 8004ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f000 f82d 	bl	8004b38 <_isatty_r>
 8004ade:	b128      	cbz	r0, 8004aec <__smakebuf_r+0x70>
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	431d      	orrs	r5, r3
 8004af0:	81a5      	strh	r5, [r4, #12]
 8004af2:	e7cf      	b.n	8004a94 <__smakebuf_r+0x18>

08004af4 <_close_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d06      	ldr	r5, [pc, #24]	@ (8004b10 <_close_r+0x1c>)
 8004af8:	2300      	movs	r3, #0
 8004afa:	4604      	mov	r4, r0
 8004afc:	4608      	mov	r0, r1
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	f7fc f8b3 	bl	8000c6a <_close>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d102      	bne.n	8004b0e <_close_r+0x1a>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b103      	cbz	r3, 8004b0e <_close_r+0x1a>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	20000310 	.word	0x20000310

08004b14 <_fstat_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d07      	ldr	r5, [pc, #28]	@ (8004b34 <_fstat_r+0x20>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	f7fc f8ae 	bl	8000c82 <_fstat>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	d102      	bne.n	8004b30 <_fstat_r+0x1c>
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	b103      	cbz	r3, 8004b30 <_fstat_r+0x1c>
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	20000310 	.word	0x20000310

08004b38 <_isatty_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4d06      	ldr	r5, [pc, #24]	@ (8004b54 <_isatty_r+0x1c>)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4604      	mov	r4, r0
 8004b40:	4608      	mov	r0, r1
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	f7fc f8ad 	bl	8000ca2 <_isatty>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_isatty_r+0x1a>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_isatty_r+0x1a>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	20000310 	.word	0x20000310

08004b58 <_lseek_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d07      	ldr	r5, [pc, #28]	@ (8004b78 <_lseek_r+0x20>)
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	4608      	mov	r0, r1
 8004b60:	4611      	mov	r1, r2
 8004b62:	2200      	movs	r2, #0
 8004b64:	602a      	str	r2, [r5, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7fc f8a6 	bl	8000cb8 <_lseek>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_lseek_r+0x1e>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_lseek_r+0x1e>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	20000310 	.word	0x20000310

08004b7c <_read_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d07      	ldr	r5, [pc, #28]	@ (8004b9c <_read_r+0x20>)
 8004b80:	4604      	mov	r4, r0
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7fc f850 	bl	8000c30 <_read>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_read_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_read_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	20000310 	.word	0x20000310

08004ba0 <_sbrk_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d06      	ldr	r5, [pc, #24]	@ (8004bbc <_sbrk_r+0x1c>)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	f7fc f892 	bl	8000cd4 <_sbrk>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d102      	bne.n	8004bba <_sbrk_r+0x1a>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	b103      	cbz	r3, 8004bba <_sbrk_r+0x1a>
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
 8004bbc:	20000310 	.word	0x20000310

08004bc0 <_write_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4d07      	ldr	r5, [pc, #28]	@ (8004be0 <_write_r+0x20>)
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	4608      	mov	r0, r1
 8004bc8:	4611      	mov	r1, r2
 8004bca:	2200      	movs	r2, #0
 8004bcc:	602a      	str	r2, [r5, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f7fc f8c8 	bl	8000d64 <_write>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_write_r+0x1e>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_write_r+0x1e>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20000310 	.word	0x20000310

08004be4 <_free_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4605      	mov	r5, r0
 8004be8:	2900      	cmp	r1, #0
 8004bea:	d041      	beq.n	8004c70 <_free_r+0x8c>
 8004bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bf0:	1f0c      	subs	r4, r1, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bfb8      	it	lt
 8004bf6:	18e4      	addlt	r4, r4, r3
 8004bf8:	f7ff fe36 	bl	8004868 <__malloc_lock>
 8004bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c74 <_free_r+0x90>)
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	b933      	cbnz	r3, 8004c10 <_free_r+0x2c>
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	6014      	str	r4, [r2, #0]
 8004c06:	4628      	mov	r0, r5
 8004c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c0c:	f7ff be32 	b.w	8004874 <__malloc_unlock>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d908      	bls.n	8004c26 <_free_r+0x42>
 8004c14:	6820      	ldr	r0, [r4, #0]
 8004c16:	1821      	adds	r1, r4, r0
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	bf01      	itttt	eq
 8004c1c:	6819      	ldreq	r1, [r3, #0]
 8004c1e:	685b      	ldreq	r3, [r3, #4]
 8004c20:	1809      	addeq	r1, r1, r0
 8004c22:	6021      	streq	r1, [r4, #0]
 8004c24:	e7ed      	b.n	8004c02 <_free_r+0x1e>
 8004c26:	461a      	mov	r2, r3
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	b10b      	cbz	r3, 8004c30 <_free_r+0x4c>
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	d9fa      	bls.n	8004c26 <_free_r+0x42>
 8004c30:	6811      	ldr	r1, [r2, #0]
 8004c32:	1850      	adds	r0, r2, r1
 8004c34:	42a0      	cmp	r0, r4
 8004c36:	d10b      	bne.n	8004c50 <_free_r+0x6c>
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	4401      	add	r1, r0
 8004c3c:	1850      	adds	r0, r2, r1
 8004c3e:	4283      	cmp	r3, r0
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	d1e0      	bne.n	8004c06 <_free_r+0x22>
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	6053      	str	r3, [r2, #4]
 8004c4a:	4408      	add	r0, r1
 8004c4c:	6010      	str	r0, [r2, #0]
 8004c4e:	e7da      	b.n	8004c06 <_free_r+0x22>
 8004c50:	d902      	bls.n	8004c58 <_free_r+0x74>
 8004c52:	230c      	movs	r3, #12
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	e7d6      	b.n	8004c06 <_free_r+0x22>
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	1821      	adds	r1, r4, r0
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	bf04      	itt	eq
 8004c60:	6819      	ldreq	r1, [r3, #0]
 8004c62:	685b      	ldreq	r3, [r3, #4]
 8004c64:	6063      	str	r3, [r4, #4]
 8004c66:	bf04      	itt	eq
 8004c68:	1809      	addeq	r1, r1, r0
 8004c6a:	6021      	streq	r1, [r4, #0]
 8004c6c:	6054      	str	r4, [r2, #4]
 8004c6e:	e7ca      	b.n	8004c06 <_free_r+0x22>
 8004c70:	bd38      	pop	{r3, r4, r5, pc}
 8004c72:	bf00      	nop
 8004c74:	2000030c 	.word	0x2000030c

08004c78 <_init>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr

08004c84 <_fini>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	bf00      	nop
 8004c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8a:	bc08      	pop	{r3}
 8004c8c:	469e      	mov	lr, r3
 8004c8e:	4770      	bx	lr
