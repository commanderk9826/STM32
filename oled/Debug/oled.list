
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003d5c  08003d5c  00004d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d7c  08003d7c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d7c  08003d7c  00004d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d84  08003d84  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d84  08003d84  00004d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d88  08003d88  00004d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  2000000c  08003d98  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08003d98  00005584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcfc  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c1  00000000  00000000  00012d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00015000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000941  00000000  00000000  00015be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f4d  00000000  00000000  00016521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe57  00000000  00000000  0002e46e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c69  00000000  00000000  0003e2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2f2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000314c  00000000  00000000  000d2f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d60c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d44 	.word	0x08003d44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003d44 	.word	0x08003d44

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <app>:
extern UART_HandleTypeDef huart2;
extern ADC_HandleTypeDef hadc1;

uint16_t adcValue[2];

void app(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	//uart 초기
	initUart(&huart2);
 80004cc:	4811      	ldr	r0, [pc, #68]	@ (8000514 <app+0x4c>)
 80004ce:	f000 fcdd 	bl	8000e8c <initUart>
	//ssd1306 초기화
	ssd1306_Init();
 80004d2:	f000 fa03 	bl	80008dc <ssd1306_Init>
	ssd1306_Fill(0);
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 fa6a 	bl	80009b0 <ssd1306_Fill>

	// adc 초기화
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValue, 2);
 80004dc:	2202      	movs	r2, #2
 80004de:	490e      	ldr	r1, [pc, #56]	@ (8000518 <app+0x50>)
 80004e0:	480e      	ldr	r0, [pc, #56]	@ (800051c <app+0x54>)
 80004e2:	f000 fded 	bl	80010c0 <HAL_ADC_Start_DMA>
	while(1){
		scrollLeftBySoft();
 80004e6:	f000 fb35 	bl	8000b54 <scrollLeftBySoft>
		ssd1306_DrawPixel(127, adcValue[0]/65, 1);
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <app+0x50>)
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000520 <app+0x58>)
 80004f0:	fba2 2303 	umull	r2, r3, r2, r3
 80004f4:	099b      	lsrs	r3, r3, #6
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	207f      	movs	r0, #127	@ 0x7f
 8000500:	f000 faa2 	bl	8000a48 <ssd1306_DrawPixel>
		ssd1306_UpdateScreen();
 8000504:	f000 fa78 	bl	80009f8 <ssd1306_UpdateScreen>
		HAL_Delay(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f000 fd71 	bl	8000ff0 <HAL_Delay>
		scrollLeftBySoft();
 800050e:	bf00      	nop
 8000510:	e7e9      	b.n	80004e6 <app+0x1e>
 8000512:	bf00      	nop
 8000514:	20000128 	.word	0x20000128
 8000518:	20000028 	.word	0x20000028
 800051c:	2000002c 	.word	0x2000002c
 8000520:	fc0fc0fd 	.word	0xfc0fc0fd

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fcf0 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f80e 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f942 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 f920 	bl	8000778 <MX_DMA_Init>
  MX_I2C1_Init();
 8000538:	f000 f8c6 	bl	80006c8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800053c:	f000 f8f2 	bl	8000724 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000540:	f000 f862 	bl	8000608 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000544:	f7ff ffc0 	bl	80004c8 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <main+0x24>

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	@ 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fbb8 	bl	8003cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <SystemClock_Config+0xb4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a21      	ldr	r2, [pc, #132]	@ (8000600 <SystemClock_Config+0xb4>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemClock_Config+0xb4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <SystemClock_Config+0xb8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <SystemClock_Config+0xb8>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <SystemClock_Config+0xb8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fc0b 	bl	8002dd8 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005c8:	f000 f93a 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fe6e 	bl	80032c8 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005f2:	f000 f925 	bl	8000840 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	@ 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061a:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <MX_ADC1_Init+0xb4>)
 800061c:	4a28      	ldr	r2, [pc, #160]	@ (80006c0 <MX_ADC1_Init+0xb8>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000620:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <MX_ADC1_Init+0xb4>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000626:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <MX_ADC1_Init+0xb4>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800062c:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <MX_ADC1_Init+0xb4>)
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000632:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <MX_ADC1_Init+0xb4>)
 8000634:	2201      	movs	r2, #1
 8000636:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000638:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <MX_ADC1_Init+0xb4>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <MX_ADC1_Init+0xb4>)
 8000642:	2200      	movs	r2, #0
 8000644:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <MX_ADC1_Init+0xb4>)
 8000648:	4a1e      	ldr	r2, [pc, #120]	@ (80006c4 <MX_ADC1_Init+0xbc>)
 800064a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_ADC1_Init+0xb4>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_ADC1_Init+0xb4>)
 8000654:	2202      	movs	r2, #2
 8000656:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_ADC1_Init+0xb4>)
 800065a:	2201      	movs	r2, #1
 800065c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000660:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_ADC1_Init+0xb4>)
 8000662:	2201      	movs	r2, #1
 8000664:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000666:	4815      	ldr	r0, [pc, #84]	@ (80006bc <MX_ADC1_Init+0xb4>)
 8000668:	f000 fce6 	bl	8001038 <HAL_ADC_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f8e5 	bl	8000840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800067e:	2303      	movs	r3, #3
 8000680:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	4619      	mov	r1, r3
 8000686:	480d      	ldr	r0, [pc, #52]	@ (80006bc <MX_ADC1_Init+0xb4>)
 8000688:	f000 fe28 	bl	80012dc <HAL_ADC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000692:	f000 f8d5 	bl	8000840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000696:	2304      	movs	r3, #4
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	@ (80006bc <MX_ADC1_Init+0xb4>)
 80006a4:	f000 fe1a 	bl	80012dc <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006ae:	f000 f8c7 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000002c 	.word	0x2000002c
 80006c0:	40012000 	.word	0x40012000
 80006c4:	0f000001 	.word	0x0f000001

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	@ (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f001 feb9 	bl	800247c <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f896 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000d4 	.word	0x200000d4
 800071c:	40005400 	.word	0x40005400
 8000720:	00061a80 	.word	0x00061a80

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f002 ff94 	bl	8003688 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f86b 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000128 	.word	0x20000128
 8000774:	40004400 	.word	0x40004400

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_DMA_Init+0x3c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <MX_DMA_Init+0x3c>)
 8000788:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2038      	movs	r0, #56	@ 0x38
 80007a0:	f001 f927 	bl	80019f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a4:	2038      	movs	r0, #56	@ 0x38
 80007a6:	f001 f940 	bl	8001a2a <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_GPIO_Init+0x80>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a18      	ldr	r2, [pc, #96]	@ (8000838 <MX_GPIO_Init+0x80>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_GPIO_Init+0x80>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_GPIO_Init+0x80>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a11      	ldr	r2, [pc, #68]	@ (8000838 <MX_GPIO_Init+0x80>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_GPIO_Init+0x80>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <MX_GPIO_Init+0x84>)
 800080e:	f001 fe1b 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OledReset_Pin */
  GPIO_InitStruct.Pin = OledReset_Pin;
 8000812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OledReset_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_GPIO_Init+0x84>)
 800082c:	f001 fc88 	bl	8002140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <ssd1306_Reset>:
#include <string.h>  // For memcpy
#include "main.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000856:	4807      	ldr	r0, [pc, #28]	@ (8000874 <ssd1306_Reset+0x28>)
 8000858:	f001 fdf6 	bl	8002448 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fbc7 	bl	8000ff0 <HAL_Delay>
    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 1);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000868:	4802      	ldr	r0, [pc, #8]	@ (8000874 <ssd1306_Reset+0x28>)
 800086a:	f001 fded 	bl	8002448 <HAL_GPIO_WritePin>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020000 	.word	0x40020000

08000878 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af04      	add	r7, sp, #16
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000886:	9302      	str	r3, [sp, #8]
 8000888:	2301      	movs	r3, #1
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	2200      	movs	r2, #0
 8000894:	2178      	movs	r1, #120	@ 0x78
 8000896:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <ssd1306_WriteCommand+0x2c>)
 8000898:	f001 ff34 	bl	8002704 <HAL_I2C_Mem_Write>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000d4 	.word	0x200000d4

080008a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008ba:	9202      	str	r2, [sp, #8]
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2301      	movs	r3, #1
 80008c4:	2240      	movs	r2, #64	@ 0x40
 80008c6:	2178      	movs	r1, #120	@ 0x78
 80008c8:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <ssd1306_WriteData+0x30>)
 80008ca:	f001 ff1b 	bl	8002704 <HAL_I2C_Mem_Write>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000d4 	.word	0x200000d4

080008dc <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80008e0:	f7ff ffb4 	bl	800084c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80008e4:	2064      	movs	r0, #100	@ 0x64
 80008e6:	f000 fb83 	bl	8000ff0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f914 	bl	8000b18 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80008f0:	2020      	movs	r0, #32
 80008f2:	f7ff ffc1 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff ffbe 	bl	8000878 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008fc:	20b0      	movs	r0, #176	@ 0xb0
 80008fe:	f7ff ffbb 	bl	8000878 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000902:	20c8      	movs	r0, #200	@ 0xc8
 8000904:	f7ff ffb8 	bl	8000878 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ffb5 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800090e:	2010      	movs	r0, #16
 8000910:	f7ff ffb2 	bl	8000878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000914:	2040      	movs	r0, #64	@ 0x40
 8000916:	f7ff ffaf 	bl	8000878 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800091a:	20ff      	movs	r0, #255	@ 0xff
 800091c:	f000 f8e8 	bl	8000af0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000920:	20a1      	movs	r0, #161	@ 0xa1
 8000922:	f7ff ffa9 	bl	8000878 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000926:	20a6      	movs	r0, #166	@ 0xa6
 8000928:	f7ff ffa6 	bl	8000878 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800092c:	20a8      	movs	r0, #168	@ 0xa8
 800092e:	f7ff ffa3 	bl	8000878 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000932:	203f      	movs	r0, #63	@ 0x3f
 8000934:	f7ff ffa0 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000938:	20a4      	movs	r0, #164	@ 0xa4
 800093a:	f7ff ff9d 	bl	8000878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800093e:	20d3      	movs	r0, #211	@ 0xd3
 8000940:	f7ff ff9a 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff ff97 	bl	8000878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800094a:	20d5      	movs	r0, #213	@ 0xd5
 800094c:	f7ff ff94 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000950:	20f0      	movs	r0, #240	@ 0xf0
 8000952:	f7ff ff91 	bl	8000878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000956:	20d9      	movs	r0, #217	@ 0xd9
 8000958:	f7ff ff8e 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800095c:	2022      	movs	r0, #34	@ 0x22
 800095e:	f7ff ff8b 	bl	8000878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000962:	20da      	movs	r0, #218	@ 0xda
 8000964:	f7ff ff88 	bl	8000878 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000968:	2012      	movs	r0, #18
 800096a:	f7ff ff85 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800096e:	20db      	movs	r0, #219	@ 0xdb
 8000970:	f7ff ff82 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000974:	2020      	movs	r0, #32
 8000976:	f7ff ff7f 	bl	8000878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800097a:	208d      	movs	r0, #141	@ 0x8d
 800097c:	f7ff ff7c 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000980:	2014      	movs	r0, #20
 8000982:	f7ff ff79 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000986:	2001      	movs	r0, #1
 8000988:	f000 f8c6 	bl	8000b18 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800098c:	2000      	movs	r0, #0
 800098e:	f000 f80f 	bl	80009b0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000992:	f000 f831 	bl	80009f8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000996:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <ssd1306_Init+0xd0>)
 8000998:	2200      	movs	r2, #0
 800099a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800099c:	4b03      	ldr	r3, [pc, #12]	@ (80009ac <ssd1306_Init+0xd0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80009a2:	4b02      	ldr	r3, [pc, #8]	@ (80009ac <ssd1306_Init+0xd0>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	711a      	strb	r2, [r3, #4]
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000570 	.word	0x20000570

080009b0 <ssd1306_Fill>:
{
	ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e00d      	b.n	80009dc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <ssd1306_Fill+0x1a>
 80009c6:	2100      	movs	r1, #0
 80009c8:	e000      	b.n	80009cc <ssd1306_Fill+0x1c>
 80009ca:	21ff      	movs	r1, #255	@ 0xff
 80009cc:	4a09      	ldr	r2, [pc, #36]	@ (80009f4 <ssd1306_Fill+0x44>)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4413      	add	r3, r2
 80009d2:	460a      	mov	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3301      	adds	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009e2:	d3ed      	bcc.n	80009c0 <ssd1306_Fill+0x10>
    }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000170 	.word	0x20000170

080009f8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	e016      	b.n	8000a32 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	3b50      	subs	r3, #80	@ 0x50
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff34 	bl	8000878 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x02);
 8000a10:	2002      	movs	r0, #2
 8000a12:	f7ff ff31 	bl	8000878 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000a16:	2010      	movs	r0, #16
 8000a18:	f7ff ff2e 	bl	8000878 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	01db      	lsls	r3, r3, #7
 8000a20:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <ssd1306_UpdateScreen+0x4c>)
 8000a22:	4413      	add	r3, r2
 8000a24:	2180      	movs	r1, #128	@ 0x80
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff3e 	bl	80008a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b07      	cmp	r3, #7
 8000a36:	d9e5      	bls.n	8000a04 <ssd1306_UpdateScreen+0xc>
    }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000170 	.word	0x20000170

08000a48 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	460b      	mov	r3, r1
 8000a54:	71bb      	strb	r3, [r7, #6]
 8000a56:	4613      	mov	r3, r2
 8000a58:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	db3d      	blt.n	8000ade <ssd1306_DrawPixel+0x96>
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a66:	d83a      	bhi.n	8000ade <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000a68:	797b      	ldrb	r3, [r7, #5]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d11a      	bne.n	8000aa4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	08db      	lsrs	r3, r3, #3
 8000a74:	b2d8      	uxtb	r0, r3
 8000a76:	4603      	mov	r3, r0
 8000a78:	01db      	lsls	r3, r3, #7
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aec <ssd1306_DrawPixel+0xa4>)
 8000a7e:	5cd3      	ldrb	r3, [r2, r3]
 8000a80:	b25a      	sxtb	r2, r3
 8000a82:	79bb      	ldrb	r3, [r7, #6]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2101      	movs	r1, #1
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b259      	sxtb	r1, r3
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	4603      	mov	r3, r0
 8000a98:	01db      	lsls	r3, r3, #7
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b2c9      	uxtb	r1, r1
 8000a9e:	4a13      	ldr	r2, [pc, #76]	@ (8000aec <ssd1306_DrawPixel+0xa4>)
 8000aa0:	54d1      	strb	r1, [r2, r3]
 8000aa2:	e01d      	b.n	8000ae0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	b2d8      	uxtb	r0, r3
 8000aac:	4603      	mov	r3, r0
 8000aae:	01db      	lsls	r3, r3, #7
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <ssd1306_DrawPixel+0xa4>)
 8000ab4:	5cd3      	ldrb	r3, [r2, r3]
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	2101      	movs	r1, #1
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	4013      	ands	r3, r2
 8000acc:	b259      	sxtb	r1, r3
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	01db      	lsls	r3, r3, #7
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b2c9      	uxtb	r1, r1
 8000ad8:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <ssd1306_DrawPixel+0xa4>)
 8000ada:	54d1      	strb	r1, [r2, r3]
 8000adc:	e000      	b.n	8000ae0 <ssd1306_DrawPixel+0x98>
        return;
 8000ade:	bf00      	nop
    }
}
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000170 	.word	0x20000170

08000af0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000afa:	2381      	movs	r3, #129	@ 0x81
 8000afc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff feb9 	bl	8000878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff feb5 	bl	8000878 <ssd1306_WriteCommand>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d005      	beq.n	8000b34 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000b28:	23af      	movs	r3, #175	@ 0xaf
 8000b2a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <ssd1306_SetDisplayOn+0x38>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	715a      	strb	r2, [r3, #5]
 8000b32:	e004      	b.n	8000b3e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000b34:	23ae      	movs	r3, #174	@ 0xae
 8000b36:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <ssd1306_SetDisplayOn+0x38>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe99 	bl	8000878 <ssd1306_WriteCommand>
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000570 	.word	0x20000570

08000b54 <scrollLeftBySoft>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void scrollLeftBySoft() {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	memcpy(SSD1306_Buffer, &SSD1306_Buffer[1], 1023);
 8000b5a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000b5e:	490c      	ldr	r1, [pc, #48]	@ (8000b90 <scrollLeftBySoft+0x3c>)
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <scrollLeftBySoft+0x40>)
 8000b62:	f003 f8e1 	bl	8003d28 <memcpy>
	for(int page = 0; page < 8; page++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	e008      	b.n	8000b7e <scrollLeftBySoft+0x2a>
		SSD1306_Buffer[(page*128)+127] = 0;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	01db      	lsls	r3, r3, #7
 8000b70:	337f      	adds	r3, #127	@ 0x7f
 8000b72:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <scrollLeftBySoft+0x40>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	54d1      	strb	r1, [r2, r3]
	for(int page = 0; page < 8; page++)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b07      	cmp	r3, #7
 8000b82:	ddf3      	ble.n	8000b6c <scrollLeftBySoft+0x18>
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000171 	.word	0x20000171
 8000b94:	20000170 	.word	0x20000170

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc0 <HAL_ADC_MspInit+0xd8>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d156      	bne.n	8000cb8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <HAL_ADC_MspInit+0xdc>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a2c      	ldr	r2, [pc, #176]	@ (8000cc4 <HAL_ADC_MspInit+0xdc>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <HAL_ADC_MspInit+0xdc>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <HAL_ADC_MspInit+0xdc>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a25      	ldr	r2, [pc, #148]	@ (8000cc4 <HAL_ADC_MspInit+0xdc>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <HAL_ADC_MspInit+0xdc>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000c42:	2311      	movs	r3, #17
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	481c      	ldr	r0, [pc, #112]	@ (8000cc8 <HAL_ADC_MspInit+0xe0>)
 8000c56:	f001 fa73 	bl	8002140 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <HAL_ADC_MspInit+0xe8>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c82:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c9c:	480b      	ldr	r0, [pc, #44]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000c9e:	f000 fedf 	bl	8001a60 <HAL_DMA_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ca8:	f7ff fdca 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000cb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cb2:	4a06      	ldr	r2, [pc, #24]	@ (8000ccc <HAL_ADC_MspInit+0xe4>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	@ 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40012000 	.word	0x40012000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	20000074 	.word	0x20000074
 8000cd0:	40026410 	.word	0x40026410

08000cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	@ (8000d58 <HAL_I2C_MspInit+0x84>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12b      	bne.n	8000d4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	23c0      	movs	r3, #192	@ 0xc0
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <HAL_I2C_MspInit+0x8c>)
 8000d2e:	f001 fa07 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12b      	bne.n	8000dde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <HAL_UART_MspInit+0x8c>)
 8000dda:	f001 f9b1 	bl	8002140 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	@ 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f8b1 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <DMA2_Stream0_IRQHandler+0x10>)
 8000e5a:	f000 ff07 	bl	8001c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000074 	.word	0x20000074

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <initUart>:

}


// uart 장치 초기
void initUart(UART_HandleTypeDef *inHuart){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	//uart 장치 주소 백업
	myHuart = inHuart;
 8000e94:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <initUart+0x24>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
	//인터럽트 셋팅
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <initUart+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4904      	ldr	r1, [pc, #16]	@ (8000eb4 <initUart+0x28>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fc40 	bl	8003728 <HAL_UART_Receive_IT>

}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000578 	.word	0x20000578
 8000eb4:	2000057c 	.word	0x2000057c

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ebc:	f7ff ffd4 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec2:	490d      	ldr	r1, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f002 fefb 	bl	8003ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fb1b 	bl	8000524 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000efc:	08003d8c 	.word	0x08003d8c
  ldr r2, =_sbss
 8000f00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f04:	20000584 	.word	0x20000584

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	@ (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	@ (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 fd51 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe2a 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fd69 	bl	8001a46 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f8c:	f000 fd31 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000580 	.word	0x20000580

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000580 	.word	0x20000580

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008

08001038 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e033      	b.n	80010b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fdc6 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b00      	cmp	r3, #0
 8001074:	d118      	bne.n	80010a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800107e:	f023 0302 	bic.w	r3, r3, #2
 8001082:	f043 0202 	orr.w	r2, r3, #2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 fa58 	bl	8001540 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f023 0303 	bic.w	r3, r3, #3
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80010a6:	e001      	b.n	80010ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <HAL_ADC_Start_DMA+0x1e>
 80010da:	2302      	movs	r3, #2
 80010dc:	e0ce      	b.n	800127c <HAL_ADC_Start_DMA+0x1bc>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d018      	beq.n	8001126 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001104:	4b5f      	ldr	r3, [pc, #380]	@ (8001284 <HAL_ADC_Start_DMA+0x1c4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a5f      	ldr	r2, [pc, #380]	@ (8001288 <HAL_ADC_Start_DMA+0x1c8>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	0c9a      	lsrs	r2, r3, #18
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001118:	e002      	b.n	8001120 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	3b01      	subs	r3, #1
 800111e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001134:	d107      	bne.n	8001146 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001144:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	f040 8086 	bne.w	8001262 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001174:	2b00      	cmp	r3, #0
 8001176:	d007      	beq.n	8001188 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001180:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001194:	d106      	bne.n	80011a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	f023 0206 	bic.w	r2, r3, #6
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80011a2:	e002      	b.n	80011aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b2:	4b36      	ldr	r3, [pc, #216]	@ (800128c <HAL_ADC_Start_DMA+0x1cc>)
 80011b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ba:	4a35      	ldr	r2, [pc, #212]	@ (8001290 <HAL_ADC_Start_DMA+0x1d0>)
 80011bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c2:	4a34      	ldr	r2, [pc, #208]	@ (8001294 <HAL_ADC_Start_DMA+0x1d4>)
 80011c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ca:	4a33      	ldr	r2, [pc, #204]	@ (8001298 <HAL_ADC_Start_DMA+0x1d8>)
 80011cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80011d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80011e6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011f6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	334c      	adds	r3, #76	@ 0x4c
 8001202:	4619      	mov	r1, r3
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f000 fcd8 	bl	8001bbc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 031f 	and.w	r3, r3, #31
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10f      	bne.n	8001238 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d129      	bne.n	800127a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	e020      	b.n	800127a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a17      	ldr	r2, [pc, #92]	@ (800129c <HAL_ADC_Start_DMA+0x1dc>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d11b      	bne.n	800127a <HAL_ADC_Start_DMA+0x1ba>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d114      	bne.n	800127a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	e00b      	b.n	800127a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f043 0210 	orr.w	r2, r3, #16
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	431bde83 	.word	0x431bde83
 800128c:	40012300 	.word	0x40012300
 8001290:	08001739 	.word	0x08001739
 8001294:	080017f3 	.word	0x080017f3
 8001298:	0800180f 	.word	0x0800180f
 800129c:	40012000 	.word	0x40012000

080012a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1c>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e113      	b.n	8001520 <HAL_ADC_ConfigChannel+0x244>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b09      	cmp	r3, #9
 8001306:	d925      	bls.n	8001354 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68d9      	ldr	r1, [r3, #12]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	3b1e      	subs	r3, #30
 800131e:	2207      	movs	r2, #7
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43da      	mvns	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	400a      	ands	r2, r1
 800132c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	4603      	mov	r3, r0
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4403      	add	r3, r0
 8001346:	3b1e      	subs	r3, #30
 8001348:	409a      	lsls	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	e022      	b.n	800139a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6919      	ldr	r1, [r3, #16]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	2207      	movs	r2, #7
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6919      	ldr	r1, [r3, #16]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	4603      	mov	r3, r0
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4403      	add	r3, r0
 8001390:	409a      	lsls	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d824      	bhi.n	80013ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	3b05      	subs	r3, #5
 80013b4:	221f      	movs	r2, #31
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	400a      	ands	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b05      	subs	r3, #5
 80013de:	fa00 f203 	lsl.w	r2, r0, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ea:	e04c      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b0c      	cmp	r3, #12
 80013f2:	d824      	bhi.n	800143e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b23      	subs	r3, #35	@ 0x23
 8001406:	221f      	movs	r2, #31
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43da      	mvns	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	400a      	ands	r2, r1
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b23      	subs	r3, #35	@ 0x23
 8001430:	fa00 f203 	lsl.w	r2, r0, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	631a      	str	r2, [r3, #48]	@ 0x30
 800143c:	e023      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b41      	subs	r3, #65	@ 0x41
 8001450:	221f      	movs	r2, #31
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	400a      	ands	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3b41      	subs	r3, #65	@ 0x41
 800147a:	fa00 f203 	lsl.w	r2, r0, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001486:	4b29      	ldr	r3, [pc, #164]	@ (800152c <HAL_ADC_ConfigChannel+0x250>)
 8001488:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <HAL_ADC_ConfigChannel+0x254>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d10f      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x1d8>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d10b      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001530 <HAL_ADC_ConfigChannel+0x254>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d12b      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x23a>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <HAL_ADC_ConfigChannel+0x258>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d003      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0x1f4>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b11      	cmp	r3, #17
 80014ce:	d122      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a11      	ldr	r2, [pc, #68]	@ (8001534 <HAL_ADC_ConfigChannel+0x258>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d111      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f2:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <HAL_ADC_ConfigChannel+0x25c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a11      	ldr	r2, [pc, #68]	@ (800153c <HAL_ADC_ConfigChannel+0x260>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	0c9a      	lsrs	r2, r3, #18
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001508:	e002      	b.n	8001510 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40012300 	.word	0x40012300
 8001530:	40012000 	.word	0x40012000
 8001534:	10000012 	.word	0x10000012
 8001538:	20000000 	.word	0x20000000
 800153c:	431bde83 	.word	0x431bde83

08001540 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001548:	4b79      	ldr	r3, [pc, #484]	@ (8001730 <ADC_Init+0x1f0>)
 800154a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	431a      	orrs	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	021a      	lsls	r2, r3, #8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6899      	ldr	r1, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d2:	4a58      	ldr	r2, [pc, #352]	@ (8001734 <ADC_Init+0x1f4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d022      	beq.n	800161e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6899      	ldr	r1, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6899      	ldr	r1, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	e00f      	b.n	800163e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800162c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800163c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0202 	bic.w	r2, r2, #2
 800164c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6899      	ldr	r1, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7e1b      	ldrb	r3, [r3, #24]
 8001658:	005a      	lsls	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01b      	beq.n	80016a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800167a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800168a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6859      	ldr	r1, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001696:	3b01      	subs	r3, #1
 8001698:	035a      	lsls	r2, r3, #13
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	e007      	b.n	80016b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	051a      	lsls	r2, r3, #20
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016f6:	025a      	lsls	r2, r3, #9
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800170e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6899      	ldr	r1, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	029a      	lsls	r2, r3, #10
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	609a      	str	r2, [r3, #8]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40012300 	.word	0x40012300
 8001734:	0f000001 	.word	0x0f000001

08001738 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001744:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800174e:	2b00      	cmp	r3, #0
 8001750:	d13c      	bne.n	80017cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d12b      	bne.n	80017c4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001770:	2b00      	cmp	r3, #0
 8001772:	d127      	bne.n	80017c4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800178c:	2b00      	cmp	r3, #0
 800178e:	d119      	bne.n	80017c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0220 	bic.w	r2, r2, #32
 800179e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fd6b 	bl	80012a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017ca:	e00e      	b.n	80017ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fd75 	bl	80012c8 <HAL_ADC_ErrorCallback>
}
 80017de:	e004      	b.n	80017ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff fd57 	bl	80012b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2240      	movs	r2, #64	@ 0x40
 8001820:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f043 0204 	orr.w	r2, r3, #4
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f7ff fd4a 	bl	80012c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4907      	ldr	r1, [pc, #28]	@ (80018d8 <__NVIC_EnableIRQ+0x38>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	@ (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	@ (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019bc:	f7ff ff8e 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff29 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff3e 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff8e 	bl	8001930 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5d 	bl	80018dc <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff31 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffa2 	bl	8001998 <SysTick_Config>
 8001a54:	4603      	mov	r3, r0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fab4 	bl	8000fd8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e099      	b.n	8001bb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9c:	e00f      	b.n	8001abe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9e:	f7ff fa9b 	bl	8000fd8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	d908      	bls.n	8001abe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e078      	b.n	8001bb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1e8      	bne.n	8001a9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	4b38      	ldr	r3, [pc, #224]	@ (8001bb8 <HAL_DMA_Init+0x158>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d107      	bne.n	8001b28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	4313      	orrs	r3, r2
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f023 0307 	bic.w	r3, r3, #7
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d117      	bne.n	8001b82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00e      	beq.n	8001b82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fa6f 	bl	8002048 <DMA_CheckFifoParam>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2240      	movs	r2, #64	@ 0x40
 8001b74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e016      	b.n	8001bb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fa26 	bl	8001fdc <DMA_CalcBaseAndBitshift>
 8001b90:	4603      	mov	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b98:	223f      	movs	r2, #63	@ 0x3f
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	f010803f 	.word	0xf010803f

08001bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_DMA_Start_IT+0x26>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e040      	b.n	8001c64 <HAL_DMA_Start_IT+0xa8>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d12f      	bne.n	8001c56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f9b8 	bl	8001f80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	223f      	movs	r2, #63	@ 0x3f
 8001c16:	409a      	lsls	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0216 	orr.w	r2, r2, #22
 8001c2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0208 	orr.w	r2, r2, #8
 8001c42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	e005      	b.n	8001c62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c78:	4b8e      	ldr	r3, [pc, #568]	@ (8001eb4 <HAL_DMA_IRQHandler+0x248>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a8e      	ldr	r2, [pc, #568]	@ (8001eb8 <HAL_DMA_IRQHandler+0x24c>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c96:	2208      	movs	r2, #8
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01a      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0204 	bic.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cdc:	2201      	movs	r2, #1
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d012      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d06:	f043 0202 	orr.w	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d12:	2204      	movs	r2, #4
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d30:	2204      	movs	r2, #4
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3c:	f043 0204 	orr.w	r2, r3, #4
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d48:	2210      	movs	r2, #16
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d043      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d03c      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d66:	2210      	movs	r2, #16
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d018      	beq.n	8001dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d108      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d024      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
 8001d9a:	e01f      	b.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
 8001dac:	e016      	b.n	8001ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0208 	bic.w	r2, r2, #8
 8001dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de0:	2220      	movs	r2, #32
 8001de2:	409a      	lsls	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 808f 	beq.w	8001f0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8087 	beq.w	8001f0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e02:	2220      	movs	r2, #32
 8001e04:	409a      	lsls	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d136      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0216 	bic.w	r2, r2, #22
 8001e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d103      	bne.n	8001e46 <HAL_DMA_IRQHandler+0x1da>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0208 	bic.w	r2, r2, #8
 8001e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5a:	223f      	movs	r2, #63	@ 0x3f
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d07e      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
        }
        return;
 8001e82:	e079      	b.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01d      	beq.n	8001ece <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10d      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d031      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
 8001eb0:	e02c      	b.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
 8001ecc:	e01e      	b.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0210 	bic.w	r2, r2, #16
 8001eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d032      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d022      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2205      	movs	r2, #5
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d307      	bcc.n	8001f54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f2      	bne.n	8001f38 <HAL_DMA_IRQHandler+0x2cc>
 8001f52:	e000      	b.n	8001f56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
 8001f76:	e000      	b.n	8001f7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f78:	bf00      	nop
    }
  }
}
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b40      	cmp	r3, #64	@ 0x40
 8001fac:	d108      	bne.n	8001fc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fbe:	e007      	b.n	8001fd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3b10      	subs	r3, #16
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <DMA_CalcBaseAndBitshift+0x64>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ff6:	4a13      	ldr	r2, [pc, #76]	@ (8002044 <DMA_CalcBaseAndBitshift+0x68>)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d909      	bls.n	800201e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	1d1a      	adds	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	659a      	str	r2, [r3, #88]	@ 0x58
 800201c:	e007      	b.n	800202e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	aaaaaaab 	.word	0xaaaaaaab
 8002044:	08003d74 	.word	0x08003d74

08002048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11f      	bne.n	80020a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d856      	bhi.n	8002116 <DMA_CheckFifoParam+0xce>
 8002068:	a201      	add	r2, pc, #4	@ (adr r2, 8002070 <DMA_CheckFifoParam+0x28>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002081 	.word	0x08002081
 8002074:	08002093 	.word	0x08002093
 8002078:	08002081 	.word	0x08002081
 800207c:	08002117 	.word	0x08002117
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d046      	beq.n	800211a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002090:	e043      	b.n	800211a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002096:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800209a:	d140      	bne.n	800211e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a0:	e03d      	b.n	800211e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020aa:	d121      	bne.n	80020f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d837      	bhi.n	8002122 <DMA_CheckFifoParam+0xda>
 80020b2:	a201      	add	r2, pc, #4	@ (adr r2, 80020b8 <DMA_CheckFifoParam+0x70>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020cf 	.word	0x080020cf
 80020c0:	080020c9 	.word	0x080020c9
 80020c4:	080020e1 	.word	0x080020e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
      break;
 80020cc:	e030      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d025      	beq.n	8002126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020de:	e022      	b.n	8002126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020e8:	d11f      	bne.n	800212a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ee:	e01c      	b.n	800212a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d903      	bls.n	80020fe <DMA_CheckFifoParam+0xb6>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d003      	beq.n	8002104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020fc:	e018      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
      break;
 8002102:	e015      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      break;
 8002114:	e00b      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      break;
 8002116:	bf00      	nop
 8002118:	e00a      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
 800211c:	e008      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 800211e:	bf00      	nop
 8002120:	e006      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 8002122:	bf00      	nop
 8002124:	e004      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 8002126:	bf00      	nop
 8002128:	e002      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;   
 800212a:	bf00      	nop
 800212c:	e000      	b.n	8002130 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
    }
  } 
  
  return status; 
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	@ 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e159      	b.n	8002410 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8148 	bne.w	800240a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d005      	beq.n	8002192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218e:	2b02      	cmp	r3, #2
 8002190:	d130      	bne.n	80021f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 0201 	and.w	r2, r3, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d017      	beq.n	8002230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d123      	bne.n	8002284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	69b9      	ldr	r1, [r7, #24]
 8002280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80a2 	beq.w	800240a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b57      	ldr	r3, [pc, #348]	@ (8002428 <HAL_GPIO_Init+0x2e8>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	4a56      	ldr	r2, [pc, #344]	@ (8002428 <HAL_GPIO_Init+0x2e8>)
 80022d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d6:	4b54      	ldr	r3, [pc, #336]	@ (8002428 <HAL_GPIO_Init+0x2e8>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e2:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_GPIO_Init+0x2ec>)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a49      	ldr	r2, [pc, #292]	@ (8002430 <HAL_GPIO_Init+0x2f0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d019      	beq.n	8002342 <HAL_GPIO_Init+0x202>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a48      	ldr	r2, [pc, #288]	@ (8002434 <HAL_GPIO_Init+0x2f4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x1fe>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a47      	ldr	r2, [pc, #284]	@ (8002438 <HAL_GPIO_Init+0x2f8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x1fa>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a46      	ldr	r2, [pc, #280]	@ (800243c <HAL_GPIO_Init+0x2fc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x1f6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a45      	ldr	r2, [pc, #276]	@ (8002440 <HAL_GPIO_Init+0x300>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x1f2>
 800232e:	2304      	movs	r3, #4
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x204>
 8002332:	2307      	movs	r3, #7
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x204>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x204>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x204>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x204>
 8002342:	2300      	movs	r3, #0
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	@ (800242c <HAL_GPIO_Init+0x2ec>)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002362:	4b38      	ldr	r3, [pc, #224]	@ (8002444 <HAL_GPIO_Init+0x304>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002386:	4a2f      	ldr	r2, [pc, #188]	@ (8002444 <HAL_GPIO_Init+0x304>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800238c:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <HAL_GPIO_Init+0x304>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b0:	4a24      	ldr	r2, [pc, #144]	@ (8002444 <HAL_GPIO_Init+0x304>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023b6:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <HAL_GPIO_Init+0x304>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023da:	4a1a      	ldr	r2, [pc, #104]	@ (8002444 <HAL_GPIO_Init+0x304>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e0:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <HAL_GPIO_Init+0x304>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002404:	4a0f      	ldr	r2, [pc, #60]	@ (8002444 <HAL_GPIO_Init+0x304>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f67f aea2 	bls.w	800215c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3724      	adds	r7, #36	@ 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40013800 	.word	0x40013800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021000 	.word	0x40021000
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e12b      	b.n	80026e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe fc16 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2224      	movs	r2, #36	@ 0x24
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024e0:	f001 f8aa 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 80024e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4a81      	ldr	r2, [pc, #516]	@ (80026f0 <HAL_I2C_Init+0x274>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d807      	bhi.n	8002500 <HAL_I2C_Init+0x84>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a80      	ldr	r2, [pc, #512]	@ (80026f4 <HAL_I2C_Init+0x278>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf94      	ite	ls
 80024f8:	2301      	movls	r3, #1
 80024fa:	2300      	movhi	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e006      	b.n	800250e <HAL_I2C_Init+0x92>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a7d      	ldr	r2, [pc, #500]	@ (80026f8 <HAL_I2C_Init+0x27c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	bf94      	ite	ls
 8002508:	2301      	movls	r3, #1
 800250a:	2300      	movhi	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0e7      	b.n	80026e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a78      	ldr	r2, [pc, #480]	@ (80026fc <HAL_I2C_Init+0x280>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0c9b      	lsrs	r3, r3, #18
 8002520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a6a      	ldr	r2, [pc, #424]	@ (80026f0 <HAL_I2C_Init+0x274>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d802      	bhi.n	8002550 <HAL_I2C_Init+0xd4>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3301      	adds	r3, #1
 800254e:	e009      	b.n	8002564 <HAL_I2C_Init+0xe8>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	4a69      	ldr	r2, [pc, #420]	@ (8002700 <HAL_I2C_Init+0x284>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	3301      	adds	r3, #1
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	430b      	orrs	r3, r1
 800256a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002576:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	495c      	ldr	r1, [pc, #368]	@ (80026f0 <HAL_I2C_Init+0x274>)
 8002580:	428b      	cmp	r3, r1
 8002582:	d819      	bhi.n	80025b8 <HAL_I2C_Init+0x13c>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e59      	subs	r1, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002598:	400b      	ands	r3, r1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_I2C_Init+0x138>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1e59      	subs	r1, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b2:	e051      	b.n	8002658 <HAL_I2C_Init+0x1dc>
 80025b4:	2304      	movs	r3, #4
 80025b6:	e04f      	b.n	8002658 <HAL_I2C_Init+0x1dc>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d111      	bne.n	80025e4 <HAL_I2C_Init+0x168>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	440b      	add	r3, r1
 80025ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e012      	b.n	800260a <HAL_I2C_Init+0x18e>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e58      	subs	r0, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	0099      	lsls	r1, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fa:	3301      	adds	r3, #1
 80025fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Init+0x196>
 800260e:	2301      	movs	r3, #1
 8002610:	e022      	b.n	8002658 <HAL_I2C_Init+0x1dc>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10e      	bne.n	8002638 <HAL_I2C_Init+0x1bc>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e58      	subs	r0, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	440b      	add	r3, r1
 8002628:	fbb0 f3f3 	udiv	r3, r0, r3
 800262c:	3301      	adds	r3, #1
 800262e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002636:	e00f      	b.n	8002658 <HAL_I2C_Init+0x1dc>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1e58      	subs	r0, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	0099      	lsls	r1, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	6809      	ldr	r1, [r1, #0]
 800265c:	4313      	orrs	r3, r2
 800265e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002686:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6911      	ldr	r1, [r2, #16]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68d2      	ldr	r2, [r2, #12]
 8002692:	4311      	orrs	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	430b      	orrs	r3, r1
 800269a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	000186a0 	.word	0x000186a0
 80026f4:	001e847f 	.word	0x001e847f
 80026f8:	003d08ff 	.word	0x003d08ff
 80026fc:	431bde83 	.word	0x431bde83
 8002700:	10624dd3 	.word	0x10624dd3

08002704 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	461a      	mov	r2, r3
 8002712:	4603      	mov	r3, r0
 8002714:	817b      	strh	r3, [r7, #10]
 8002716:	460b      	mov	r3, r1
 8002718:	813b      	strh	r3, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800271e:	f7fe fc5b 	bl	8000fd8 <HAL_GetTick>
 8002722:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b20      	cmp	r3, #32
 800272e:	f040 80d9 	bne.w	80028e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2319      	movs	r3, #25
 8002738:	2201      	movs	r2, #1
 800273a:	496d      	ldr	r1, [pc, #436]	@ (80028f0 <HAL_I2C_Mem_Write+0x1ec>)
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f971 	bl	8002a24 <I2C_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
 800274a:	e0cc      	b.n	80028e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2C_Mem_Write+0x56>
 8002756:	2302      	movs	r3, #2
 8002758:	e0c5      	b.n	80028e6 <HAL_I2C_Mem_Write+0x1e2>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d007      	beq.n	8002780 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800278e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2221      	movs	r2, #33	@ 0x21
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2240      	movs	r2, #64	@ 0x40
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a3a      	ldr	r2, [r7, #32]
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a4d      	ldr	r2, [pc, #308]	@ (80028f4 <HAL_I2C_Mem_Write+0x1f0>)
 80027c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027c2:	88f8      	ldrh	r0, [r7, #6]
 80027c4:	893a      	ldrh	r2, [r7, #8]
 80027c6:	8979      	ldrh	r1, [r7, #10]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4603      	mov	r3, r0
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f890 	bl	80028f8 <I2C_RequestMemoryWrite>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d052      	beq.n	8002884 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e081      	b.n	80028e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa36 	bl	8002c58 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d107      	bne.n	800280a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002808:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e06b      	b.n	80028e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_I2C_Mem_Write+0x180>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1aa      	bne.n	80027e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fa29 	bl	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00d      	beq.n	80028b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d107      	bne.n	80028b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e016      	b.n	80028e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	00100002 	.word	0x00100002
 80028f4:	ffff0000 	.word	0xffff0000

080028f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	460b      	mov	r3, r1
 800290c:	813b      	strh	r3, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002920:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2200      	movs	r2, #0
 800292a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f878 	bl	8002a24 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002948:	d103      	bne.n	8002952 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002950:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e05f      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002964:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	492d      	ldr	r1, [pc, #180]	@ (8002a20 <I2C_RequestMemoryWrite+0x128>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f8d3 	bl	8002b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04c      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002994:	6a39      	ldr	r1, [r7, #32]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f95e 	bl	8002c58 <I2C_WaitOnTXEFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d107      	bne.n	80029ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02b      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029c4:	893b      	ldrh	r3, [r7, #8]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	611a      	str	r2, [r3, #16]
 80029ce:	e021      	b.n	8002a14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029d0:	893b      	ldrh	r3, [r7, #8]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e0:	6a39      	ldr	r1, [r7, #32]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f938 	bl	8002c58 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d107      	bne.n	8002a06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e005      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0a:	893b      	ldrh	r3, [r7, #8]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	00010002 	.word	0x00010002

08002a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a34:	e048      	b.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a3c:	d044      	beq.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3e:	f7fe facb 	bl	8000fd8 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d139      	bne.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	0c1b      	lsrs	r3, r3, #16
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d10d      	bne.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	43da      	mvns	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	e00c      	b.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	43da      	mvns	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4013      	ands	r3, r2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d116      	bne.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e023      	b.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	0c1b      	lsrs	r3, r3, #16
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d10d      	bne.n	8002aee <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4013      	ands	r3, r2
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	e00c      	b.n	8002b08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	43da      	mvns	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d093      	beq.n	8002a36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b26:	e071      	b.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b36:	d123      	bne.n	8002b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	f043 0204 	orr.w	r2, r3, #4
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e067      	b.n	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b86:	d041      	beq.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fe fa26 	bl	8000fd8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d136      	bne.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10c      	bne.n	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	2300      	moveq	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e00b      	b.n	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e021      	b.n	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10c      	bne.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e00b      	b.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f af6d 	bne.w	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c64:	e034      	b.n	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f886 	bl	8002d78 <I2C_IsAcknowledgeFailed>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e034      	b.n	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c7c:	d028      	beq.n	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7e:	f7fe f9ab 	bl	8000fd8 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d302      	bcc.n	8002c94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d11d      	bne.n	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9e:	2b80      	cmp	r3, #128	@ 0x80
 8002ca0:	d016      	beq.n	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	f043 0220 	orr.w	r2, r3, #32
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e007      	b.n	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cda:	2b80      	cmp	r3, #128	@ 0x80
 8002cdc:	d1c3      	bne.n	8002c66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf4:	e034      	b.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f83e 	bl	8002d78 <I2C_IsAcknowledgeFailed>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e034      	b.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d0c:	d028      	beq.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7fe f963 	bl	8000fd8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d11d      	bne.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d016      	beq.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e007      	b.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d1c3      	bne.n	8002cf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8e:	d11b      	bne.n	8002dc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	f043 0204 	orr.w	r2, r3, #4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e267      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d075      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002df6:	4b88      	ldr	r3, [pc, #544]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d00c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e02:	4b85      	ldr	r3, [pc, #532]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d112      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0e:	4b82      	ldr	r3, [pc, #520]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e1a:	d10b      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d05b      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x108>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d157      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e242      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCC_OscConfig+0x74>
 8002e3e:	4b76      	ldr	r3, [pc, #472]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a75      	ldr	r2, [pc, #468]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e01d      	b.n	8002e88 <HAL_RCC_OscConfig+0xb0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x98>
 8002e56:	4b70      	ldr	r3, [pc, #448]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	4b6d      	ldr	r3, [pc, #436]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a6c      	ldr	r2, [pc, #432]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0xb0>
 8002e70:	4b69      	ldr	r3, [pc, #420]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a68      	ldr	r2, [pc, #416]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b66      	ldr	r3, [pc, #408]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a65      	ldr	r2, [pc, #404]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d013      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe f8a2 	bl	8000fd8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe f89e 	bl	8000fd8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	@ 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e207      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0xc0>
 8002eb6:	e014      	b.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe f88e 	bl	8000fd8 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe f88a 	bl	8000fd8 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	@ 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e1f3      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	4b51      	ldr	r3, [pc, #324]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xe8>
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d063      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eee:	4b4a      	ldr	r3, [pc, #296]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efa:	4b47      	ldr	r3, [pc, #284]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d11c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f06:	4b44      	ldr	r3, [pc, #272]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	4b41      	ldr	r3, [pc, #260]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_OscConfig+0x152>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e1c7      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4937      	ldr	r1, [pc, #220]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3e:	e03a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f48:	4b34      	ldr	r3, [pc, #208]	@ (800301c <HAL_RCC_OscConfig+0x244>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe f843 	bl	8000fd8 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f56:	f7fe f83f 	bl	8000fd8 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1a8      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f74:	4b28      	ldr	r3, [pc, #160]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4925      	ldr	r1, [pc, #148]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
 8002f88:	e015      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8a:	4b24      	ldr	r3, [pc, #144]	@ (800301c <HAL_RCC_OscConfig+0x244>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe f822 	bl	8000fd8 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fe f81e 	bl	8000fd8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e187      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d036      	beq.n	8003030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d016      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fca:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <HAL_RCC_OscConfig+0x248>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe f802 	bl	8000fd8 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fd fffe 	bl	8000fd8 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e167      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_RCC_OscConfig+0x240>)
 8002fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x200>
 8002ff6:	e01b      	b.n	8003030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <HAL_RCC_OscConfig+0x248>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffe:	f7fd ffeb 	bl	8000fd8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	e00e      	b.n	8003024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003006:	f7fd ffe7 	bl	8000fd8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d907      	bls.n	8003024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e150      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
 8003018:	40023800 	.word	0x40023800
 800301c:	42470000 	.word	0x42470000
 8003020:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	4b88      	ldr	r3, [pc, #544]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ea      	bne.n	8003006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8097 	beq.w	800316c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003042:	4b81      	ldr	r3, [pc, #516]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b7d      	ldr	r3, [pc, #500]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	4a7c      	ldr	r2, [pc, #496]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800305c:	6413      	str	r3, [r2, #64]	@ 0x40
 800305e:	4b7a      	ldr	r3, [pc, #488]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306a:	2301      	movs	r3, #1
 800306c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306e:	4b77      	ldr	r3, [pc, #476]	@ (800324c <HAL_RCC_OscConfig+0x474>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d118      	bne.n	80030ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307a:	4b74      	ldr	r3, [pc, #464]	@ (800324c <HAL_RCC_OscConfig+0x474>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a73      	ldr	r2, [pc, #460]	@ (800324c <HAL_RCC_OscConfig+0x474>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003086:	f7fd ffa7 	bl	8000fd8 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308e:	f7fd ffa3 	bl	8000fd8 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e10c      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	4b6a      	ldr	r3, [pc, #424]	@ (800324c <HAL_RCC_OscConfig+0x474>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d106      	bne.n	80030c2 <HAL_RCC_OscConfig+0x2ea>
 80030b4:	4b64      	ldr	r3, [pc, #400]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	4a63      	ldr	r2, [pc, #396]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c0:	e01c      	b.n	80030fc <HAL_RCC_OscConfig+0x324>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x30c>
 80030ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	4a5b      	ldr	r2, [pc, #364]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0x324>
 80030e4:	4b58      	ldr	r3, [pc, #352]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	4a57      	ldr	r2, [pc, #348]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f0:	4b55      	ldr	r3, [pc, #340]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f4:	4a54      	ldr	r2, [pc, #336]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80030f6:	f023 0304 	bic.w	r3, r3, #4
 80030fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fd ff68 	bl	8000fd8 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310a:	e00a      	b.n	8003122 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fd ff64 	bl	8000fd8 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0cb      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003122:	4b49      	ldr	r3, [pc, #292]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ee      	beq.n	800310c <HAL_RCC_OscConfig+0x334>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7fd ff52 	bl	8000fd8 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7fd ff4e 	bl	8000fd8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e0b5      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314e:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1ee      	bne.n	8003138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003160:	4b39      	ldr	r3, [pc, #228]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	4a38      	ldr	r2, [pc, #224]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800316a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a1 	beq.w	80032b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003176:	4b34      	ldr	r3, [pc, #208]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b08      	cmp	r3, #8
 8003180:	d05c      	beq.n	800323c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d141      	bne.n	800320e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b31      	ldr	r3, [pc, #196]	@ (8003250 <HAL_RCC_OscConfig+0x478>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fd ff22 	bl	8000fd8 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7fd ff1e 	bl	8000fd8 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e087      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	4b27      	ldr	r3, [pc, #156]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	019b      	lsls	r3, r3, #6
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	3b01      	subs	r3, #1
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	491b      	ldr	r1, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <HAL_RCC_OscConfig+0x478>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fd fef7 	bl	8000fd8 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fd fef3 	bl	8000fd8 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e05c      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003200:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x416>
 800320c:	e054      	b.n	80032b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <HAL_RCC_OscConfig+0x478>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fd fee0 	bl	8000fd8 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321c:	f7fd fedc 	bl	8000fd8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e045      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_RCC_OscConfig+0x470>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x444>
 800323a:	e03d      	b.n	80032b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e038      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
 8003248:	40023800 	.word	0x40023800
 800324c:	40007000 	.word	0x40007000
 8003250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003254:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <HAL_RCC_OscConfig+0x4ec>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d028      	beq.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d121      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d11a      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003284:	4013      	ands	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800328a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800328c:	4293      	cmp	r3, r2
 800328e:	d111      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	3b01      	subs	r3, #1
 800329e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800

080032c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0cc      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b68      	ldr	r3, [pc, #416]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d90c      	bls.n	8003304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b65      	ldr	r3, [pc, #404]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b63      	ldr	r3, [pc, #396]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0b8      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800331c:	4b59      	ldr	r3, [pc, #356]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a58      	ldr	r2, [pc, #352]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003326:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003334:	4b53      	ldr	r3, [pc, #332]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a52      	ldr	r2, [pc, #328]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800333e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b50      	ldr	r3, [pc, #320]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	494d      	ldr	r1, [pc, #308]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d044      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b47      	ldr	r3, [pc, #284]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d119      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e07f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d003      	beq.n	8003386 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003382:	2b03      	cmp	r3, #3
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b3f      	ldr	r3, [pc, #252]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e06f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e067      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b37      	ldr	r3, [pc, #220]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4934      	ldr	r1, [pc, #208]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fd fe0e 	bl	8000fd8 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fd fe0a 	bl	8000fd8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e04f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b25      	ldr	r3, [pc, #148]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d20c      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b22      	ldr	r3, [pc, #136]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e032      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b19      	ldr	r3, [pc, #100]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4916      	ldr	r1, [pc, #88]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343a:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	490e      	ldr	r1, [pc, #56]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800344e:	f000 f821 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	490a      	ldr	r1, [pc, #40]	@ (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	fa22 f303 	lsr.w	r3, r2, r3
 8003466:	4a09      	ldr	r2, [pc, #36]	@ (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fd6e 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023c00 	.word	0x40023c00
 8003484:	40023800 	.word	0x40023800
 8003488:	08003d5c 	.word	0x08003d5c
 800348c:	20000000 	.word	0x20000000
 8003490:	20000004 	.word	0x20000004

08003494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003498:	b090      	sub	sp, #64	@ 0x40
 800349a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ac:	4b59      	ldr	r3, [pc, #356]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d00d      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x40>
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	f200 80a1 	bhi.w	8003600 <HAL_RCC_GetSysClockFreq+0x16c>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x34>
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x3a>
 80034c6:	e09b      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b53      	ldr	r3, [pc, #332]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034cc:	e09b      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ce:	4b53      	ldr	r3, [pc, #332]	@ (800361c <HAL_RCC_GetSysClockFreq+0x188>)
 80034d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034d2:	e098      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034de:	4b4d      	ldr	r3, [pc, #308]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x180>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d028      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	2200      	movs	r2, #0
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034fc:	2100      	movs	r1, #0
 80034fe:	4b47      	ldr	r3, [pc, #284]	@ (800361c <HAL_RCC_GetSysClockFreq+0x188>)
 8003500:	fb03 f201 	mul.w	r2, r3, r1
 8003504:	2300      	movs	r3, #0
 8003506:	fb00 f303 	mul.w	r3, r0, r3
 800350a:	4413      	add	r3, r2
 800350c:	4a43      	ldr	r2, [pc, #268]	@ (800361c <HAL_RCC_GetSysClockFreq+0x188>)
 800350e:	fba0 1202 	umull	r1, r2, r0, r2
 8003512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003514:	460a      	mov	r2, r1
 8003516:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351a:	4413      	add	r3, r2
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800351e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003520:	2200      	movs	r2, #0
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	61fa      	str	r2, [r7, #28]
 8003526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800352a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800352e:	f7fc fe53 	bl	80001d8 <__aeabi_uldivmod>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4613      	mov	r3, r2
 8003538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800353a:	e053      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353c:	4b35      	ldr	r3, [pc, #212]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x180>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	099b      	lsrs	r3, r3, #6
 8003542:	2200      	movs	r2, #0
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	617a      	str	r2, [r7, #20]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800354e:	f04f 0b00 	mov.w	fp, #0
 8003552:	4652      	mov	r2, sl
 8003554:	465b      	mov	r3, fp
 8003556:	f04f 0000 	mov.w	r0, #0
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	0159      	lsls	r1, r3, #5
 8003560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003564:	0150      	lsls	r0, r2, #5
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	ebb2 080a 	subs.w	r8, r2, sl
 800356e:	eb63 090b 	sbc.w	r9, r3, fp
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800357e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003582:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003586:	ebb2 0408 	subs.w	r4, r2, r8
 800358a:	eb63 0509 	sbc.w	r5, r3, r9
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	00eb      	lsls	r3, r5, #3
 8003598:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359c:	00e2      	lsls	r2, r4, #3
 800359e:	4614      	mov	r4, r2
 80035a0:	461d      	mov	r5, r3
 80035a2:	eb14 030a 	adds.w	r3, r4, sl
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	eb45 030b 	adc.w	r3, r5, fp
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ba:	4629      	mov	r1, r5
 80035bc:	028b      	lsls	r3, r1, #10
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c4:	4621      	mov	r1, r4
 80035c6:	028a      	lsls	r2, r1, #10
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ce:	2200      	movs	r2, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	60fa      	str	r2, [r7, #12]
 80035d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d8:	f7fc fdfe 	bl	80001d8 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4613      	mov	r3, r2
 80035e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x180>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	3301      	adds	r3, #1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x184>)
 8003602:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003608:	4618      	mov	r0, r3
 800360a:	3740      	adds	r7, #64	@ 0x40
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	00f42400 	.word	0x00f42400
 800361c:	017d7840 	.word	0x017d7840

08003620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <HAL_RCC_GetHCLKFreq+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000000 	.word	0x20000000

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800363c:	f7ff fff0 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0a9b      	lsrs	r3, r3, #10
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	08003d6c 	.word	0x08003d6c

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003664:	f7ff ffdc 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0b5b      	lsrs	r3, r3, #13
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	@ (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40023800 	.word	0x40023800
 8003684:	08003d6c 	.word	0x08003d6c

08003688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e042      	b.n	8003720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fb58 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	@ 0x24
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f88b 	bl	80037e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	d112      	bne.n	8003768 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_UART_Receive_IT+0x26>
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e00b      	b.n	800376a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	461a      	mov	r2, r3
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f807 	bl	8003772 <UART_Start_Receive_IT>
 8003764:	4603      	mov	r3, r0
 8003766:	e000      	b.n	800376a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	4613      	mov	r3, r2
 800377e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	88fa      	ldrh	r2, [r7, #6]
 800378a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2222      	movs	r2, #34	@ 0x22
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0220 	orr.w	r2, r2, #32
 80037d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ec:	b0c0      	sub	sp, #256	@ 0x100
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	68d9      	ldr	r1, [r3, #12]
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	ea40 0301 	orr.w	r3, r0, r1
 8003810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	431a      	orrs	r2, r3
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	431a      	orrs	r2, r3
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003840:	f021 010c 	bic.w	r1, r1, #12
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800384e:	430b      	orrs	r3, r1
 8003850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800385e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003862:	6999      	ldr	r1, [r3, #24]
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	ea40 0301 	orr.w	r3, r0, r1
 800386e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b8f      	ldr	r3, [pc, #572]	@ (8003ab4 <UART_SetConfig+0x2cc>)
 8003878:	429a      	cmp	r2, r3
 800387a:	d005      	beq.n	8003888 <UART_SetConfig+0xa0>
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4b8d      	ldr	r3, [pc, #564]	@ (8003ab8 <UART_SetConfig+0x2d0>)
 8003884:	429a      	cmp	r2, r3
 8003886:	d104      	bne.n	8003892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003888:	f7ff feea 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 800388c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003890:	e003      	b.n	800389a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003892:	f7ff fed1 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8003896:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a4:	f040 810c 	bne.w	8003ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ac:	2200      	movs	r2, #0
 80038ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038ba:	4622      	mov	r2, r4
 80038bc:	462b      	mov	r3, r5
 80038be:	1891      	adds	r1, r2, r2
 80038c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038c2:	415b      	adcs	r3, r3
 80038c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038ca:	4621      	mov	r1, r4
 80038cc:	eb12 0801 	adds.w	r8, r2, r1
 80038d0:	4629      	mov	r1, r5
 80038d2:	eb43 0901 	adc.w	r9, r3, r1
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ea:	4690      	mov	r8, r2
 80038ec:	4699      	mov	r9, r3
 80038ee:	4623      	mov	r3, r4
 80038f0:	eb18 0303 	adds.w	r3, r8, r3
 80038f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038f8:	462b      	mov	r3, r5
 80038fa:	eb49 0303 	adc.w	r3, r9, r3
 80038fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800390e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003916:	460b      	mov	r3, r1
 8003918:	18db      	adds	r3, r3, r3
 800391a:	653b      	str	r3, [r7, #80]	@ 0x50
 800391c:	4613      	mov	r3, r2
 800391e:	eb42 0303 	adc.w	r3, r2, r3
 8003922:	657b      	str	r3, [r7, #84]	@ 0x54
 8003924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800392c:	f7fc fc54 	bl	80001d8 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4b61      	ldr	r3, [pc, #388]	@ (8003abc <UART_SetConfig+0x2d4>)
 8003936:	fba3 2302 	umull	r2, r3, r3, r2
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	011c      	lsls	r4, r3, #4
 800393e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003942:	2200      	movs	r2, #0
 8003944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003948:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800394c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003950:	4642      	mov	r2, r8
 8003952:	464b      	mov	r3, r9
 8003954:	1891      	adds	r1, r2, r2
 8003956:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003958:	415b      	adcs	r3, r3
 800395a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800395c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003960:	4641      	mov	r1, r8
 8003962:	eb12 0a01 	adds.w	sl, r2, r1
 8003966:	4649      	mov	r1, r9
 8003968:	eb43 0b01 	adc.w	fp, r3, r1
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800397c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003980:	4692      	mov	sl, r2
 8003982:	469b      	mov	fp, r3
 8003984:	4643      	mov	r3, r8
 8003986:	eb1a 0303 	adds.w	r3, sl, r3
 800398a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800398e:	464b      	mov	r3, r9
 8003990:	eb4b 0303 	adc.w	r3, fp, r3
 8003994:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039ac:	460b      	mov	r3, r1
 80039ae:	18db      	adds	r3, r3, r3
 80039b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80039b2:	4613      	mov	r3, r2
 80039b4:	eb42 0303 	adc.w	r3, r2, r3
 80039b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039c2:	f7fc fc09 	bl	80001d8 <__aeabi_uldivmod>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	4b3b      	ldr	r3, [pc, #236]	@ (8003abc <UART_SetConfig+0x2d4>)
 80039ce:	fba3 2301 	umull	r2, r3, r3, r1
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2264      	movs	r2, #100	@ 0x64
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	1acb      	subs	r3, r1, r3
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039e2:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <UART_SetConfig+0x2d4>)
 80039e4:	fba3 2302 	umull	r2, r3, r3, r2
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039f0:	441c      	add	r4, r3
 80039f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a04:	4642      	mov	r2, r8
 8003a06:	464b      	mov	r3, r9
 8003a08:	1891      	adds	r1, r2, r2
 8003a0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a0c:	415b      	adcs	r3, r3
 8003a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a14:	4641      	mov	r1, r8
 8003a16:	1851      	adds	r1, r2, r1
 8003a18:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	414b      	adcs	r3, r1
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a2c:	4659      	mov	r1, fp
 8003a2e:	00cb      	lsls	r3, r1, #3
 8003a30:	4651      	mov	r1, sl
 8003a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a36:	4651      	mov	r1, sl
 8003a38:	00ca      	lsls	r2, r1, #3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4642      	mov	r2, r8
 8003a42:	189b      	adds	r3, r3, r2
 8003a44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a48:	464b      	mov	r3, r9
 8003a4a:	460a      	mov	r2, r1
 8003a4c:	eb42 0303 	adc.w	r3, r2, r3
 8003a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a68:	460b      	mov	r3, r1
 8003a6a:	18db      	adds	r3, r3, r3
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a6e:	4613      	mov	r3, r2
 8003a70:	eb42 0303 	adc.w	r3, r2, r3
 8003a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a7e:	f7fc fbab 	bl	80001d8 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <UART_SetConfig+0x2d4>)
 8003a88:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	2164      	movs	r1, #100	@ 0x64
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	3332      	adds	r3, #50	@ 0x32
 8003a9a:	4a08      	ldr	r2, [pc, #32]	@ (8003abc <UART_SetConfig+0x2d4>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	f003 0207 	and.w	r2, r3, #7
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4422      	add	r2, r4
 8003aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ab0:	e106      	b.n	8003cc0 <UART_SetConfig+0x4d8>
 8003ab2:	bf00      	nop
 8003ab4:	40011000 	.word	0x40011000
 8003ab8:	40011400 	.word	0x40011400
 8003abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003aca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ad2:	4642      	mov	r2, r8
 8003ad4:	464b      	mov	r3, r9
 8003ad6:	1891      	adds	r1, r2, r2
 8003ad8:	6239      	str	r1, [r7, #32]
 8003ada:	415b      	adcs	r3, r3
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ae2:	4641      	mov	r1, r8
 8003ae4:	1854      	adds	r4, r2, r1
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	eb43 0501 	adc.w	r5, r3, r1
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	00eb      	lsls	r3, r5, #3
 8003af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003afa:	00e2      	lsls	r2, r4, #3
 8003afc:	4614      	mov	r4, r2
 8003afe:	461d      	mov	r5, r3
 8003b00:	4643      	mov	r3, r8
 8003b02:	18e3      	adds	r3, r4, r3
 8003b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b08:	464b      	mov	r3, r9
 8003b0a:	eb45 0303 	adc.w	r3, r5, r3
 8003b0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b2e:	4629      	mov	r1, r5
 8003b30:	008b      	lsls	r3, r1, #2
 8003b32:	4621      	mov	r1, r4
 8003b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b38:	4621      	mov	r1, r4
 8003b3a:	008a      	lsls	r2, r1, #2
 8003b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b40:	f7fc fb4a 	bl	80001d8 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4b60      	ldr	r3, [pc, #384]	@ (8003ccc <UART_SetConfig+0x4e4>)
 8003b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	011c      	lsls	r4, r3, #4
 8003b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	61b9      	str	r1, [r7, #24]
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b74:	4641      	mov	r1, r8
 8003b76:	1851      	adds	r1, r2, r1
 8003b78:	6139      	str	r1, [r7, #16]
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	414b      	adcs	r3, r1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	00cb      	lsls	r3, r1, #3
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b96:	4651      	mov	r1, sl
 8003b98:	00ca      	lsls	r2, r1, #3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba8:	464b      	mov	r3, r9
 8003baa:	460a      	mov	r2, r1
 8003bac:	eb42 0303 	adc.w	r3, r2, r3
 8003bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bcc:	4649      	mov	r1, r9
 8003bce:	008b      	lsls	r3, r1, #2
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bd6:	4641      	mov	r1, r8
 8003bd8:	008a      	lsls	r2, r1, #2
 8003bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bde:	f7fc fafb 	bl	80001d8 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	4b38      	ldr	r3, [pc, #224]	@ (8003ccc <UART_SetConfig+0x4e4>)
 8003bea:	fba3 2301 	umull	r2, r3, r3, r1
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	2264      	movs	r2, #100	@ 0x64
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	1acb      	subs	r3, r1, r3
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	3332      	adds	r3, #50	@ 0x32
 8003bfc:	4a33      	ldr	r2, [pc, #204]	@ (8003ccc <UART_SetConfig+0x4e4>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c08:	441c      	add	r4, r3
 8003c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c12:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c18:	4642      	mov	r2, r8
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	1891      	adds	r1, r2, r2
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	415b      	adcs	r3, r3
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c28:	4641      	mov	r1, r8
 8003c2a:	1851      	adds	r1, r2, r1
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	4649      	mov	r1, r9
 8003c30:	414b      	adcs	r3, r1
 8003c32:	607b      	str	r3, [r7, #4]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c40:	4659      	mov	r1, fp
 8003c42:	00cb      	lsls	r3, r1, #3
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	00ca      	lsls	r2, r1, #3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	4642      	mov	r2, r8
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	eb42 0303 	adc.w	r3, r2, r3
 8003c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c7c:	4649      	mov	r1, r9
 8003c7e:	008b      	lsls	r3, r1, #2
 8003c80:	4641      	mov	r1, r8
 8003c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c86:	4641      	mov	r1, r8
 8003c88:	008a      	lsls	r2, r1, #2
 8003c8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c8e:	f7fc faa3 	bl	80001d8 <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <UART_SetConfig+0x4e4>)
 8003c98:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	2164      	movs	r1, #100	@ 0x64
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	3332      	adds	r3, #50	@ 0x32
 8003caa:	4a08      	ldr	r2, [pc, #32]	@ (8003ccc <UART_SetConfig+0x4e4>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	f003 020f 	and.w	r2, r3, #15
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4422      	add	r2, r4
 8003cbe:	609a      	str	r2, [r3, #8]
}
 8003cc0:	bf00      	nop
 8003cc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ccc:	51eb851f 	.word	0x51eb851f

08003cd0 <memset>:
 8003cd0:	4402      	add	r2, r0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d100      	bne.n	8003cda <memset+0xa>
 8003cd8:	4770      	bx	lr
 8003cda:	f803 1b01 	strb.w	r1, [r3], #1
 8003cde:	e7f9      	b.n	8003cd4 <memset+0x4>

08003ce0 <__libc_init_array>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8003d18 <__libc_init_array+0x38>)
 8003ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8003d1c <__libc_init_array+0x3c>)
 8003ce6:	1b64      	subs	r4, r4, r5
 8003ce8:	10a4      	asrs	r4, r4, #2
 8003cea:	2600      	movs	r6, #0
 8003cec:	42a6      	cmp	r6, r4
 8003cee:	d109      	bne.n	8003d04 <__libc_init_array+0x24>
 8003cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8003d20 <__libc_init_array+0x40>)
 8003cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8003d24 <__libc_init_array+0x44>)
 8003cf4:	f000 f826 	bl	8003d44 <_init>
 8003cf8:	1b64      	subs	r4, r4, r5
 8003cfa:	10a4      	asrs	r4, r4, #2
 8003cfc:	2600      	movs	r6, #0
 8003cfe:	42a6      	cmp	r6, r4
 8003d00:	d105      	bne.n	8003d0e <__libc_init_array+0x2e>
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d08:	4798      	blx	r3
 8003d0a:	3601      	adds	r6, #1
 8003d0c:	e7ee      	b.n	8003cec <__libc_init_array+0xc>
 8003d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d12:	4798      	blx	r3
 8003d14:	3601      	adds	r6, #1
 8003d16:	e7f2      	b.n	8003cfe <__libc_init_array+0x1e>
 8003d18:	08003d84 	.word	0x08003d84
 8003d1c:	08003d84 	.word	0x08003d84
 8003d20:	08003d84 	.word	0x08003d84
 8003d24:	08003d88 	.word	0x08003d88

08003d28 <memcpy>:
 8003d28:	440a      	add	r2, r1
 8003d2a:	4291      	cmp	r1, r2
 8003d2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003d30:	d100      	bne.n	8003d34 <memcpy+0xc>
 8003d32:	4770      	bx	lr
 8003d34:	b510      	push	{r4, lr}
 8003d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d3e:	4291      	cmp	r1, r2
 8003d40:	d1f9      	bne.n	8003d36 <memcpy+0xe>
 8003d42:	bd10      	pop	{r4, pc}

08003d44 <_init>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr

08003d50 <_fini>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr
