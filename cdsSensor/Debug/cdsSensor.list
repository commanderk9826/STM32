
cdsSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005714  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080058b4  080058b4  000068b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005914  08005914  00007098  2**0
                  CONTENTS
  4 .ARM          00000008  08005914  08005914  00006914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800591c  0800591c  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800591c  0800591c  0000691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005920  08005920  00006920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08005924  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000098  080059bc  00007098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  080059bc  00007454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f898  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002549  00000000  00000000  00016960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00018eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2d  00000000  00000000  00019d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e76  00000000  00000000  0001a83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f7d  00000000  00000000  000336b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd23  00000000  00000000  00044630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  000e0398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e49e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800589c 	.word	0x0800589c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	0800589c 	.word	0x0800589c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <movingMean>:
extern TIM_HandleTypeDef htim3;
uint16_t adcValue[2];
uint16_t adcDone = 0;
char str[50];

uint16_t movingMean(uint16_t inValue){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	static uint16_t buffer[max] = {0,};
	static uint32_t sum = 0;
	static uint16_t pos = 0;
	static _Bool isFirst = 5;

	if(isFirst){
 8000d66:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <movingMean+0xc8>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d01b      	beq.n	8000da6 <movingMean+0x4a>
		isFirst--;
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <movingMean+0xc8>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	f083 0301 	eor.w	r3, r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <movingMean+0xc8>)
 8000d7a:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<max; i++){
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e007      	b.n	8000d92 <movingMean+0x36>
			buffer[i]=inValue;
 8000d82:	4929      	ldr	r1, [pc, #164]	@ (8000e28 <movingMean+0xcc>)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i=0; i<max; i++){
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b63      	cmp	r3, #99	@ 0x63
 8000d96:	ddf4      	ble.n	8000d82 <movingMean+0x26>
		}
		sum=inValue*100;
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	2264      	movs	r2, #100	@ 0x64
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <movingMean+0xd0>)
 8000da4:	601a      	str	r2, [r3, #0]
	}

	sum -=buffer[pos];
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <movingMean+0xd0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a21      	ldr	r2, [pc, #132]	@ (8000e30 <movingMean+0xd4>)
 8000dac:	8812      	ldrh	r2, [r2, #0]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e28 <movingMean+0xcc>)
 8000db2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e2c <movingMean+0xd0>)
 8000dba:	6013      	str	r3, [r2, #0]
	buffer[pos] = inValue;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <movingMean+0xd4>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4a19      	ldr	r2, [pc, #100]	@ (8000e28 <movingMean+0xcc>)
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	sum += buffer[pos];
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <movingMean+0xd4>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <movingMean+0xcc>)
 8000dd2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <movingMean+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a13      	ldr	r2, [pc, #76]	@ (8000e2c <movingMean+0xd0>)
 8000de0:	6013      	str	r3, [r2, #0]
	pos++;
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <movingMean+0xd4>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <movingMean+0xd4>)
 8000dec:	801a      	strh	r2, [r3, #0]
	pos %=max;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <movingMean+0xd4>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <movingMean+0xd8>)
 8000df4:	fba2 1203 	umull	r1, r2, r2, r3
 8000df8:	0952      	lsrs	r2, r2, #5
 8000dfa:	2164      	movs	r1, #100	@ 0x64
 8000dfc:	fb01 f202 	mul.w	r2, r1, r2
 8000e00:	1a9b      	subs	r3, r3, r2
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <movingMean+0xd4>)
 8000e06:	801a      	strh	r2, [r3, #0]
	return sum/max;
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <movingMean+0xd0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a09      	ldr	r2, [pc, #36]	@ (8000e34 <movingMean+0xd8>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	b29b      	uxth	r3, r3
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000000 	.word	0x20000000
 8000e28:	200000f0 	.word	0x200000f0
 8000e2c:	200001b8 	.word	0x200001b8
 8000e30:	200001bc 	.word	0x200001bc
 8000e34:	51eb851f 	.word	0x51eb851f

08000e38 <Kalman>:
double Kalman(double measurement) {
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	ed87 0b00 	vstr	d0, [r7]
	static double varP = 0.0001; // pow(0.01, 2)
	static double R = 0.25;//pow(0.5, 2);
	static double K = 1.0;
	static double X = 20.0;
	// Kalman Simple Filter
	P= P + varP;
 8000e42:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <Kalman+0xe4>)
 8000e44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e48:	4b35      	ldr	r3, [pc, #212]	@ (8000f20 <Kalman+0xe8>)
 8000e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4e:	f7ff fa1d 	bl	800028c <__adddf3>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4931      	ldr	r1, [pc, #196]	@ (8000f1c <Kalman+0xe4>)
 8000e58:	e9c1 2300 	strd	r2, r3, [r1]
	K = P / (P + R);
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <Kalman+0xe4>)
 8000e5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000e62:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <Kalman+0xe4>)
 8000e64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e68:	4b2e      	ldr	r3, [pc, #184]	@ (8000f24 <Kalman+0xec>)
 8000e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6e:	f7ff fa0d 	bl	800028c <__adddf3>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4620      	mov	r0, r4
 8000e78:	4629      	mov	r1, r5
 8000e7a:	f7ff fce7 	bl	800084c <__aeabi_ddiv>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4929      	ldr	r1, [pc, #164]	@ (8000f28 <Kalman+0xf0>)
 8000e84:	e9c1 2300 	strd	r2, r3, [r1]
	X = (K * measurement) + (1 - K) * X;
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <Kalman+0xf0>)
 8000e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e92:	f7ff fbb1 	bl	80005f8 <__aeabi_dmul>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4614      	mov	r4, r2
 8000e9c:	461d      	mov	r5, r3
 8000e9e:	4b22      	ldr	r3, [pc, #136]	@ (8000f28 <Kalman+0xf0>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f04f 0000 	mov.w	r0, #0
 8000ea8:	4920      	ldr	r1, [pc, #128]	@ (8000f2c <Kalman+0xf4>)
 8000eaa:	f7ff f9ed 	bl	8000288 <__aeabi_dsub>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <Kalman+0xf8>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fb9c 	bl	80005f8 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	f7ff f9e0 	bl	800028c <__adddf3>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4917      	ldr	r1, [pc, #92]	@ (8000f30 <Kalman+0xf8>)
 8000ed2:	e9c1 2300 	strd	r2, r3, [r1]
	P = (1 - K) * P;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <Kalman+0xf0>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f04f 0000 	mov.w	r0, #0
 8000ee0:	4912      	ldr	r1, [pc, #72]	@ (8000f2c <Kalman+0xf4>)
 8000ee2:	f7ff f9d1 	bl	8000288 <__aeabi_dsub>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <Kalman+0xe4>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	f7ff fb80 	bl	80005f8 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4907      	ldr	r1, [pc, #28]	@ (8000f1c <Kalman+0xe4>)
 8000efe:	e9c1 2300 	strd	r2, r3, [r1]
	return X;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <Kalman+0xf8>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f10:	eef0 0a67 	vmov.f32	s1, s15
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000010 	.word	0x20000010
 8000f24:	20000018 	.word	0x20000018
 8000f28:	20000020 	.word	0x20000020
 8000f2c:	3ff00000 	.word	0x3ff00000
 8000f30:	20000028 	.word	0x20000028

08000f34 <HAL_TIM_PeriodElapsedCallback>:

// 타이머가 리셋될 때 발생되는 인터럽트
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	6078      	str	r0, [r7, #4]
	sprintf(str, "%d, %d, %d\n", adcValue[1], movingMean(adcValue[1]), (int)Kalman(adcValue[1]));
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f3e:	885b      	ldrh	r3, [r3, #2]
 8000f40:	461c      	mov	r4, r3
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f44:	885b      	ldrh	r3, [r3, #2]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff08 	bl	8000d5c <movingMean>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461d      	mov	r5, r3
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000f52:	885b      	ldrh	r3, [r3, #2]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fad5 	bl	8000504 <__aeabi_ui2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	ec43 2b10 	vmov	d0, r2, r3
 8000f62:	f7ff ff69 	bl	8000e38 <Kalman>
 8000f66:	ec53 2b10 	vmov	r2, r3, d0
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fd55 	bl	8000a1c <__aeabi_d2iz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	462b      	mov	r3, r5
 8000f78:	4622      	mov	r2, r4
 8000f7a:	490a      	ldr	r1, [pc, #40]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f7c:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f7e:	f003 fb89 	bl	8004694 <siprintf>
	if(adcDone>0) adcDone--;
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x62>
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000f94:	801a      	strh	r2, [r3, #0]

}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000b4 	.word	0x200000b4
 8000fa4:	080058b4 	.word	0x080058b4
 8000fa8:	200000bc 	.word	0x200000bc
 8000fac:	200000b8 	.word	0x200000b8

08000fb0 <app>:


void app(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	//시리어 포트 초기화
	initUart(&huart2);
 8000fb4:	480a      	ldr	r0, [pc, #40]	@ (8000fe0 <app+0x30>)
 8000fb6:	f000 fbb7 	bl	8001728 <initUart>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcValue, 2);
 8000fba:	2202      	movs	r2, #2
 8000fbc:	4909      	ldr	r1, [pc, #36]	@ (8000fe4 <app+0x34>)
 8000fbe:	480a      	ldr	r0, [pc, #40]	@ (8000fe8 <app+0x38>)
 8000fc0:	f000 fca8 	bl	8001914 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim3);
 8000fc4:	4809      	ldr	r0, [pc, #36]	@ (8000fec <app+0x3c>)
 8000fc6:	f002 fb11 	bl	80035ec <HAL_TIM_Base_Start_IT>

	while(1){
		if(adcDone == 0){
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <app+0x40>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1fb      	bne.n	8000fca <app+0x1a>
			printf(str);
 8000fd2:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <app+0x44>)
 8000fd4:	f003 fc40 	bl	8004858 <iprintf>
			adcDone = 1;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <app+0x40>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	801a      	strh	r2, [r3, #0]
		if(adcDone == 0){
 8000fde:	e7f4      	b.n	8000fca <app+0x1a>
 8000fe0:	200002b0 	.word	0x200002b0
 8000fe4:	200000b4 	.word	0x200000b4
 8000fe8:	200001c0 	.word	0x200001c0
 8000fec:	20000268 	.word	0x20000268
 8000ff0:	200000b8 	.word	0x200000b8
 8000ff4:	200000bc 	.word	0x200000bc

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f000 fbd4 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f80e 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 f96c 	bl	80012e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001008:	f000 f94a 	bl	80012a0 <MX_DMA_Init>
  MX_ADC1_Init();
 800100c:	f000 f870 	bl	80010f0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001010:	f000 f91c 	bl	800124c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001014:	f000 f8cc 	bl	80011b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app();
 8001018:	f7ff ffca 	bl	8000fb0 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <main+0x24>

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b094      	sub	sp, #80	@ 0x50
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	2230      	movs	r2, #48	@ 0x30
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fc24 	bl	800487c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <SystemClock_Config+0xc8>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	4a26      	ldr	r2, [pc, #152]	@ (80010e8 <SystemClock_Config+0xc8>)
 800104e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	@ 0x40
 8001054:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <SystemClock_Config+0xc8>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <SystemClock_Config+0xcc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a20      	ldr	r2, [pc, #128]	@ (80010ec <SystemClock_Config+0xcc>)
 800106a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <SystemClock_Config+0xcc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	2301      	movs	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001084:	2310      	movs	r3, #16
 8001086:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001088:	2302      	movs	r3, #2
 800108a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108c:	2300      	movs	r3, #0
 800108e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001090:	2308      	movs	r3, #8
 8001092:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001094:	2364      	movs	r3, #100	@ 0x64
 8001096:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fdf9 	bl	8002c9c <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b0:	f000 f930 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2103      	movs	r1, #3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f002 f85b 	bl	800318c <HAL_RCC_ClockConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010dc:	f000 f91a 	bl	8001314 <Error_Handler>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3750      	adds	r7, #80	@ 0x50
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001102:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001104:	4a29      	ldr	r2, [pc, #164]	@ (80011ac <MX_ADC1_Init+0xbc>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 800110a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800110e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001110:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001118:	2201      	movs	r2, #1
 800111a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 800111e:	2201      	movs	r2, #1
 8001120:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800112a:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 800112c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001130:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001132:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001134:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001140:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001142:	2202      	movs	r2, #2
 8001144:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001150:	2201      	movs	r2, #1
 8001152:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001154:	4814      	ldr	r0, [pc, #80]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001156:	f000 fb99 	bl	800188c <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001160:	f000 f8d8 	bl	8001314 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800116c:	2304      	movs	r3, #4
 800116e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001176:	f000 fcdb 	bl	8001b30 <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001180:	f000 f8c8 	bl	8001314 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001184:	2304      	movs	r3, #4
 8001186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001188:	2302      	movs	r3, #2
 800118a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_ADC1_Init+0xb8>)
 8001192:	f000 fccd 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800119c:	f000 f8ba 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200001c0 	.word	0x200001c0
 80011ac:	40012000 	.word	0x40012000

080011b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001248 <MX_TIM3_Init+0x98>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011d4:	2263      	movs	r2, #99	@ 0x63
 80011d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f2:	4814      	ldr	r0, [pc, #80]	@ (8001244 <MX_TIM3_Init+0x94>)
 80011f4:	f002 f9aa 	bl	800354c <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011fe:	f000 f889 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001206:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	4619      	mov	r1, r3
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_TIM3_Init+0x94>)
 8001210:	f002 fb3e 	bl	8003890 <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 f87b 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800121e:	2320      	movs	r3, #32
 8001220:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <MX_TIM3_Init+0x94>)
 800122c:	f002 fd46 	bl	8003cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001236:	f000 f86d 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000268 	.word	0x20000268
 8001248:	40000400 	.word	0x40000400

0800124c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <MX_USART2_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_USART2_UART_Init+0x4c>)
 8001284:	f002 fd9c 	bl	8003dc0 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f841 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200002b0 	.word	0x200002b0
 800129c:	40004400 	.word	0x40004400

080012a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_DMA_Init+0x3c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <MX_DMA_Init+0x3c>)
 80012b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_DMA_Init+0x3c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2038      	movs	r0, #56	@ 0x38
 80012c8:	f000 ffbd 	bl	8002246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012cc:	2038      	movs	r0, #56	@ 0x38
 80012ce:	f000 ffd6 	bl	800227e <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_GPIO_Init+0x30>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <MX_GPIO_Init+0x30>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_GPIO_Init+0x30>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <Error_Handler+0x8>

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2f      	ldr	r2, [pc, #188]	@ (800144c <HAL_ADC_MspInit+0xdc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d157      	bne.n	8001442 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a2d      	ldr	r2, [pc, #180]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a26      	ldr	r2, [pc, #152]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <HAL_ADC_MspInit+0xe0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80013ca:	2311      	movs	r3, #17
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	481d      	ldr	r0, [pc, #116]	@ (8001454 <HAL_ADC_MspInit+0xe4>)
 80013de:	f001 fad9 	bl	8002994 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013e4:	4a1d      	ldr	r2, [pc, #116]	@ (800145c <HAL_ADC_MspInit+0xec>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 80013fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001400:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 8001404:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001408:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 800140c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001410:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 8001414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001418:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001420:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001426:	480c      	ldr	r0, [pc, #48]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 8001428:	f000 ff44 	bl	80022b4 <HAL_DMA_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001432:	f7ff ff6f 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 800143a:	639a      	str	r2, [r3, #56]	@ 0x38
 800143c:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <HAL_ADC_MspInit+0xe8>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	20000208 	.word	0x20000208
 800145c:	40026410 	.word	0x40026410

08001460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0e      	ldr	r2, [pc, #56]	@ (80014a8 <HAL_TIM_Base_MspInit+0x48>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d115      	bne.n	800149e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_TIM_Base_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a0c      	ldr	r2, [pc, #48]	@ (80014ac <HAL_TIM_Base_MspInit+0x4c>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_TIM_Base_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	201d      	movs	r0, #29
 8001494:	f000 fed7 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001498:	201d      	movs	r0, #29
 800149a:	f000 fef0 	bl	800227e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40000400 	.word	0x40000400
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <HAL_UART_MspInit+0x84>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d12b      	bne.n	800152a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <HAL_UART_MspInit+0x88>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <HAL_UART_MspInit+0x88>)
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_UART_MspInit+0x88>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <HAL_UART_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a10      	ldr	r2, [pc, #64]	@ (8001538 <HAL_UART_MspInit+0x88>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <HAL_UART_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800150a:	230c      	movs	r3, #12
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151a:	2307      	movs	r3, #7
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	@ (800153c <HAL_UART_MspInit+0x8c>)
 8001526:	f001 fa35 	bl	8002994 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	@ 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40004400 	.word	0x40004400
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <NMI_Handler+0x4>

08001548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <MemManage_Handler+0x4>

08001558 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <UsageFault_Handler+0x4>

08001568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001596:	f000 f959 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <TIM3_IRQHandler+0x10>)
 80015a6:	f002 f883 	bl	80036b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000268 	.word	0x20000268

080015b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <DMA2_Stream0_IRQHandler+0x10>)
 80015ba:	f000 ff81 	bl	80024c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000208 	.word	0x20000208

080015c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e00a      	b.n	80015f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015da:	f3af 8000 	nop.w
 80015de:	4601      	mov	r1, r0
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	60ba      	str	r2, [r7, #8]
 80015e6:	b2ca      	uxtb	r2, r1
 80015e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf0      	blt.n	80015da <_read+0x12>
  }

  return len;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162a:	605a      	str	r2, [r3, #4]
  return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_isatty>:

int _isatty(int file)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f003 f8f6 	bl	800488c <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20020000 	.word	0x20020000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	200002f8 	.word	0x200002f8
 80016d4:	20000458 	.word	0x20000458

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <_write>:
uint8_t rxCharacter;
uint8_t rxBuffer[rxBufferMax];//circle Buffer
int rxBufferReadIndex;//읽기 위치
int rxBufferWriteIndex;//쓰기 위치

int _write(int file, char* p, int len){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t *)p, len, 10);
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <_write+0x28>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	b29a      	uxth	r2, r3
 8001710:	230a      	movs	r3, #10
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	f002 fba4 	bl	8003e60 <HAL_UART_Transmit>
	return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200002fc 	.word	0x200002fc

08001728 <initUart>:

}


// uart 장치 초기
void initUart(UART_HandleTypeDef *inHuart){
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	//uart 장치 주소 백업
	myHuart = inHuart;
 8001730:	4a06      	ldr	r2, [pc, #24]	@ (800174c <initUart+0x24>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
	//인터럽트 셋팅
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8001736:	4b05      	ldr	r3, [pc, #20]	@ (800174c <initUart+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	4904      	ldr	r1, [pc, #16]	@ (8001750 <initUart+0x28>)
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fc19 	bl	8003f76 <HAL_UART_Receive_IT>

}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200002fc 	.word	0x200002fc
 8001750:	20000300 	.word	0x20000300

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800178c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001758:	f7ff ffbe 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	@ (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	@ (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001782:	f003 f889 	bl	8004898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff fc37 	bl	8000ff8 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800178c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001798:	08005924 	.word	0x08005924
  ldr r2, =_sbss
 800179c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80017a0:	20000454 	.word	0x20000454

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <HAL_Init+0x40>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <HAL_Init+0x40>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <HAL_Init+0x40>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 fd2d 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	200f      	movs	r0, #15
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fda0 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fd45 	bl	800229a <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001828:	f000 fd0d 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	@ (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000030 	.word	0x20000030
 8001844:	20000038 	.word	0x20000038
 8001848:	20000034 	.word	0x20000034

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000038 	.word	0x20000038
 8001870:	20000304 	.word	0x20000304

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000304 	.word	0x20000304

0800188c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e033      	b.n	800190a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fd60 	bl	8001370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018d2:	f023 0302 	bic.w	r3, r3, #2
 80018d6:	f043 0202 	orr.w	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fa58 	bl	8001d94 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018fa:	e001      	b.n	8001900 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_ADC_Start_DMA+0x1e>
 800192e:	2302      	movs	r3, #2
 8001930:	e0ce      	b.n	8001ad0 <HAL_ADC_Start_DMA+0x1bc>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b01      	cmp	r3, #1
 8001946:	d018      	beq.n	800197a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001958:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad8 <HAL_ADC_Start_DMA+0x1c4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a5f      	ldr	r2, [pc, #380]	@ (8001adc <HAL_ADC_Start_DMA+0x1c8>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9a      	lsrs	r2, r3, #18
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800196c:	e002      	b.n	8001974 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	3b01      	subs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001988:	d107      	bne.n	800199a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001998:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	f040 8086 	bne.w	8001ab6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019e8:	d106      	bne.n	80019f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f023 0206 	bic.w	r2, r3, #6
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80019f6:	e002      	b.n	80019fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a06:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <HAL_ADC_Start_DMA+0x1cc>)
 8001a08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0e:	4a35      	ldr	r2, [pc, #212]	@ (8001ae4 <HAL_ADC_Start_DMA+0x1d0>)
 8001a10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a16:	4a34      	ldr	r2, [pc, #208]	@ (8001ae8 <HAL_ADC_Start_DMA+0x1d4>)
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1e:	4a33      	ldr	r2, [pc, #204]	@ (8001aec <HAL_ADC_Start_DMA+0x1d8>)
 8001a20:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a3a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a4a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	334c      	adds	r3, #76	@ 0x4c
 8001a56:	4619      	mov	r1, r3
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f000 fcd8 	bl	8002410 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10f      	bne.n	8001a8c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d129      	bne.n	8001ace <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	e020      	b.n	8001ace <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a17      	ldr	r2, [pc, #92]	@ (8001af0 <HAL_ADC_Start_DMA+0x1dc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d11b      	bne.n	8001ace <HAL_ADC_Start_DMA+0x1ba>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d114      	bne.n	8001ace <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	e00b      	b.n	8001ace <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f043 0210 	orr.w	r2, r3, #16
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000030 	.word	0x20000030
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	40012300 	.word	0x40012300
 8001ae4:	08001f8d 	.word	0x08001f8d
 8001ae8:	08002047 	.word	0x08002047
 8001aec:	08002063 	.word	0x08002063
 8001af0:	40012000 	.word	0x40012000

08001af4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1c>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e113      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x244>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d925      	bls.n	8001ba8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	2207      	movs	r2, #7
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	400a      	ands	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4403      	add	r3, r0
 8001b9a:	3b1e      	subs	r3, #30
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	e022      	b.n	8001bee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	400a      	ands	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6919      	ldr	r1, [r3, #16]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4403      	add	r3, r0
 8001be4:	409a      	lsls	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d824      	bhi.n	8001c40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b05      	subs	r3, #5
 8001c08:	221f      	movs	r2, #31
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	400a      	ands	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b05      	subs	r3, #5
 8001c32:	fa00 f203 	lsl.w	r2, r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c3e:	e04c      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d824      	bhi.n	8001c92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b23      	subs	r3, #35	@ 0x23
 8001c5a:	221f      	movs	r2, #31
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43da      	mvns	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3b23      	subs	r3, #35	@ 0x23
 8001c84:	fa00 f203 	lsl.w	r2, r0, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c90:	e023      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b41      	subs	r3, #65	@ 0x41
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b41      	subs	r3, #65	@ 0x41
 8001cce:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cda:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <HAL_ADC_ConfigChannel+0x250>)
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a28      	ldr	r2, [pc, #160]	@ (8001d84 <HAL_ADC_ConfigChannel+0x254>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d10f      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1d8>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d10b      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d84 <HAL_ADC_ConfigChannel+0x254>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12b      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x23a>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1c      	ldr	r2, [pc, #112]	@ (8001d88 <HAL_ADC_ConfigChannel+0x258>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d003      	beq.n	8001d24 <HAL_ADC_ConfigChannel+0x1f4>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b11      	cmp	r3, #17
 8001d22:	d122      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a11      	ldr	r2, [pc, #68]	@ (8001d88 <HAL_ADC_ConfigChannel+0x258>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d111      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_ADC_ConfigChannel+0x25c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <HAL_ADC_ConfigChannel+0x260>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	0c9a      	lsrs	r2, r3, #18
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40012300 	.word	0x40012300
 8001d84:	40012000 	.word	0x40012000
 8001d88:	10000012 	.word	0x10000012
 8001d8c:	20000030 	.word	0x20000030
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9c:	4b79      	ldr	r3, [pc, #484]	@ (8001f84 <ADC_Init+0x1f0>)
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	021a      	lsls	r2, r3, #8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	4a58      	ldr	r2, [pc, #352]	@ (8001f88 <ADC_Init+0x1f4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d022      	beq.n	8001e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e00f      	b.n	8001e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e90:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0202 	bic.w	r2, r2, #2
 8001ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7e1b      	ldrb	r3, [r3, #24]
 8001eac:	005a      	lsls	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ece:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	3b01      	subs	r3, #1
 8001eec:	035a      	lsls	r2, r3, #13
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	e007      	b.n	8001f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f06:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	051a      	lsls	r2, r3, #20
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6899      	ldr	r1, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f4a:	025a      	lsls	r2, r3, #9
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	029a      	lsls	r2, r3, #10
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40012300 	.word	0x40012300
 8001f88:	0f000001 	.word	0x0f000001

08001f8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d13c      	bne.n	8002020 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d12b      	bne.n	8002018 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d127      	bne.n	8002018 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d119      	bne.n	8002018 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0220 	bic.w	r2, r2, #32
 8001ff2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7ff fd6b 	bl	8001af4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800201e:	e00e      	b.n	800203e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7ff fd75 	bl	8001b1c <HAL_ADC_ErrorCallback>
}
 8002032:	e004      	b.n	800203e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002052:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7ff fd57 	bl	8001b08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2240      	movs	r2, #64	@ 0x40
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f043 0204 	orr.w	r2, r3, #4
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fd4a 	bl	8001b1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	@ (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	@ (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff fad8 	bl	8001874 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e099      	b.n	8002404 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f0:	e00f      	b.n	8002312 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022f2:	f7ff fabf 	bl	8001874 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d908      	bls.n	8002312 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2203      	movs	r2, #3
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e078      	b.n	8002404 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e8      	bne.n	80022f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4b38      	ldr	r3, [pc, #224]	@ (800240c <HAL_DMA_Init+0x158>)
 800232c:	4013      	ands	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	2b04      	cmp	r3, #4
 800236a:	d107      	bne.n	800237c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	4313      	orrs	r3, r2
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f023 0307 	bic.w	r3, r3, #7
 8002392:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d117      	bne.n	80023d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fa6f 	bl	800289c <DMA_CheckFifoParam>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2240      	movs	r2, #64	@ 0x40
 80023c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023d2:	2301      	movs	r3, #1
 80023d4:	e016      	b.n	8002404 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa26 	bl	8002830 <DMA_CalcBaseAndBitshift>
 80023e4:	4603      	mov	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ec:	223f      	movs	r2, #63	@ 0x3f
 80023ee:	409a      	lsls	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	f010803f 	.word	0xf010803f

08002410 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_DMA_Start_IT+0x26>
 8002432:	2302      	movs	r3, #2
 8002434:	e040      	b.n	80024b8 <HAL_DMA_Start_IT+0xa8>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d12f      	bne.n	80024aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f9b8 	bl	80027d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	223f      	movs	r2, #63	@ 0x3f
 800246a:	409a      	lsls	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0216 	orr.w	r2, r2, #22
 800247e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0208 	orr.w	r2, r2, #8
 8002496:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e005      	b.n	80024b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
 80024b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002708 <HAL_DMA_IRQHandler+0x248>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a8e      	ldr	r2, [pc, #568]	@ (800270c <HAL_DMA_IRQHandler+0x24c>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0a9b      	lsrs	r3, r3, #10
 80024d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	2208      	movs	r2, #8
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01a      	beq.n	800252c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	2208      	movs	r2, #8
 800251a:	409a      	lsls	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002530:	2201      	movs	r2, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d012      	beq.n	8002562 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	2201      	movs	r2, #1
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255a:	f043 0202 	orr.w	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002566:	2204      	movs	r2, #4
 8002568:	409a      	lsls	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d012      	beq.n	8002598 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002584:	2204      	movs	r2, #4
 8002586:	409a      	lsls	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002590:	f043 0204 	orr.w	r2, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259c:	2210      	movs	r2, #16
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d043      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d03c      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	2210      	movs	r2, #16
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d018      	beq.n	8002602 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d108      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d024      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
 80025ee:	e01f      	b.n	8002630 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01b      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
 8002600:	e016      	b.n	8002630 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0208 	bic.w	r2, r2, #8
 800261e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	2220      	movs	r2, #32
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 808f 	beq.w	8002760 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8087 	beq.w	8002760 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002656:	2220      	movs	r2, #32
 8002658:	409a      	lsls	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b05      	cmp	r3, #5
 8002668:	d136      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0216 	bic.w	r2, r2, #22
 8002678:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002688:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <HAL_DMA_IRQHandler+0x1da>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0208 	bic.w	r2, r2, #8
 80026a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	223f      	movs	r2, #63	@ 0x3f
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d07e      	beq.n	80027cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
        }
        return;
 80026d6:	e079      	b.n	80027cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d031      	beq.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e02c      	b.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
 8002706:	bf00      	nop
 8002708:	20000030 	.word	0x20000030
 800270c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d023      	beq.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
 8002720:	e01e      	b.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10f      	bne.n	8002750 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0210 	bic.w	r2, r2, #16
 800273e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002764:	2b00      	cmp	r3, #0
 8002766:	d032      	beq.n	80027ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d022      	beq.n	80027ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2205      	movs	r2, #5
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3301      	adds	r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	d307      	bcc.n	80027a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f2      	bne.n	800278c <HAL_DMA_IRQHandler+0x2cc>
 80027a6:	e000      	b.n	80027aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
 80027ca:	e000      	b.n	80027ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80027cc:	bf00      	nop
    }
  }
}
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b40      	cmp	r3, #64	@ 0x40
 8002800:	d108      	bne.n	8002814 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002812:	e007      	b.n	8002824 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3b10      	subs	r3, #16
 8002840:	4a14      	ldr	r2, [pc, #80]	@ (8002894 <DMA_CalcBaseAndBitshift+0x64>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800284a:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <DMA_CalcBaseAndBitshift+0x68>)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d909      	bls.n	8002872 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	1d1a      	adds	r2, r3, #4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002870:	e007      	b.n	8002882 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800287a:	f023 0303 	bic.w	r3, r3, #3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	aaaaaaab 	.word	0xaaaaaaab
 8002898:	080058d8 	.word	0x080058d8

0800289c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11f      	bne.n	80028f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d856      	bhi.n	800296a <DMA_CheckFifoParam+0xce>
 80028bc:	a201      	add	r2, pc, #4	@ (adr r2, 80028c4 <DMA_CheckFifoParam+0x28>)
 80028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c2:	bf00      	nop
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028e7 	.word	0x080028e7
 80028cc:	080028d5 	.word	0x080028d5
 80028d0:	0800296b 	.word	0x0800296b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d046      	beq.n	800296e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e4:	e043      	b.n	800296e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028ee:	d140      	bne.n	8002972 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f4:	e03d      	b.n	8002972 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028fe:	d121      	bne.n	8002944 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d837      	bhi.n	8002976 <DMA_CheckFifoParam+0xda>
 8002906:	a201      	add	r2, pc, #4	@ (adr r2, 800290c <DMA_CheckFifoParam+0x70>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002923 	.word	0x08002923
 8002914:	0800291d 	.word	0x0800291d
 8002918:	08002935 	.word	0x08002935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      break;
 8002920:	e030      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d025      	beq.n	800297a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002932:	e022      	b.n	800297a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800293c:	d11f      	bne.n	800297e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002942:	e01c      	b.n	800297e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d903      	bls.n	8002952 <DMA_CheckFifoParam+0xb6>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d003      	beq.n	8002958 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002950:	e018      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      break;
 8002956:	e015      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e00b      	b.n	8002982 <DMA_CheckFifoParam+0xe6>
      break;
 800296a:	bf00      	nop
 800296c:	e00a      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e008      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e006      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 8002976:	bf00      	nop
 8002978:	e004      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
 800297c:	e002      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;   
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
    }
  } 
  
  return status; 
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	@ 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e159      	b.n	8002c64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f040 8148 	bne.w	8002c5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d005      	beq.n	80029e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d130      	bne.n	8002a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	2203      	movs	r2, #3
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0201 	and.w	r2, r3, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d017      	beq.n	8002a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d123      	bne.n	8002ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80a2 	beq.w	8002c5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b57      	ldr	r3, [pc, #348]	@ (8002c7c <HAL_GPIO_Init+0x2e8>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	4a56      	ldr	r2, [pc, #344]	@ (8002c7c <HAL_GPIO_Init+0x2e8>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2a:	4b54      	ldr	r3, [pc, #336]	@ (8002c7c <HAL_GPIO_Init+0x2e8>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b36:	4a52      	ldr	r2, [pc, #328]	@ (8002c80 <HAL_GPIO_Init+0x2ec>)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a49      	ldr	r2, [pc, #292]	@ (8002c84 <HAL_GPIO_Init+0x2f0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d019      	beq.n	8002b96 <HAL_GPIO_Init+0x202>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a48      	ldr	r2, [pc, #288]	@ (8002c88 <HAL_GPIO_Init+0x2f4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_GPIO_Init+0x1fe>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a47      	ldr	r2, [pc, #284]	@ (8002c8c <HAL_GPIO_Init+0x2f8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00d      	beq.n	8002b8e <HAL_GPIO_Init+0x1fa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a46      	ldr	r2, [pc, #280]	@ (8002c90 <HAL_GPIO_Init+0x2fc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <HAL_GPIO_Init+0x1f6>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a45      	ldr	r2, [pc, #276]	@ (8002c94 <HAL_GPIO_Init+0x300>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_GPIO_Init+0x1f2>
 8002b82:	2304      	movs	r3, #4
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b86:	2307      	movs	r3, #7
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x204>
 8002b96:	2300      	movs	r3, #0
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba8:	4935      	ldr	r1, [pc, #212]	@ (8002c80 <HAL_GPIO_Init+0x2ec>)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bb6:	4b38      	ldr	r3, [pc, #224]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bda:	4a2f      	ldr	r2, [pc, #188]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c04:	4a24      	ldr	r2, [pc, #144]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c0a:	4b23      	ldr	r3, [pc, #140]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c34:	4b18      	ldr	r3, [pc, #96]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c58:	4a0f      	ldr	r2, [pc, #60]	@ (8002c98 <HAL_GPIO_Init+0x304>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	f67f aea2 	bls.w	80029b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3724      	adds	r7, #36	@ 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40020000 	.word	0x40020000
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40013c00 	.word	0x40013c00

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e267      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d075      	beq.n	8002da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cba:	4b88      	ldr	r3, [pc, #544]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc6:	4b85      	ldr	r3, [pc, #532]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d112      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b82      	ldr	r3, [pc, #520]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d05b      	beq.n	8002da4 <HAL_RCC_OscConfig+0x108>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d157      	bne.n	8002da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e242      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d00:	d106      	bne.n	8002d10 <HAL_RCC_OscConfig+0x74>
 8002d02:	4b76      	ldr	r3, [pc, #472]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x98>
 8002d1a:	4b70      	ldr	r3, [pc, #448]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b6d      	ldr	r3, [pc, #436]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d34:	4b69      	ldr	r3, [pc, #420]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a68      	ldr	r2, [pc, #416]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b66      	ldr	r3, [pc, #408]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fd8e 	bl	8001874 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fe fd8a 	bl	8001874 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	@ 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e207      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0xc0>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fd7a 	bl	8001874 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fd76 	bl	8001874 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	@ 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1f3      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	4b51      	ldr	r3, [pc, #324]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0xe8>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002db2:	4b4a      	ldr	r3, [pc, #296]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dbe:	4b47      	ldr	r3, [pc, #284]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b44      	ldr	r3, [pc, #272]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b41      	ldr	r3, [pc, #260]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1c7      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b3b      	ldr	r3, [pc, #236]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4937      	ldr	r1, [pc, #220]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e03a      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe fd2f 	bl	8001874 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fd2b 	bl	8001874 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1a8      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b28      	ldr	r3, [pc, #160]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4925      	ldr	r1, [pc, #148]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
 8002e4c:	e015      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fd0e 	bl	8001874 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fd0a 	bl	8001874 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e187      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d036      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fcee 	bl	8001874 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe fcea 	bl	8001874 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e167      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_OscConfig+0x240>)
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x200>
 8002eba:	e01b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fcd7 	bl	8001874 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	e00e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eca:	f7fe fcd3 	bl	8001874 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d907      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e150      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	42470000 	.word	0x42470000
 8002ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b88      	ldr	r3, [pc, #544]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ea      	bne.n	8002eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8097 	beq.w	8003030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b81      	ldr	r3, [pc, #516]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	4b7d      	ldr	r3, [pc, #500]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b7a      	ldr	r3, [pc, #488]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b77      	ldr	r3, [pc, #476]	@ (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b74      	ldr	r3, [pc, #464]	@ (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a73      	ldr	r2, [pc, #460]	@ (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fc93 	bl	8001874 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe fc8f 	bl	8001874 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e10c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b6a      	ldr	r3, [pc, #424]	@ (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2ea>
 8002f78:	4b64      	ldr	r3, [pc, #400]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	4a63      	ldr	r2, [pc, #396]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f84:	e01c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x30c>
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	4a5e      	ldr	r2, [pc, #376]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002fa8:	4b58      	ldr	r3, [pc, #352]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	4a57      	ldr	r2, [pc, #348]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb4:	4b55      	ldr	r3, [pc, #340]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	4a54      	ldr	r2, [pc, #336]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0304 	bic.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fc54 	bl	8001874 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fc50 	bl	8001874 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0cb      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	4b49      	ldr	r3, [pc, #292]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ee      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x334>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe fc3e 	bl	8001874 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fc3a 	bl	8001874 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0b5      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	4b3e      	ldr	r3, [pc, #248]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ee      	bne.n	8002ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003024:	4b39      	ldr	r3, [pc, #228]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	4a38      	ldr	r2, [pc, #224]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 800302a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800302e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a1 	beq.w	800317c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303a:	4b34      	ldr	r3, [pc, #208]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b08      	cmp	r3, #8
 8003044:	d05c      	beq.n	8003100 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d141      	bne.n	80030d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <HAL_RCC_OscConfig+0x478>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe fc0e 	bl	8001874 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fc0a 	bl	8001874 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e087      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b27      	ldr	r3, [pc, #156]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	491b      	ldr	r1, [pc, #108]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003114 <HAL_RCC_OscConfig+0x478>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe fbe3 	bl	8001874 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe fbdf 	bl	8001874 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e05c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	4b11      	ldr	r3, [pc, #68]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x416>
 80030d0:	e054      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <HAL_RCC_OscConfig+0x478>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe fbcc 	bl	8001874 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe fbc8 	bl	8001874 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e045      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_RCC_OscConfig+0x470>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x444>
 80030fe:	e03d      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e038      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 800310c:	40023800 	.word	0x40023800
 8003110:	40007000 	.word	0x40007000
 8003114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003118:	4b1b      	ldr	r3, [pc, #108]	@ (8003188 <HAL_RCC_OscConfig+0x4ec>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d028      	beq.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d121      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d11a      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800314e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	3b01      	subs	r3, #1
 8003162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0cc      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b68      	ldr	r3, [pc, #416]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d90c      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b65      	ldr	r3, [pc, #404]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a58      	ldr	r2, [pc, #352]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a52      	ldr	r2, [pc, #328]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d044      	beq.n	80032ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d119      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	2b03      	cmp	r3, #3
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b3f      	ldr	r3, [pc, #252]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e06f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b3b      	ldr	r3, [pc, #236]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e067      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b37      	ldr	r3, [pc, #220]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4934      	ldr	r1, [pc, #208]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327c:	f7fe fafa 	bl	8001874 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7fe faf6 	bl	8001874 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e04f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b2b      	ldr	r3, [pc, #172]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d20c      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b22      	ldr	r3, [pc, #136]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fe:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490a      	ldr	r1, [pc, #40]	@ (800334c <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	@ (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fa5a 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023c00 	.word	0x40023c00
 8003348:	40023800 	.word	0x40023800
 800334c:	080058c0 	.word	0x080058c0
 8003350:	20000030 	.word	0x20000030
 8003354:	20000034 	.word	0x20000034

08003358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b090      	sub	sp, #64	@ 0x40
 800335e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003370:	4b59      	ldr	r3, [pc, #356]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b08      	cmp	r3, #8
 800337a:	d00d      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x40>
 800337c:	2b08      	cmp	r3, #8
 800337e:	f200 80a1 	bhi.w	80034c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x34>
 8003386:	2b04      	cmp	r3, #4
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x3a>
 800338a:	e09b      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b53      	ldr	r3, [pc, #332]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x184>)
 800338e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003390:	e09b      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003392:	4b53      	ldr	r3, [pc, #332]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003394:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003396:	e098      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003398:	4b4f      	ldr	r3, [pc, #316]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a2:	4b4d      	ldr	r3, [pc, #308]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d028      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4b4a      	ldr	r3, [pc, #296]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	2200      	movs	r2, #0
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033c0:	2100      	movs	r1, #0
 80033c2:	4b47      	ldr	r3, [pc, #284]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c4:	fb03 f201 	mul.w	r2, r3, r1
 80033c8:	2300      	movs	r3, #0
 80033ca:	fb00 f303 	mul.w	r3, r0, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	4a43      	ldr	r2, [pc, #268]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80033d2:	fba0 1202 	umull	r1, r2, r0, r2
 80033d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033d8:	460a      	mov	r2, r1
 80033da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033de:	4413      	add	r3, r2
 80033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e4:	2200      	movs	r2, #0
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	61fa      	str	r2, [r7, #28]
 80033ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033f2:	f7fd fb3b 	bl	8000a6c <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4613      	mov	r3, r2
 80033fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033fe:	e053      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003400:	4b35      	ldr	r3, [pc, #212]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	2200      	movs	r2, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	617a      	str	r2, [r7, #20]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003412:	f04f 0b00 	mov.w	fp, #0
 8003416:	4652      	mov	r2, sl
 8003418:	465b      	mov	r3, fp
 800341a:	f04f 0000 	mov.w	r0, #0
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	0159      	lsls	r1, r3, #5
 8003424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003428:	0150      	lsls	r0, r2, #5
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	ebb2 080a 	subs.w	r8, r2, sl
 8003432:	eb63 090b 	sbc.w	r9, r3, fp
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003442:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003446:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800344a:	ebb2 0408 	subs.w	r4, r2, r8
 800344e:	eb63 0509 	sbc.w	r5, r3, r9
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	00eb      	lsls	r3, r5, #3
 800345c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003460:	00e2      	lsls	r2, r4, #3
 8003462:	4614      	mov	r4, r2
 8003464:	461d      	mov	r5, r3
 8003466:	eb14 030a 	adds.w	r3, r4, sl
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	eb45 030b 	adc.w	r3, r5, fp
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800347e:	4629      	mov	r1, r5
 8003480:	028b      	lsls	r3, r1, #10
 8003482:	4621      	mov	r1, r4
 8003484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003488:	4621      	mov	r1, r4
 800348a:	028a      	lsls	r2, r1, #10
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003492:	2200      	movs	r2, #0
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	60fa      	str	r2, [r7, #12]
 8003498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800349c:	f7fd fae6 	bl	8000a6c <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4613      	mov	r3, r2
 80034a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	3301      	adds	r3, #1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80034b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034c2:	e002      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x184>)
 80034c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3740      	adds	r7, #64	@ 0x40
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	017d7840 	.word	0x017d7840

080034e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000030 	.word	0x20000030

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003500:	f7ff fff0 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b05      	ldr	r3, [pc, #20]	@ (800351c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0a9b      	lsrs	r3, r3, #10
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4903      	ldr	r1, [pc, #12]	@ (8003520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	080058d0 	.word	0x080058d0

08003524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003528:	f7ff ffdc 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 800352c:	4602      	mov	r2, r0
 800352e:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	0b5b      	lsrs	r3, r3, #13
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	4903      	ldr	r1, [pc, #12]	@ (8003548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800353a:	5ccb      	ldrb	r3, [r1, r3]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	080058d0 	.word	0x080058d0

0800354c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e041      	b.n	80035e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd ff74 	bl	8001460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f000 fa70 	bl	8003a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d001      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e044      	b.n	800368e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1e      	ldr	r2, [pc, #120]	@ (800369c <HAL_TIM_Base_Start_IT+0xb0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x6c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362e:	d013      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x6c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1a      	ldr	r2, [pc, #104]	@ (80036a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x6c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a19      	ldr	r2, [pc, #100]	@ (80036a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x6c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x6c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <HAL_TIM_Base_Start_IT+0xc0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d111      	bne.n	800367c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b06      	cmp	r3, #6
 8003668:	d010      	beq.n	800368c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367a:	e007      	b.n	800368c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40014000 	.word	0x40014000

080036b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d020      	beq.n	8003714 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01b      	beq.n	8003714 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0202 	mvn.w	r2, #2
 80036e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f999 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f98b 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f99c 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d020      	beq.n	8003760 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01b      	beq.n	8003760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0204 	mvn.w	r2, #4
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f973 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f965 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f976 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d020      	beq.n	80037ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01b      	beq.n	80037ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0208 	mvn.w	r2, #8
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2204      	movs	r2, #4
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f94d 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f93f 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f950 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d020      	beq.n	80037f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01b      	beq.n	80037f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0210 	mvn.w	r2, #16
 80037c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2208      	movs	r2, #8
 80037ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f927 	bl	8003a32 <HAL_TIM_IC_CaptureCallback>
 80037e4:	e005      	b.n	80037f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f919 	bl	8003a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f92a 	bl	8003a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00c      	beq.n	800381c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0201 	mvn.w	r2, #1
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd fb8c 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fab6 	bl	8003dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8fb 	bl	8003a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0220 	mvn.w	r2, #32
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa88 	bl	8003d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIM_ConfigClockSource+0x1c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0b4      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x186>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e4:	d03e      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0xd4>
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ea:	f200 8087 	bhi.w	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f2:	f000 8086 	beq.w	8003a02 <HAL_TIM_ConfigClockSource+0x172>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fa:	d87f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b70      	cmp	r3, #112	@ 0x70
 80038fe:	d01a      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xa6>
 8003900:	2b70      	cmp	r3, #112	@ 0x70
 8003902:	d87b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b60      	cmp	r3, #96	@ 0x60
 8003906:	d050      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x11a>
 8003908:	2b60      	cmp	r3, #96	@ 0x60
 800390a:	d877      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b50      	cmp	r3, #80	@ 0x50
 800390e:	d03c      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xfa>
 8003910:	2b50      	cmp	r3, #80	@ 0x50
 8003912:	d873      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	d058      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x13a>
 8003918:	2b40      	cmp	r3, #64	@ 0x40
 800391a:	d86f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b30      	cmp	r3, #48	@ 0x30
 800391e:	d064      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003920:	2b30      	cmp	r3, #48	@ 0x30
 8003922:	d86b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d060      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d867      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05c      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	2b10      	cmp	r3, #16
 8003932:	d05a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003934:	e062      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003946:	f000 f999 	bl	8003c7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]
      break;
 8003962:	e04f      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	f000 f982 	bl	8003c7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e03c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003996:	461a      	mov	r2, r3
 8003998:	f000 f8f6 	bl	8003b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2150      	movs	r1, #80	@ 0x50
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f94f 	bl	8003c46 <TIM_ITRx_SetConfig>
      break;
 80039a8:	e02c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 f915 	bl	8003be6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2160      	movs	r1, #96	@ 0x60
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f93f 	bl	8003c46 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e01c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	461a      	mov	r2, r3
 80039d8:	f000 f8d6 	bl	8003b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2140      	movs	r1, #64	@ 0x40
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f92f 	bl	8003c46 <TIM_ITRx_SetConfig>
      break;
 80039e8:	e00c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 f926 	bl	8003c46 <TIM_ITRx_SetConfig>
      break;
 80039fa:	e003      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e000      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3a      	ldr	r2, [pc, #232]	@ (8003b6c <TIM_Base_SetConfig+0xfc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00f      	beq.n	8003aa8 <TIM_Base_SetConfig+0x38>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_Base_SetConfig+0x38>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a37      	ldr	r2, [pc, #220]	@ (8003b70 <TIM_Base_SetConfig+0x100>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0x38>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a36      	ldr	r2, [pc, #216]	@ (8003b74 <TIM_Base_SetConfig+0x104>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0x38>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a35      	ldr	r2, [pc, #212]	@ (8003b78 <TIM_Base_SetConfig+0x108>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b6c <TIM_Base_SetConfig+0xfc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01b      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac8:	d017      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a28      	ldr	r2, [pc, #160]	@ (8003b70 <TIM_Base_SetConfig+0x100>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	@ (8003b74 <TIM_Base_SetConfig+0x104>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00f      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a26      	ldr	r2, [pc, #152]	@ (8003b78 <TIM_Base_SetConfig+0x108>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a25      	ldr	r2, [pc, #148]	@ (8003b7c <TIM_Base_SetConfig+0x10c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a24      	ldr	r2, [pc, #144]	@ (8003b80 <TIM_Base_SetConfig+0x110>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <TIM_Base_SetConfig+0x114>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a0e      	ldr	r2, [pc, #56]	@ (8003b6c <TIM_Base_SetConfig+0xfc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d103      	bne.n	8003b40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d105      	bne.n	8003b5e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	611a      	str	r2, [r3, #16]
  }
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800

08003b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f023 0201 	bic.w	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f023 030a 	bic.w	r3, r3, #10
 8003bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b087      	sub	sp, #28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f023 0210 	bic.w	r2, r3, #16
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	031b      	lsls	r3, r3, #12
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f043 0307 	orr.w	r3, r3, #7
 8003c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	609a      	str	r2, [r3, #8]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	021a      	lsls	r2, r3, #8
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	609a      	str	r2, [r3, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e050      	b.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1c      	ldr	r2, [pc, #112]	@ (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d20:	d013      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a18      	ldr	r2, [pc, #96]	@ (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a16      	ldr	r2, [pc, #88]	@ (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a15      	ldr	r2, [pc, #84]	@ (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a13      	ldr	r2, [pc, #76]	@ (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10c      	bne.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	40014000 	.word	0x40014000

08003d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e042      	b.n	8003e58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd fb62 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2224      	movs	r2, #36	@ 0x24
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f9d1 	bl	80041ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	@ 0x28
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d175      	bne.n	8003f6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_UART_Transmit+0x2c>
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e06e      	b.n	8003f6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2221      	movs	r2, #33	@ 0x21
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e9e:	f7fd fce9 	bl	8001874 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb8:	d108      	bne.n	8003ecc <HAL_UART_Transmit+0x6c>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	e003      	b.n	8003ed4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ed4:	e02e      	b.n	8003f34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2180      	movs	r1, #128	@ 0x80
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f86d 	bl	8003fc0 <UART_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e03a      	b.n	8003f6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	3302      	adds	r3, #2
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	e007      	b.n	8003f26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3301      	adds	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1cb      	bne.n	8003ed6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2200      	movs	r2, #0
 8003f46:	2140      	movs	r1, #64	@ 0x40
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f839 	bl	8003fc0 <UART_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e006      	b.n	8003f6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3720      	adds	r7, #32
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	4613      	mov	r3, r2
 8003f82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d112      	bne.n	8003fb6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_UART_Receive_IT+0x26>
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e00b      	b.n	8003fb8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f860 	bl	8004072 <UART_Start_Receive_IT>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	e000      	b.n	8003fb8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd0:	e03b      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fd8:	d037      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7fd fc4b 	bl	8001874 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d302      	bcc.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e03a      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d023      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b80      	cmp	r3, #128	@ 0x80
 8004006:	d020      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d01d      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b08      	cmp	r3, #8
 800401a:	d116      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f857 	bl	80040e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2208      	movs	r2, #8
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e00f      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	429a      	cmp	r2, r3
 8004066:	d0b4      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	4613      	mov	r3, r2
 800407e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2222      	movs	r2, #34	@ 0x22
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b095      	sub	sp, #84	@ 0x54
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800410e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004110:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004114:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800411c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e5      	bne.n	80040ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3314      	adds	r3, #20
 8004128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	61fb      	str	r3, [r7, #28]
   return(result);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3314      	adds	r3, #20
 8004140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e5      	bne.n	8004122 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	2b01      	cmp	r3, #1
 800415c:	d119      	bne.n	8004192 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	60bb      	str	r3, [r7, #8]
   return(result);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f023 0310 	bic.w	r3, r3, #16
 8004174:	647b      	str	r3, [r7, #68]	@ 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800417e:	61ba      	str	r2, [r7, #24]
 8004180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6979      	ldr	r1, [r7, #20]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	613b      	str	r3, [r7, #16]
   return(result);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041a0:	bf00      	nop
 80041a2:	3754      	adds	r7, #84	@ 0x54
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b0:	b0c0      	sub	sp, #256	@ 0x100
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	68d9      	ldr	r1, [r3, #12]
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	ea40 0301 	orr.w	r3, r0, r1
 80041d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004204:	f021 010c 	bic.w	r1, r1, #12
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004212:	430b      	orrs	r3, r1
 8004214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004226:	6999      	ldr	r1, [r3, #24]
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	ea40 0301 	orr.w	r3, r0, r1
 8004232:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b8f      	ldr	r3, [pc, #572]	@ (8004478 <UART_SetConfig+0x2cc>)
 800423c:	429a      	cmp	r2, r3
 800423e:	d005      	beq.n	800424c <UART_SetConfig+0xa0>
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b8d      	ldr	r3, [pc, #564]	@ (800447c <UART_SetConfig+0x2d0>)
 8004248:	429a      	cmp	r2, r3
 800424a:	d104      	bne.n	8004256 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7ff f96a 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8004250:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004254:	e003      	b.n	800425e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004256:	f7ff f951 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 800425a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004268:	f040 810c 	bne.w	8004484 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800426c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004276:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800427a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800427e:	4622      	mov	r2, r4
 8004280:	462b      	mov	r3, r5
 8004282:	1891      	adds	r1, r2, r2
 8004284:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004286:	415b      	adcs	r3, r3
 8004288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800428a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800428e:	4621      	mov	r1, r4
 8004290:	eb12 0801 	adds.w	r8, r2, r1
 8004294:	4629      	mov	r1, r5
 8004296:	eb43 0901 	adc.w	r9, r3, r1
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ae:	4690      	mov	r8, r2
 80042b0:	4699      	mov	r9, r3
 80042b2:	4623      	mov	r3, r4
 80042b4:	eb18 0303 	adds.w	r3, r8, r3
 80042b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042bc:	462b      	mov	r3, r5
 80042be:	eb49 0303 	adc.w	r3, r9, r3
 80042c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042da:	460b      	mov	r3, r1
 80042dc:	18db      	adds	r3, r3, r3
 80042de:	653b      	str	r3, [r7, #80]	@ 0x50
 80042e0:	4613      	mov	r3, r2
 80042e2:	eb42 0303 	adc.w	r3, r2, r3
 80042e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80042e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042f0:	f7fc fbbc 	bl	8000a6c <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4b61      	ldr	r3, [pc, #388]	@ (8004480 <UART_SetConfig+0x2d4>)
 80042fa:	fba3 2302 	umull	r2, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	011c      	lsls	r4, r3, #4
 8004302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800430c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004310:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	1891      	adds	r1, r2, r2
 800431a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800431c:	415b      	adcs	r3, r3
 800431e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004324:	4641      	mov	r1, r8
 8004326:	eb12 0a01 	adds.w	sl, r2, r1
 800432a:	4649      	mov	r1, r9
 800432c:	eb43 0b01 	adc.w	fp, r3, r1
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800433c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004344:	4692      	mov	sl, r2
 8004346:	469b      	mov	fp, r3
 8004348:	4643      	mov	r3, r8
 800434a:	eb1a 0303 	adds.w	r3, sl, r3
 800434e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004352:	464b      	mov	r3, r9
 8004354:	eb4b 0303 	adc.w	r3, fp, r3
 8004358:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004368:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800436c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004370:	460b      	mov	r3, r1
 8004372:	18db      	adds	r3, r3, r3
 8004374:	643b      	str	r3, [r7, #64]	@ 0x40
 8004376:	4613      	mov	r3, r2
 8004378:	eb42 0303 	adc.w	r3, r2, r3
 800437c:	647b      	str	r3, [r7, #68]	@ 0x44
 800437e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004382:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004386:	f7fc fb71 	bl	8000a6c <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4611      	mov	r1, r2
 8004390:	4b3b      	ldr	r3, [pc, #236]	@ (8004480 <UART_SetConfig+0x2d4>)
 8004392:	fba3 2301 	umull	r2, r3, r3, r1
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2264      	movs	r2, #100	@ 0x64
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	1acb      	subs	r3, r1, r3
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043a6:	4b36      	ldr	r3, [pc, #216]	@ (8004480 <UART_SetConfig+0x2d4>)
 80043a8:	fba3 2302 	umull	r2, r3, r3, r2
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043b4:	441c      	add	r4, r3
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	1891      	adds	r1, r2, r2
 80043ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043d0:	415b      	adcs	r3, r3
 80043d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043d8:	4641      	mov	r1, r8
 80043da:	1851      	adds	r1, r2, r1
 80043dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80043de:	4649      	mov	r1, r9
 80043e0:	414b      	adcs	r3, r1
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043f0:	4659      	mov	r1, fp
 80043f2:	00cb      	lsls	r3, r1, #3
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fa:	4651      	mov	r1, sl
 80043fc:	00ca      	lsls	r2, r1, #3
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	4603      	mov	r3, r0
 8004404:	4642      	mov	r2, r8
 8004406:	189b      	adds	r3, r3, r2
 8004408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800440c:	464b      	mov	r3, r9
 800440e:	460a      	mov	r2, r1
 8004410:	eb42 0303 	adc.w	r3, r2, r3
 8004414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004424:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800442c:	460b      	mov	r3, r1
 800442e:	18db      	adds	r3, r3, r3
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004432:	4613      	mov	r3, r2
 8004434:	eb42 0303 	adc.w	r3, r2, r3
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800443e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004442:	f7fc fb13 	bl	8000a6c <__aeabi_uldivmod>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <UART_SetConfig+0x2d4>)
 800444c:	fba3 1302 	umull	r1, r3, r3, r2
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	2164      	movs	r1, #100	@ 0x64
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	3332      	adds	r3, #50	@ 0x32
 800445e:	4a08      	ldr	r2, [pc, #32]	@ (8004480 <UART_SetConfig+0x2d4>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	f003 0207 	and.w	r2, r3, #7
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4422      	add	r2, r4
 8004472:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004474:	e106      	b.n	8004684 <UART_SetConfig+0x4d8>
 8004476:	bf00      	nop
 8004478:	40011000 	.word	0x40011000
 800447c:	40011400 	.word	0x40011400
 8004480:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004488:	2200      	movs	r2, #0
 800448a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800448e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004492:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004496:	4642      	mov	r2, r8
 8004498:	464b      	mov	r3, r9
 800449a:	1891      	adds	r1, r2, r2
 800449c:	6239      	str	r1, [r7, #32]
 800449e:	415b      	adcs	r3, r3
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044a6:	4641      	mov	r1, r8
 80044a8:	1854      	adds	r4, r2, r1
 80044aa:	4649      	mov	r1, r9
 80044ac:	eb43 0501 	adc.w	r5, r3, r1
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	00eb      	lsls	r3, r5, #3
 80044ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044be:	00e2      	lsls	r2, r4, #3
 80044c0:	4614      	mov	r4, r2
 80044c2:	461d      	mov	r5, r3
 80044c4:	4643      	mov	r3, r8
 80044c6:	18e3      	adds	r3, r4, r3
 80044c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044cc:	464b      	mov	r3, r9
 80044ce:	eb45 0303 	adc.w	r3, r5, r3
 80044d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044f2:	4629      	mov	r1, r5
 80044f4:	008b      	lsls	r3, r1, #2
 80044f6:	4621      	mov	r1, r4
 80044f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044fc:	4621      	mov	r1, r4
 80044fe:	008a      	lsls	r2, r1, #2
 8004500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004504:	f7fc fab2 	bl	8000a6c <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4b60      	ldr	r3, [pc, #384]	@ (8004690 <UART_SetConfig+0x4e4>)
 800450e:	fba3 2302 	umull	r2, r3, r3, r2
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	011c      	lsls	r4, r3, #4
 8004516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800451a:	2200      	movs	r2, #0
 800451c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004520:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	1891      	adds	r1, r2, r2
 800452e:	61b9      	str	r1, [r7, #24]
 8004530:	415b      	adcs	r3, r3
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004538:	4641      	mov	r1, r8
 800453a:	1851      	adds	r1, r2, r1
 800453c:	6139      	str	r1, [r7, #16]
 800453e:	4649      	mov	r1, r9
 8004540:	414b      	adcs	r3, r1
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004550:	4659      	mov	r1, fp
 8004552:	00cb      	lsls	r3, r1, #3
 8004554:	4651      	mov	r1, sl
 8004556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455a:	4651      	mov	r1, sl
 800455c:	00ca      	lsls	r2, r1, #3
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4603      	mov	r3, r0
 8004564:	4642      	mov	r2, r8
 8004566:	189b      	adds	r3, r3, r2
 8004568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800456c:	464b      	mov	r3, r9
 800456e:	460a      	mov	r2, r1
 8004570:	eb42 0303 	adc.w	r3, r2, r3
 8004574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004582:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004590:	4649      	mov	r1, r9
 8004592:	008b      	lsls	r3, r1, #2
 8004594:	4641      	mov	r1, r8
 8004596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459a:	4641      	mov	r1, r8
 800459c:	008a      	lsls	r2, r1, #2
 800459e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045a2:	f7fc fa63 	bl	8000a6c <__aeabi_uldivmod>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	4b38      	ldr	r3, [pc, #224]	@ (8004690 <UART_SetConfig+0x4e4>)
 80045ae:	fba3 2301 	umull	r2, r3, r3, r1
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2264      	movs	r2, #100	@ 0x64
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	1acb      	subs	r3, r1, r3
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	3332      	adds	r3, #50	@ 0x32
 80045c0:	4a33      	ldr	r2, [pc, #204]	@ (8004690 <UART_SetConfig+0x4e4>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045cc:	441c      	add	r4, r3
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80045d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80045d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045dc:	4642      	mov	r2, r8
 80045de:	464b      	mov	r3, r9
 80045e0:	1891      	adds	r1, r2, r2
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	415b      	adcs	r3, r3
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ec:	4641      	mov	r1, r8
 80045ee:	1851      	adds	r1, r2, r1
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	4649      	mov	r1, r9
 80045f4:	414b      	adcs	r3, r1
 80045f6:	607b      	str	r3, [r7, #4]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004604:	4659      	mov	r1, fp
 8004606:	00cb      	lsls	r3, r1, #3
 8004608:	4651      	mov	r1, sl
 800460a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800460e:	4651      	mov	r1, sl
 8004610:	00ca      	lsls	r2, r1, #3
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	4603      	mov	r3, r0
 8004618:	4642      	mov	r2, r8
 800461a:	189b      	adds	r3, r3, r2
 800461c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800461e:	464b      	mov	r3, r9
 8004620:	460a      	mov	r2, r1
 8004622:	eb42 0303 	adc.w	r3, r2, r3
 8004626:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	663b      	str	r3, [r7, #96]	@ 0x60
 8004632:	667a      	str	r2, [r7, #100]	@ 0x64
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004640:	4649      	mov	r1, r9
 8004642:	008b      	lsls	r3, r1, #2
 8004644:	4641      	mov	r1, r8
 8004646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464a:	4641      	mov	r1, r8
 800464c:	008a      	lsls	r2, r1, #2
 800464e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004652:	f7fc fa0b 	bl	8000a6c <__aeabi_uldivmod>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <UART_SetConfig+0x4e4>)
 800465c:	fba3 1302 	umull	r1, r3, r3, r2
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	2164      	movs	r1, #100	@ 0x64
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	3332      	adds	r3, #50	@ 0x32
 800466e:	4a08      	ldr	r2, [pc, #32]	@ (8004690 <UART_SetConfig+0x4e4>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	f003 020f 	and.w	r2, r3, #15
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4422      	add	r2, r4
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800468a:	46bd      	mov	sp, r7
 800468c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004690:	51eb851f 	.word	0x51eb851f

08004694 <siprintf>:
 8004694:	b40e      	push	{r1, r2, r3}
 8004696:	b500      	push	{lr}
 8004698:	b09c      	sub	sp, #112	@ 0x70
 800469a:	ab1d      	add	r3, sp, #116	@ 0x74
 800469c:	9002      	str	r0, [sp, #8]
 800469e:	9006      	str	r0, [sp, #24]
 80046a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046a4:	4809      	ldr	r0, [pc, #36]	@ (80046cc <siprintf+0x38>)
 80046a6:	9107      	str	r1, [sp, #28]
 80046a8:	9104      	str	r1, [sp, #16]
 80046aa:	4909      	ldr	r1, [pc, #36]	@ (80046d0 <siprintf+0x3c>)
 80046ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b0:	9105      	str	r1, [sp, #20]
 80046b2:	6800      	ldr	r0, [r0, #0]
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	a902      	add	r1, sp, #8
 80046b8:	f000 f970 	bl	800499c <_svfiprintf_r>
 80046bc:	9b02      	ldr	r3, [sp, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	b01c      	add	sp, #112	@ 0x70
 80046c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046c8:	b003      	add	sp, #12
 80046ca:	4770      	bx	lr
 80046cc:	20000048 	.word	0x20000048
 80046d0:	ffff0208 	.word	0xffff0208

080046d4 <std>:
 80046d4:	2300      	movs	r3, #0
 80046d6:	b510      	push	{r4, lr}
 80046d8:	4604      	mov	r4, r0
 80046da:	e9c0 3300 	strd	r3, r3, [r0]
 80046de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046e2:	6083      	str	r3, [r0, #8]
 80046e4:	8181      	strh	r1, [r0, #12]
 80046e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80046e8:	81c2      	strh	r2, [r0, #14]
 80046ea:	6183      	str	r3, [r0, #24]
 80046ec:	4619      	mov	r1, r3
 80046ee:	2208      	movs	r2, #8
 80046f0:	305c      	adds	r0, #92	@ 0x5c
 80046f2:	f000 f8c3 	bl	800487c <memset>
 80046f6:	4b0d      	ldr	r3, [pc, #52]	@ (800472c <std+0x58>)
 80046f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80046fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004730 <std+0x5c>)
 80046fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004734 <std+0x60>)
 8004700:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <std+0x64>)
 8004704:	6323      	str	r3, [r4, #48]	@ 0x30
 8004706:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <std+0x68>)
 8004708:	6224      	str	r4, [r4, #32]
 800470a:	429c      	cmp	r4, r3
 800470c:	d006      	beq.n	800471c <std+0x48>
 800470e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004712:	4294      	cmp	r4, r2
 8004714:	d002      	beq.n	800471c <std+0x48>
 8004716:	33d0      	adds	r3, #208	@ 0xd0
 8004718:	429c      	cmp	r4, r3
 800471a:	d105      	bne.n	8004728 <std+0x54>
 800471c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004724:	f000 b8dc 	b.w	80048e0 <__retarget_lock_init_recursive>
 8004728:	bd10      	pop	{r4, pc}
 800472a:	bf00      	nop
 800472c:	080053e9 	.word	0x080053e9
 8004730:	0800540b 	.word	0x0800540b
 8004734:	08005443 	.word	0x08005443
 8004738:	08005467 	.word	0x08005467
 800473c:	20000308 	.word	0x20000308

08004740 <stdio_exit_handler>:
 8004740:	4a02      	ldr	r2, [pc, #8]	@ (800474c <stdio_exit_handler+0xc>)
 8004742:	4903      	ldr	r1, [pc, #12]	@ (8004750 <stdio_exit_handler+0x10>)
 8004744:	4803      	ldr	r0, [pc, #12]	@ (8004754 <stdio_exit_handler+0x14>)
 8004746:	f000 b869 	b.w	800481c <_fwalk_sglue>
 800474a:	bf00      	nop
 800474c:	2000003c 	.word	0x2000003c
 8004750:	08005381 	.word	0x08005381
 8004754:	2000004c 	.word	0x2000004c

08004758 <cleanup_stdio>:
 8004758:	6841      	ldr	r1, [r0, #4]
 800475a:	4b0c      	ldr	r3, [pc, #48]	@ (800478c <cleanup_stdio+0x34>)
 800475c:	4299      	cmp	r1, r3
 800475e:	b510      	push	{r4, lr}
 8004760:	4604      	mov	r4, r0
 8004762:	d001      	beq.n	8004768 <cleanup_stdio+0x10>
 8004764:	f000 fe0c 	bl	8005380 <_fflush_r>
 8004768:	68a1      	ldr	r1, [r4, #8]
 800476a:	4b09      	ldr	r3, [pc, #36]	@ (8004790 <cleanup_stdio+0x38>)
 800476c:	4299      	cmp	r1, r3
 800476e:	d002      	beq.n	8004776 <cleanup_stdio+0x1e>
 8004770:	4620      	mov	r0, r4
 8004772:	f000 fe05 	bl	8005380 <_fflush_r>
 8004776:	68e1      	ldr	r1, [r4, #12]
 8004778:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <cleanup_stdio+0x3c>)
 800477a:	4299      	cmp	r1, r3
 800477c:	d004      	beq.n	8004788 <cleanup_stdio+0x30>
 800477e:	4620      	mov	r0, r4
 8004780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004784:	f000 bdfc 	b.w	8005380 <_fflush_r>
 8004788:	bd10      	pop	{r4, pc}
 800478a:	bf00      	nop
 800478c:	20000308 	.word	0x20000308
 8004790:	20000370 	.word	0x20000370
 8004794:	200003d8 	.word	0x200003d8

08004798 <global_stdio_init.part.0>:
 8004798:	b510      	push	{r4, lr}
 800479a:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <global_stdio_init.part.0+0x30>)
 800479c:	4c0b      	ldr	r4, [pc, #44]	@ (80047cc <global_stdio_init.part.0+0x34>)
 800479e:	4a0c      	ldr	r2, [pc, #48]	@ (80047d0 <global_stdio_init.part.0+0x38>)
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	4620      	mov	r0, r4
 80047a4:	2200      	movs	r2, #0
 80047a6:	2104      	movs	r1, #4
 80047a8:	f7ff ff94 	bl	80046d4 <std>
 80047ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047b0:	2201      	movs	r2, #1
 80047b2:	2109      	movs	r1, #9
 80047b4:	f7ff ff8e 	bl	80046d4 <std>
 80047b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047bc:	2202      	movs	r2, #2
 80047be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c2:	2112      	movs	r1, #18
 80047c4:	f7ff bf86 	b.w	80046d4 <std>
 80047c8:	20000440 	.word	0x20000440
 80047cc:	20000308 	.word	0x20000308
 80047d0:	08004741 	.word	0x08004741

080047d4 <__sfp_lock_acquire>:
 80047d4:	4801      	ldr	r0, [pc, #4]	@ (80047dc <__sfp_lock_acquire+0x8>)
 80047d6:	f000 b884 	b.w	80048e2 <__retarget_lock_acquire_recursive>
 80047da:	bf00      	nop
 80047dc:	20000445 	.word	0x20000445

080047e0 <__sfp_lock_release>:
 80047e0:	4801      	ldr	r0, [pc, #4]	@ (80047e8 <__sfp_lock_release+0x8>)
 80047e2:	f000 b87f 	b.w	80048e4 <__retarget_lock_release_recursive>
 80047e6:	bf00      	nop
 80047e8:	20000445 	.word	0x20000445

080047ec <__sinit>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4604      	mov	r4, r0
 80047f0:	f7ff fff0 	bl	80047d4 <__sfp_lock_acquire>
 80047f4:	6a23      	ldr	r3, [r4, #32]
 80047f6:	b11b      	cbz	r3, 8004800 <__sinit+0x14>
 80047f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047fc:	f7ff bff0 	b.w	80047e0 <__sfp_lock_release>
 8004800:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <__sinit+0x28>)
 8004802:	6223      	str	r3, [r4, #32]
 8004804:	4b04      	ldr	r3, [pc, #16]	@ (8004818 <__sinit+0x2c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f5      	bne.n	80047f8 <__sinit+0xc>
 800480c:	f7ff ffc4 	bl	8004798 <global_stdio_init.part.0>
 8004810:	e7f2      	b.n	80047f8 <__sinit+0xc>
 8004812:	bf00      	nop
 8004814:	08004759 	.word	0x08004759
 8004818:	20000440 	.word	0x20000440

0800481c <_fwalk_sglue>:
 800481c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004820:	4607      	mov	r7, r0
 8004822:	4688      	mov	r8, r1
 8004824:	4614      	mov	r4, r2
 8004826:	2600      	movs	r6, #0
 8004828:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800482c:	f1b9 0901 	subs.w	r9, r9, #1
 8004830:	d505      	bpl.n	800483e <_fwalk_sglue+0x22>
 8004832:	6824      	ldr	r4, [r4, #0]
 8004834:	2c00      	cmp	r4, #0
 8004836:	d1f7      	bne.n	8004828 <_fwalk_sglue+0xc>
 8004838:	4630      	mov	r0, r6
 800483a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800483e:	89ab      	ldrh	r3, [r5, #12]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d907      	bls.n	8004854 <_fwalk_sglue+0x38>
 8004844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004848:	3301      	adds	r3, #1
 800484a:	d003      	beq.n	8004854 <_fwalk_sglue+0x38>
 800484c:	4629      	mov	r1, r5
 800484e:	4638      	mov	r0, r7
 8004850:	47c0      	blx	r8
 8004852:	4306      	orrs	r6, r0
 8004854:	3568      	adds	r5, #104	@ 0x68
 8004856:	e7e9      	b.n	800482c <_fwalk_sglue+0x10>

08004858 <iprintf>:
 8004858:	b40f      	push	{r0, r1, r2, r3}
 800485a:	b507      	push	{r0, r1, r2, lr}
 800485c:	4906      	ldr	r1, [pc, #24]	@ (8004878 <iprintf+0x20>)
 800485e:	ab04      	add	r3, sp, #16
 8004860:	6808      	ldr	r0, [r1, #0]
 8004862:	f853 2b04 	ldr.w	r2, [r3], #4
 8004866:	6881      	ldr	r1, [r0, #8]
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	f000 f9bd 	bl	8004be8 <_vfiprintf_r>
 800486e:	b003      	add	sp, #12
 8004870:	f85d eb04 	ldr.w	lr, [sp], #4
 8004874:	b004      	add	sp, #16
 8004876:	4770      	bx	lr
 8004878:	20000048 	.word	0x20000048

0800487c <memset>:
 800487c:	4402      	add	r2, r0
 800487e:	4603      	mov	r3, r0
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <memset+0xa>
 8004884:	4770      	bx	lr
 8004886:	f803 1b01 	strb.w	r1, [r3], #1
 800488a:	e7f9      	b.n	8004880 <memset+0x4>

0800488c <__errno>:
 800488c:	4b01      	ldr	r3, [pc, #4]	@ (8004894 <__errno+0x8>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000048 	.word	0x20000048

08004898 <__libc_init_array>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4d0d      	ldr	r5, [pc, #52]	@ (80048d0 <__libc_init_array+0x38>)
 800489c:	4c0d      	ldr	r4, [pc, #52]	@ (80048d4 <__libc_init_array+0x3c>)
 800489e:	1b64      	subs	r4, r4, r5
 80048a0:	10a4      	asrs	r4, r4, #2
 80048a2:	2600      	movs	r6, #0
 80048a4:	42a6      	cmp	r6, r4
 80048a6:	d109      	bne.n	80048bc <__libc_init_array+0x24>
 80048a8:	4d0b      	ldr	r5, [pc, #44]	@ (80048d8 <__libc_init_array+0x40>)
 80048aa:	4c0c      	ldr	r4, [pc, #48]	@ (80048dc <__libc_init_array+0x44>)
 80048ac:	f000 fff6 	bl	800589c <_init>
 80048b0:	1b64      	subs	r4, r4, r5
 80048b2:	10a4      	asrs	r4, r4, #2
 80048b4:	2600      	movs	r6, #0
 80048b6:	42a6      	cmp	r6, r4
 80048b8:	d105      	bne.n	80048c6 <__libc_init_array+0x2e>
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c0:	4798      	blx	r3
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7ee      	b.n	80048a4 <__libc_init_array+0xc>
 80048c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ca:	4798      	blx	r3
 80048cc:	3601      	adds	r6, #1
 80048ce:	e7f2      	b.n	80048b6 <__libc_init_array+0x1e>
 80048d0:	0800591c 	.word	0x0800591c
 80048d4:	0800591c 	.word	0x0800591c
 80048d8:	0800591c 	.word	0x0800591c
 80048dc:	08005920 	.word	0x08005920

080048e0 <__retarget_lock_init_recursive>:
 80048e0:	4770      	bx	lr

080048e2 <__retarget_lock_acquire_recursive>:
 80048e2:	4770      	bx	lr

080048e4 <__retarget_lock_release_recursive>:
 80048e4:	4770      	bx	lr

080048e6 <__ssputs_r>:
 80048e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ea:	688e      	ldr	r6, [r1, #8]
 80048ec:	461f      	mov	r7, r3
 80048ee:	42be      	cmp	r6, r7
 80048f0:	680b      	ldr	r3, [r1, #0]
 80048f2:	4682      	mov	sl, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	4690      	mov	r8, r2
 80048f8:	d82d      	bhi.n	8004956 <__ssputs_r+0x70>
 80048fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048fe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004902:	d026      	beq.n	8004952 <__ssputs_r+0x6c>
 8004904:	6965      	ldr	r5, [r4, #20]
 8004906:	6909      	ldr	r1, [r1, #16]
 8004908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800490c:	eba3 0901 	sub.w	r9, r3, r1
 8004910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004914:	1c7b      	adds	r3, r7, #1
 8004916:	444b      	add	r3, r9
 8004918:	106d      	asrs	r5, r5, #1
 800491a:	429d      	cmp	r5, r3
 800491c:	bf38      	it	cc
 800491e:	461d      	movcc	r5, r3
 8004920:	0553      	lsls	r3, r2, #21
 8004922:	d527      	bpl.n	8004974 <__ssputs_r+0x8e>
 8004924:	4629      	mov	r1, r5
 8004926:	f000 fa99 	bl	8004e5c <_malloc_r>
 800492a:	4606      	mov	r6, r0
 800492c:	b360      	cbz	r0, 8004988 <__ssputs_r+0xa2>
 800492e:	6921      	ldr	r1, [r4, #16]
 8004930:	464a      	mov	r2, r9
 8004932:	f000 ff53 	bl	80057dc <memcpy>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800493c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	6126      	str	r6, [r4, #16]
 8004944:	6165      	str	r5, [r4, #20]
 8004946:	444e      	add	r6, r9
 8004948:	eba5 0509 	sub.w	r5, r5, r9
 800494c:	6026      	str	r6, [r4, #0]
 800494e:	60a5      	str	r5, [r4, #8]
 8004950:	463e      	mov	r6, r7
 8004952:	42be      	cmp	r6, r7
 8004954:	d900      	bls.n	8004958 <__ssputs_r+0x72>
 8004956:	463e      	mov	r6, r7
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	4632      	mov	r2, r6
 800495c:	4641      	mov	r1, r8
 800495e:	f000 feab 	bl	80056b8 <memmove>
 8004962:	68a3      	ldr	r3, [r4, #8]
 8004964:	1b9b      	subs	r3, r3, r6
 8004966:	60a3      	str	r3, [r4, #8]
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	4433      	add	r3, r6
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	2000      	movs	r0, #0
 8004970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004974:	462a      	mov	r2, r5
 8004976:	f000 fd7a 	bl	800546e <_realloc_r>
 800497a:	4606      	mov	r6, r0
 800497c:	2800      	cmp	r0, #0
 800497e:	d1e0      	bne.n	8004942 <__ssputs_r+0x5c>
 8004980:	6921      	ldr	r1, [r4, #16]
 8004982:	4650      	mov	r0, sl
 8004984:	f000 ff38 	bl	80057f8 <_free_r>
 8004988:	230c      	movs	r3, #12
 800498a:	f8ca 3000 	str.w	r3, [sl]
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004994:	81a3      	strh	r3, [r4, #12]
 8004996:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800499a:	e7e9      	b.n	8004970 <__ssputs_r+0x8a>

0800499c <_svfiprintf_r>:
 800499c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a0:	4698      	mov	r8, r3
 80049a2:	898b      	ldrh	r3, [r1, #12]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	b09d      	sub	sp, #116	@ 0x74
 80049a8:	4607      	mov	r7, r0
 80049aa:	460d      	mov	r5, r1
 80049ac:	4614      	mov	r4, r2
 80049ae:	d510      	bpl.n	80049d2 <_svfiprintf_r+0x36>
 80049b0:	690b      	ldr	r3, [r1, #16]
 80049b2:	b973      	cbnz	r3, 80049d2 <_svfiprintf_r+0x36>
 80049b4:	2140      	movs	r1, #64	@ 0x40
 80049b6:	f000 fa51 	bl	8004e5c <_malloc_r>
 80049ba:	6028      	str	r0, [r5, #0]
 80049bc:	6128      	str	r0, [r5, #16]
 80049be:	b930      	cbnz	r0, 80049ce <_svfiprintf_r+0x32>
 80049c0:	230c      	movs	r3, #12
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049c8:	b01d      	add	sp, #116	@ 0x74
 80049ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ce:	2340      	movs	r3, #64	@ 0x40
 80049d0:	616b      	str	r3, [r5, #20]
 80049d2:	2300      	movs	r3, #0
 80049d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d6:	2320      	movs	r3, #32
 80049d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80049e0:	2330      	movs	r3, #48	@ 0x30
 80049e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b80 <_svfiprintf_r+0x1e4>
 80049e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049ea:	f04f 0901 	mov.w	r9, #1
 80049ee:	4623      	mov	r3, r4
 80049f0:	469a      	mov	sl, r3
 80049f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f6:	b10a      	cbz	r2, 80049fc <_svfiprintf_r+0x60>
 80049f8:	2a25      	cmp	r2, #37	@ 0x25
 80049fa:	d1f9      	bne.n	80049f0 <_svfiprintf_r+0x54>
 80049fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004a00:	d00b      	beq.n	8004a1a <_svfiprintf_r+0x7e>
 8004a02:	465b      	mov	r3, fp
 8004a04:	4622      	mov	r2, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	4638      	mov	r0, r7
 8004a0a:	f7ff ff6c 	bl	80048e6 <__ssputs_r>
 8004a0e:	3001      	adds	r0, #1
 8004a10:	f000 80a7 	beq.w	8004b62 <_svfiprintf_r+0x1c6>
 8004a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a16:	445a      	add	r2, fp
 8004a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 809f 	beq.w	8004b62 <_svfiprintf_r+0x1c6>
 8004a24:	2300      	movs	r3, #0
 8004a26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a2e:	f10a 0a01 	add.w	sl, sl, #1
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	9307      	str	r3, [sp, #28]
 8004a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a3c:	4654      	mov	r4, sl
 8004a3e:	2205      	movs	r2, #5
 8004a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a44:	484e      	ldr	r0, [pc, #312]	@ (8004b80 <_svfiprintf_r+0x1e4>)
 8004a46:	f7fb fbcb 	bl	80001e0 <memchr>
 8004a4a:	9a04      	ldr	r2, [sp, #16]
 8004a4c:	b9d8      	cbnz	r0, 8004a86 <_svfiprintf_r+0xea>
 8004a4e:	06d0      	lsls	r0, r2, #27
 8004a50:	bf44      	itt	mi
 8004a52:	2320      	movmi	r3, #32
 8004a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a58:	0711      	lsls	r1, r2, #28
 8004a5a:	bf44      	itt	mi
 8004a5c:	232b      	movmi	r3, #43	@ 0x2b
 8004a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a62:	f89a 3000 	ldrb.w	r3, [sl]
 8004a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a68:	d015      	beq.n	8004a96 <_svfiprintf_r+0xfa>
 8004a6a:	9a07      	ldr	r2, [sp, #28]
 8004a6c:	4654      	mov	r4, sl
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f04f 0c0a 	mov.w	ip, #10
 8004a74:	4621      	mov	r1, r4
 8004a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a7a:	3b30      	subs	r3, #48	@ 0x30
 8004a7c:	2b09      	cmp	r3, #9
 8004a7e:	d94b      	bls.n	8004b18 <_svfiprintf_r+0x17c>
 8004a80:	b1b0      	cbz	r0, 8004ab0 <_svfiprintf_r+0x114>
 8004a82:	9207      	str	r2, [sp, #28]
 8004a84:	e014      	b.n	8004ab0 <_svfiprintf_r+0x114>
 8004a86:	eba0 0308 	sub.w	r3, r0, r8
 8004a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	46a2      	mov	sl, r4
 8004a94:	e7d2      	b.n	8004a3c <_svfiprintf_r+0xa0>
 8004a96:	9b03      	ldr	r3, [sp, #12]
 8004a98:	1d19      	adds	r1, r3, #4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	9103      	str	r1, [sp, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bfbb      	ittet	lt
 8004aa2:	425b      	neglt	r3, r3
 8004aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa8:	9307      	strge	r3, [sp, #28]
 8004aaa:	9307      	strlt	r3, [sp, #28]
 8004aac:	bfb8      	it	lt
 8004aae:	9204      	strlt	r2, [sp, #16]
 8004ab0:	7823      	ldrb	r3, [r4, #0]
 8004ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ab4:	d10a      	bne.n	8004acc <_svfiprintf_r+0x130>
 8004ab6:	7863      	ldrb	r3, [r4, #1]
 8004ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aba:	d132      	bne.n	8004b22 <_svfiprintf_r+0x186>
 8004abc:	9b03      	ldr	r3, [sp, #12]
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	9203      	str	r2, [sp, #12]
 8004ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ac8:	3402      	adds	r4, #2
 8004aca:	9305      	str	r3, [sp, #20]
 8004acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b90 <_svfiprintf_r+0x1f4>
 8004ad0:	7821      	ldrb	r1, [r4, #0]
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	4650      	mov	r0, sl
 8004ad6:	f7fb fb83 	bl	80001e0 <memchr>
 8004ada:	b138      	cbz	r0, 8004aec <_svfiprintf_r+0x150>
 8004adc:	9b04      	ldr	r3, [sp, #16]
 8004ade:	eba0 000a 	sub.w	r0, r0, sl
 8004ae2:	2240      	movs	r2, #64	@ 0x40
 8004ae4:	4082      	lsls	r2, r0
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	3401      	adds	r4, #1
 8004aea:	9304      	str	r3, [sp, #16]
 8004aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af0:	4824      	ldr	r0, [pc, #144]	@ (8004b84 <_svfiprintf_r+0x1e8>)
 8004af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004af6:	2206      	movs	r2, #6
 8004af8:	f7fb fb72 	bl	80001e0 <memchr>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d036      	beq.n	8004b6e <_svfiprintf_r+0x1d2>
 8004b00:	4b21      	ldr	r3, [pc, #132]	@ (8004b88 <_svfiprintf_r+0x1ec>)
 8004b02:	bb1b      	cbnz	r3, 8004b4c <_svfiprintf_r+0x1b0>
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	3307      	adds	r3, #7
 8004b08:	f023 0307 	bic.w	r3, r3, #7
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	9303      	str	r3, [sp, #12]
 8004b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b12:	4433      	add	r3, r6
 8004b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b16:	e76a      	b.n	80049ee <_svfiprintf_r+0x52>
 8004b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	2001      	movs	r0, #1
 8004b20:	e7a8      	b.n	8004a74 <_svfiprintf_r+0xd8>
 8004b22:	2300      	movs	r3, #0
 8004b24:	3401      	adds	r4, #1
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0c0a 	mov.w	ip, #10
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b34:	3a30      	subs	r2, #48	@ 0x30
 8004b36:	2a09      	cmp	r2, #9
 8004b38:	d903      	bls.n	8004b42 <_svfiprintf_r+0x1a6>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0c6      	beq.n	8004acc <_svfiprintf_r+0x130>
 8004b3e:	9105      	str	r1, [sp, #20]
 8004b40:	e7c4      	b.n	8004acc <_svfiprintf_r+0x130>
 8004b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b46:	4604      	mov	r4, r0
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e7f0      	b.n	8004b2e <_svfiprintf_r+0x192>
 8004b4c:	ab03      	add	r3, sp, #12
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	462a      	mov	r2, r5
 8004b52:	4b0e      	ldr	r3, [pc, #56]	@ (8004b8c <_svfiprintf_r+0x1f0>)
 8004b54:	a904      	add	r1, sp, #16
 8004b56:	4638      	mov	r0, r7
 8004b58:	f3af 8000 	nop.w
 8004b5c:	1c42      	adds	r2, r0, #1
 8004b5e:	4606      	mov	r6, r0
 8004b60:	d1d6      	bne.n	8004b10 <_svfiprintf_r+0x174>
 8004b62:	89ab      	ldrh	r3, [r5, #12]
 8004b64:	065b      	lsls	r3, r3, #25
 8004b66:	f53f af2d 	bmi.w	80049c4 <_svfiprintf_r+0x28>
 8004b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b6c:	e72c      	b.n	80049c8 <_svfiprintf_r+0x2c>
 8004b6e:	ab03      	add	r3, sp, #12
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	462a      	mov	r2, r5
 8004b74:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <_svfiprintf_r+0x1f0>)
 8004b76:	a904      	add	r1, sp, #16
 8004b78:	4638      	mov	r0, r7
 8004b7a:	f000 fa5d 	bl	8005038 <_printf_i>
 8004b7e:	e7ed      	b.n	8004b5c <_svfiprintf_r+0x1c0>
 8004b80:	080058e0 	.word	0x080058e0
 8004b84:	080058ea 	.word	0x080058ea
 8004b88:	00000000 	.word	0x00000000
 8004b8c:	080048e7 	.word	0x080048e7
 8004b90:	080058e6 	.word	0x080058e6

08004b94 <__sfputc_r>:
 8004b94:	6893      	ldr	r3, [r2, #8]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	b410      	push	{r4}
 8004b9c:	6093      	str	r3, [r2, #8]
 8004b9e:	da08      	bge.n	8004bb2 <__sfputc_r+0x1e>
 8004ba0:	6994      	ldr	r4, [r2, #24]
 8004ba2:	42a3      	cmp	r3, r4
 8004ba4:	db01      	blt.n	8004baa <__sfputc_r+0x16>
 8004ba6:	290a      	cmp	r1, #10
 8004ba8:	d103      	bne.n	8004bb2 <__sfputc_r+0x1e>
 8004baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bae:	f000 bc8c 	b.w	80054ca <__swbuf_r>
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	1c58      	adds	r0, r3, #1
 8004bb6:	6010      	str	r0, [r2, #0]
 8004bb8:	7019      	strb	r1, [r3, #0]
 8004bba:	4608      	mov	r0, r1
 8004bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <__sfputs_r>:
 8004bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	460f      	mov	r7, r1
 8004bc8:	4614      	mov	r4, r2
 8004bca:	18d5      	adds	r5, r2, r3
 8004bcc:	42ac      	cmp	r4, r5
 8004bce:	d101      	bne.n	8004bd4 <__sfputs_r+0x12>
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	e007      	b.n	8004be4 <__sfputs_r+0x22>
 8004bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd8:	463a      	mov	r2, r7
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f7ff ffda 	bl	8004b94 <__sfputc_r>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d1f3      	bne.n	8004bcc <__sfputs_r+0xa>
 8004be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004be8 <_vfiprintf_r>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	460d      	mov	r5, r1
 8004bee:	b09d      	sub	sp, #116	@ 0x74
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	4698      	mov	r8, r3
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	b118      	cbz	r0, 8004c00 <_vfiprintf_r+0x18>
 8004bf8:	6a03      	ldr	r3, [r0, #32]
 8004bfa:	b90b      	cbnz	r3, 8004c00 <_vfiprintf_r+0x18>
 8004bfc:	f7ff fdf6 	bl	80047ec <__sinit>
 8004c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c02:	07d9      	lsls	r1, r3, #31
 8004c04:	d405      	bmi.n	8004c12 <_vfiprintf_r+0x2a>
 8004c06:	89ab      	ldrh	r3, [r5, #12]
 8004c08:	059a      	lsls	r2, r3, #22
 8004c0a:	d402      	bmi.n	8004c12 <_vfiprintf_r+0x2a>
 8004c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c0e:	f7ff fe68 	bl	80048e2 <__retarget_lock_acquire_recursive>
 8004c12:	89ab      	ldrh	r3, [r5, #12]
 8004c14:	071b      	lsls	r3, r3, #28
 8004c16:	d501      	bpl.n	8004c1c <_vfiprintf_r+0x34>
 8004c18:	692b      	ldr	r3, [r5, #16]
 8004c1a:	b99b      	cbnz	r3, 8004c44 <_vfiprintf_r+0x5c>
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f000 fc92 	bl	8005548 <__swsetup_r>
 8004c24:	b170      	cbz	r0, 8004c44 <_vfiprintf_r+0x5c>
 8004c26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c28:	07dc      	lsls	r4, r3, #31
 8004c2a:	d504      	bpl.n	8004c36 <_vfiprintf_r+0x4e>
 8004c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c30:	b01d      	add	sp, #116	@ 0x74
 8004c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	0598      	lsls	r0, r3, #22
 8004c3a:	d4f7      	bmi.n	8004c2c <_vfiprintf_r+0x44>
 8004c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c3e:	f7ff fe51 	bl	80048e4 <__retarget_lock_release_recursive>
 8004c42:	e7f3      	b.n	8004c2c <_vfiprintf_r+0x44>
 8004c44:	2300      	movs	r3, #0
 8004c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c48:	2320      	movs	r3, #32
 8004c4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c52:	2330      	movs	r3, #48	@ 0x30
 8004c54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e04 <_vfiprintf_r+0x21c>
 8004c58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c5c:	f04f 0901 	mov.w	r9, #1
 8004c60:	4623      	mov	r3, r4
 8004c62:	469a      	mov	sl, r3
 8004c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c68:	b10a      	cbz	r2, 8004c6e <_vfiprintf_r+0x86>
 8004c6a:	2a25      	cmp	r2, #37	@ 0x25
 8004c6c:	d1f9      	bne.n	8004c62 <_vfiprintf_r+0x7a>
 8004c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c72:	d00b      	beq.n	8004c8c <_vfiprintf_r+0xa4>
 8004c74:	465b      	mov	r3, fp
 8004c76:	4622      	mov	r2, r4
 8004c78:	4629      	mov	r1, r5
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f7ff ffa1 	bl	8004bc2 <__sfputs_r>
 8004c80:	3001      	adds	r0, #1
 8004c82:	f000 80a7 	beq.w	8004dd4 <_vfiprintf_r+0x1ec>
 8004c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c88:	445a      	add	r2, fp
 8004c8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 809f 	beq.w	8004dd4 <_vfiprintf_r+0x1ec>
 8004c96:	2300      	movs	r3, #0
 8004c98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ca0:	f10a 0a01 	add.w	sl, sl, #1
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	9307      	str	r3, [sp, #28]
 8004ca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cac:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cae:	4654      	mov	r4, sl
 8004cb0:	2205      	movs	r2, #5
 8004cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb6:	4853      	ldr	r0, [pc, #332]	@ (8004e04 <_vfiprintf_r+0x21c>)
 8004cb8:	f7fb fa92 	bl	80001e0 <memchr>
 8004cbc:	9a04      	ldr	r2, [sp, #16]
 8004cbe:	b9d8      	cbnz	r0, 8004cf8 <_vfiprintf_r+0x110>
 8004cc0:	06d1      	lsls	r1, r2, #27
 8004cc2:	bf44      	itt	mi
 8004cc4:	2320      	movmi	r3, #32
 8004cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cca:	0713      	lsls	r3, r2, #28
 8004ccc:	bf44      	itt	mi
 8004cce:	232b      	movmi	r3, #43	@ 0x2b
 8004cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cda:	d015      	beq.n	8004d08 <_vfiprintf_r+0x120>
 8004cdc:	9a07      	ldr	r2, [sp, #28]
 8004cde:	4654      	mov	r4, sl
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f04f 0c0a 	mov.w	ip, #10
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cec:	3b30      	subs	r3, #48	@ 0x30
 8004cee:	2b09      	cmp	r3, #9
 8004cf0:	d94b      	bls.n	8004d8a <_vfiprintf_r+0x1a2>
 8004cf2:	b1b0      	cbz	r0, 8004d22 <_vfiprintf_r+0x13a>
 8004cf4:	9207      	str	r2, [sp, #28]
 8004cf6:	e014      	b.n	8004d22 <_vfiprintf_r+0x13a>
 8004cf8:	eba0 0308 	sub.w	r3, r0, r8
 8004cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8004d00:	4313      	orrs	r3, r2
 8004d02:	9304      	str	r3, [sp, #16]
 8004d04:	46a2      	mov	sl, r4
 8004d06:	e7d2      	b.n	8004cae <_vfiprintf_r+0xc6>
 8004d08:	9b03      	ldr	r3, [sp, #12]
 8004d0a:	1d19      	adds	r1, r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	9103      	str	r1, [sp, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bfbb      	ittet	lt
 8004d14:	425b      	neglt	r3, r3
 8004d16:	f042 0202 	orrlt.w	r2, r2, #2
 8004d1a:	9307      	strge	r3, [sp, #28]
 8004d1c:	9307      	strlt	r3, [sp, #28]
 8004d1e:	bfb8      	it	lt
 8004d20:	9204      	strlt	r2, [sp, #16]
 8004d22:	7823      	ldrb	r3, [r4, #0]
 8004d24:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d26:	d10a      	bne.n	8004d3e <_vfiprintf_r+0x156>
 8004d28:	7863      	ldrb	r3, [r4, #1]
 8004d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d2c:	d132      	bne.n	8004d94 <_vfiprintf_r+0x1ac>
 8004d2e:	9b03      	ldr	r3, [sp, #12]
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	9203      	str	r2, [sp, #12]
 8004d36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d3a:	3402      	adds	r4, #2
 8004d3c:	9305      	str	r3, [sp, #20]
 8004d3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e14 <_vfiprintf_r+0x22c>
 8004d42:	7821      	ldrb	r1, [r4, #0]
 8004d44:	2203      	movs	r2, #3
 8004d46:	4650      	mov	r0, sl
 8004d48:	f7fb fa4a 	bl	80001e0 <memchr>
 8004d4c:	b138      	cbz	r0, 8004d5e <_vfiprintf_r+0x176>
 8004d4e:	9b04      	ldr	r3, [sp, #16]
 8004d50:	eba0 000a 	sub.w	r0, r0, sl
 8004d54:	2240      	movs	r2, #64	@ 0x40
 8004d56:	4082      	lsls	r2, r0
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	3401      	adds	r4, #1
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d62:	4829      	ldr	r0, [pc, #164]	@ (8004e08 <_vfiprintf_r+0x220>)
 8004d64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d68:	2206      	movs	r2, #6
 8004d6a:	f7fb fa39 	bl	80001e0 <memchr>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d03f      	beq.n	8004df2 <_vfiprintf_r+0x20a>
 8004d72:	4b26      	ldr	r3, [pc, #152]	@ (8004e0c <_vfiprintf_r+0x224>)
 8004d74:	bb1b      	cbnz	r3, 8004dbe <_vfiprintf_r+0x1d6>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	3307      	adds	r3, #7
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	3308      	adds	r3, #8
 8004d80:	9303      	str	r3, [sp, #12]
 8004d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d84:	443b      	add	r3, r7
 8004d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d88:	e76a      	b.n	8004c60 <_vfiprintf_r+0x78>
 8004d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d8e:	460c      	mov	r4, r1
 8004d90:	2001      	movs	r0, #1
 8004d92:	e7a8      	b.n	8004ce6 <_vfiprintf_r+0xfe>
 8004d94:	2300      	movs	r3, #0
 8004d96:	3401      	adds	r4, #1
 8004d98:	9305      	str	r3, [sp, #20]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f04f 0c0a 	mov.w	ip, #10
 8004da0:	4620      	mov	r0, r4
 8004da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004da6:	3a30      	subs	r2, #48	@ 0x30
 8004da8:	2a09      	cmp	r2, #9
 8004daa:	d903      	bls.n	8004db4 <_vfiprintf_r+0x1cc>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0c6      	beq.n	8004d3e <_vfiprintf_r+0x156>
 8004db0:	9105      	str	r1, [sp, #20]
 8004db2:	e7c4      	b.n	8004d3e <_vfiprintf_r+0x156>
 8004db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004db8:	4604      	mov	r4, r0
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e7f0      	b.n	8004da0 <_vfiprintf_r+0x1b8>
 8004dbe:	ab03      	add	r3, sp, #12
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	462a      	mov	r2, r5
 8004dc4:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <_vfiprintf_r+0x228>)
 8004dc6:	a904      	add	r1, sp, #16
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f3af 8000 	nop.w
 8004dce:	4607      	mov	r7, r0
 8004dd0:	1c78      	adds	r0, r7, #1
 8004dd2:	d1d6      	bne.n	8004d82 <_vfiprintf_r+0x19a>
 8004dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dd6:	07d9      	lsls	r1, r3, #31
 8004dd8:	d405      	bmi.n	8004de6 <_vfiprintf_r+0x1fe>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	059a      	lsls	r2, r3, #22
 8004dde:	d402      	bmi.n	8004de6 <_vfiprintf_r+0x1fe>
 8004de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004de2:	f7ff fd7f 	bl	80048e4 <__retarget_lock_release_recursive>
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	065b      	lsls	r3, r3, #25
 8004dea:	f53f af1f 	bmi.w	8004c2c <_vfiprintf_r+0x44>
 8004dee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004df0:	e71e      	b.n	8004c30 <_vfiprintf_r+0x48>
 8004df2:	ab03      	add	r3, sp, #12
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	462a      	mov	r2, r5
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <_vfiprintf_r+0x228>)
 8004dfa:	a904      	add	r1, sp, #16
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 f91b 	bl	8005038 <_printf_i>
 8004e02:	e7e4      	b.n	8004dce <_vfiprintf_r+0x1e6>
 8004e04:	080058e0 	.word	0x080058e0
 8004e08:	080058ea 	.word	0x080058ea
 8004e0c:	00000000 	.word	0x00000000
 8004e10:	08004bc3 	.word	0x08004bc3
 8004e14:	080058e6 	.word	0x080058e6

08004e18 <sbrk_aligned>:
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8004e58 <sbrk_aligned+0x40>)
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	6831      	ldr	r1, [r6, #0]
 8004e20:	4605      	mov	r5, r0
 8004e22:	b911      	cbnz	r1, 8004e2a <sbrk_aligned+0x12>
 8004e24:	f000 fcb8 	bl	8005798 <_sbrk_r>
 8004e28:	6030      	str	r0, [r6, #0]
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f000 fcb3 	bl	8005798 <_sbrk_r>
 8004e32:	1c43      	adds	r3, r0, #1
 8004e34:	d103      	bne.n	8004e3e <sbrk_aligned+0x26>
 8004e36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
 8004e3e:	1cc4      	adds	r4, r0, #3
 8004e40:	f024 0403 	bic.w	r4, r4, #3
 8004e44:	42a0      	cmp	r0, r4
 8004e46:	d0f8      	beq.n	8004e3a <sbrk_aligned+0x22>
 8004e48:	1a21      	subs	r1, r4, r0
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 fca4 	bl	8005798 <_sbrk_r>
 8004e50:	3001      	adds	r0, #1
 8004e52:	d1f2      	bne.n	8004e3a <sbrk_aligned+0x22>
 8004e54:	e7ef      	b.n	8004e36 <sbrk_aligned+0x1e>
 8004e56:	bf00      	nop
 8004e58:	20000448 	.word	0x20000448

08004e5c <_malloc_r>:
 8004e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e60:	1ccd      	adds	r5, r1, #3
 8004e62:	f025 0503 	bic.w	r5, r5, #3
 8004e66:	3508      	adds	r5, #8
 8004e68:	2d0c      	cmp	r5, #12
 8004e6a:	bf38      	it	cc
 8004e6c:	250c      	movcc	r5, #12
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	4606      	mov	r6, r0
 8004e72:	db01      	blt.n	8004e78 <_malloc_r+0x1c>
 8004e74:	42a9      	cmp	r1, r5
 8004e76:	d904      	bls.n	8004e82 <_malloc_r+0x26>
 8004e78:	230c      	movs	r3, #12
 8004e7a:	6033      	str	r3, [r6, #0]
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f58 <_malloc_r+0xfc>
 8004e86:	f000 faa3 	bl	80053d0 <__malloc_lock>
 8004e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e8e:	461c      	mov	r4, r3
 8004e90:	bb44      	cbnz	r4, 8004ee4 <_malloc_r+0x88>
 8004e92:	4629      	mov	r1, r5
 8004e94:	4630      	mov	r0, r6
 8004e96:	f7ff ffbf 	bl	8004e18 <sbrk_aligned>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	d158      	bne.n	8004f52 <_malloc_r+0xf6>
 8004ea0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ea4:	4627      	mov	r7, r4
 8004ea6:	2f00      	cmp	r7, #0
 8004ea8:	d143      	bne.n	8004f32 <_malloc_r+0xd6>
 8004eaa:	2c00      	cmp	r4, #0
 8004eac:	d04b      	beq.n	8004f46 <_malloc_r+0xea>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	eb04 0903 	add.w	r9, r4, r3
 8004eb8:	f000 fc6e 	bl	8005798 <_sbrk_r>
 8004ebc:	4581      	cmp	r9, r0
 8004ebe:	d142      	bne.n	8004f46 <_malloc_r+0xea>
 8004ec0:	6821      	ldr	r1, [r4, #0]
 8004ec2:	1a6d      	subs	r5, r5, r1
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f7ff ffa6 	bl	8004e18 <sbrk_aligned>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d03a      	beq.n	8004f46 <_malloc_r+0xea>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	442b      	add	r3, r5
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	bb62      	cbnz	r2, 8004f38 <_malloc_r+0xdc>
 8004ede:	f8c8 7000 	str.w	r7, [r8]
 8004ee2:	e00f      	b.n	8004f04 <_malloc_r+0xa8>
 8004ee4:	6822      	ldr	r2, [r4, #0]
 8004ee6:	1b52      	subs	r2, r2, r5
 8004ee8:	d420      	bmi.n	8004f2c <_malloc_r+0xd0>
 8004eea:	2a0b      	cmp	r2, #11
 8004eec:	d917      	bls.n	8004f1e <_malloc_r+0xc2>
 8004eee:	1961      	adds	r1, r4, r5
 8004ef0:	42a3      	cmp	r3, r4
 8004ef2:	6025      	str	r5, [r4, #0]
 8004ef4:	bf18      	it	ne
 8004ef6:	6059      	strne	r1, [r3, #4]
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	bf08      	it	eq
 8004efc:	f8c8 1000 	streq.w	r1, [r8]
 8004f00:	5162      	str	r2, [r4, r5]
 8004f02:	604b      	str	r3, [r1, #4]
 8004f04:	4630      	mov	r0, r6
 8004f06:	f000 fa69 	bl	80053dc <__malloc_unlock>
 8004f0a:	f104 000b 	add.w	r0, r4, #11
 8004f0e:	1d23      	adds	r3, r4, #4
 8004f10:	f020 0007 	bic.w	r0, r0, #7
 8004f14:	1ac2      	subs	r2, r0, r3
 8004f16:	bf1c      	itt	ne
 8004f18:	1a1b      	subne	r3, r3, r0
 8004f1a:	50a3      	strne	r3, [r4, r2]
 8004f1c:	e7af      	b.n	8004e7e <_malloc_r+0x22>
 8004f1e:	6862      	ldr	r2, [r4, #4]
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	bf0c      	ite	eq
 8004f24:	f8c8 2000 	streq.w	r2, [r8]
 8004f28:	605a      	strne	r2, [r3, #4]
 8004f2a:	e7eb      	b.n	8004f04 <_malloc_r+0xa8>
 8004f2c:	4623      	mov	r3, r4
 8004f2e:	6864      	ldr	r4, [r4, #4]
 8004f30:	e7ae      	b.n	8004e90 <_malloc_r+0x34>
 8004f32:	463c      	mov	r4, r7
 8004f34:	687f      	ldr	r7, [r7, #4]
 8004f36:	e7b6      	b.n	8004ea6 <_malloc_r+0x4a>
 8004f38:	461a      	mov	r2, r3
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	d1fb      	bne.n	8004f38 <_malloc_r+0xdc>
 8004f40:	2300      	movs	r3, #0
 8004f42:	6053      	str	r3, [r2, #4]
 8004f44:	e7de      	b.n	8004f04 <_malloc_r+0xa8>
 8004f46:	230c      	movs	r3, #12
 8004f48:	6033      	str	r3, [r6, #0]
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f000 fa46 	bl	80053dc <__malloc_unlock>
 8004f50:	e794      	b.n	8004e7c <_malloc_r+0x20>
 8004f52:	6005      	str	r5, [r0, #0]
 8004f54:	e7d6      	b.n	8004f04 <_malloc_r+0xa8>
 8004f56:	bf00      	nop
 8004f58:	2000044c 	.word	0x2000044c

08004f5c <_printf_common>:
 8004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	4616      	mov	r6, r2
 8004f62:	4698      	mov	r8, r3
 8004f64:	688a      	ldr	r2, [r1, #8]
 8004f66:	690b      	ldr	r3, [r1, #16]
 8004f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	bfb8      	it	lt
 8004f70:	4613      	movlt	r3, r2
 8004f72:	6033      	str	r3, [r6, #0]
 8004f74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f78:	4607      	mov	r7, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	b10a      	cbz	r2, 8004f82 <_printf_common+0x26>
 8004f7e:	3301      	adds	r3, #1
 8004f80:	6033      	str	r3, [r6, #0]
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	0699      	lsls	r1, r3, #26
 8004f86:	bf42      	ittt	mi
 8004f88:	6833      	ldrmi	r3, [r6, #0]
 8004f8a:	3302      	addmi	r3, #2
 8004f8c:	6033      	strmi	r3, [r6, #0]
 8004f8e:	6825      	ldr	r5, [r4, #0]
 8004f90:	f015 0506 	ands.w	r5, r5, #6
 8004f94:	d106      	bne.n	8004fa4 <_printf_common+0x48>
 8004f96:	f104 0a19 	add.w	sl, r4, #25
 8004f9a:	68e3      	ldr	r3, [r4, #12]
 8004f9c:	6832      	ldr	r2, [r6, #0]
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	42ab      	cmp	r3, r5
 8004fa2:	dc26      	bgt.n	8004ff2 <_printf_common+0x96>
 8004fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	3b00      	subs	r3, #0
 8004fac:	bf18      	it	ne
 8004fae:	2301      	movne	r3, #1
 8004fb0:	0692      	lsls	r2, r2, #26
 8004fb2:	d42b      	bmi.n	800500c <_printf_common+0xb0>
 8004fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fb8:	4641      	mov	r1, r8
 8004fba:	4638      	mov	r0, r7
 8004fbc:	47c8      	blx	r9
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d01e      	beq.n	8005000 <_printf_common+0xa4>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	6922      	ldr	r2, [r4, #16]
 8004fc6:	f003 0306 	and.w	r3, r3, #6
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	bf02      	ittt	eq
 8004fce:	68e5      	ldreq	r5, [r4, #12]
 8004fd0:	6833      	ldreq	r3, [r6, #0]
 8004fd2:	1aed      	subeq	r5, r5, r3
 8004fd4:	68a3      	ldr	r3, [r4, #8]
 8004fd6:	bf0c      	ite	eq
 8004fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fdc:	2500      	movne	r5, #0
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	bfc4      	itt	gt
 8004fe2:	1a9b      	subgt	r3, r3, r2
 8004fe4:	18ed      	addgt	r5, r5, r3
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	341a      	adds	r4, #26
 8004fea:	42b5      	cmp	r5, r6
 8004fec:	d11a      	bne.n	8005024 <_printf_common+0xc8>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	e008      	b.n	8005004 <_printf_common+0xa8>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4652      	mov	r2, sl
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	47c8      	blx	r9
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d103      	bne.n	8005008 <_printf_common+0xac>
 8005000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005008:	3501      	adds	r5, #1
 800500a:	e7c6      	b.n	8004f9a <_printf_common+0x3e>
 800500c:	18e1      	adds	r1, r4, r3
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	2030      	movs	r0, #48	@ 0x30
 8005012:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005016:	4422      	add	r2, r4
 8005018:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800501c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005020:	3302      	adds	r3, #2
 8005022:	e7c7      	b.n	8004fb4 <_printf_common+0x58>
 8005024:	2301      	movs	r3, #1
 8005026:	4622      	mov	r2, r4
 8005028:	4641      	mov	r1, r8
 800502a:	4638      	mov	r0, r7
 800502c:	47c8      	blx	r9
 800502e:	3001      	adds	r0, #1
 8005030:	d0e6      	beq.n	8005000 <_printf_common+0xa4>
 8005032:	3601      	adds	r6, #1
 8005034:	e7d9      	b.n	8004fea <_printf_common+0x8e>
	...

08005038 <_printf_i>:
 8005038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800503c:	7e0f      	ldrb	r7, [r1, #24]
 800503e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005040:	2f78      	cmp	r7, #120	@ 0x78
 8005042:	4691      	mov	r9, r2
 8005044:	4680      	mov	r8, r0
 8005046:	460c      	mov	r4, r1
 8005048:	469a      	mov	sl, r3
 800504a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800504e:	d807      	bhi.n	8005060 <_printf_i+0x28>
 8005050:	2f62      	cmp	r7, #98	@ 0x62
 8005052:	d80a      	bhi.n	800506a <_printf_i+0x32>
 8005054:	2f00      	cmp	r7, #0
 8005056:	f000 80d2 	beq.w	80051fe <_printf_i+0x1c6>
 800505a:	2f58      	cmp	r7, #88	@ 0x58
 800505c:	f000 80b9 	beq.w	80051d2 <_printf_i+0x19a>
 8005060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005068:	e03a      	b.n	80050e0 <_printf_i+0xa8>
 800506a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800506e:	2b15      	cmp	r3, #21
 8005070:	d8f6      	bhi.n	8005060 <_printf_i+0x28>
 8005072:	a101      	add	r1, pc, #4	@ (adr r1, 8005078 <_printf_i+0x40>)
 8005074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005078:	080050d1 	.word	0x080050d1
 800507c:	080050e5 	.word	0x080050e5
 8005080:	08005061 	.word	0x08005061
 8005084:	08005061 	.word	0x08005061
 8005088:	08005061 	.word	0x08005061
 800508c:	08005061 	.word	0x08005061
 8005090:	080050e5 	.word	0x080050e5
 8005094:	08005061 	.word	0x08005061
 8005098:	08005061 	.word	0x08005061
 800509c:	08005061 	.word	0x08005061
 80050a0:	08005061 	.word	0x08005061
 80050a4:	080051e5 	.word	0x080051e5
 80050a8:	0800510f 	.word	0x0800510f
 80050ac:	0800519f 	.word	0x0800519f
 80050b0:	08005061 	.word	0x08005061
 80050b4:	08005061 	.word	0x08005061
 80050b8:	08005207 	.word	0x08005207
 80050bc:	08005061 	.word	0x08005061
 80050c0:	0800510f 	.word	0x0800510f
 80050c4:	08005061 	.word	0x08005061
 80050c8:	08005061 	.word	0x08005061
 80050cc:	080051a7 	.word	0x080051a7
 80050d0:	6833      	ldr	r3, [r6, #0]
 80050d2:	1d1a      	adds	r2, r3, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6032      	str	r2, [r6, #0]
 80050d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050e0:	2301      	movs	r3, #1
 80050e2:	e09d      	b.n	8005220 <_printf_i+0x1e8>
 80050e4:	6833      	ldr	r3, [r6, #0]
 80050e6:	6820      	ldr	r0, [r4, #0]
 80050e8:	1d19      	adds	r1, r3, #4
 80050ea:	6031      	str	r1, [r6, #0]
 80050ec:	0606      	lsls	r6, r0, #24
 80050ee:	d501      	bpl.n	80050f4 <_printf_i+0xbc>
 80050f0:	681d      	ldr	r5, [r3, #0]
 80050f2:	e003      	b.n	80050fc <_printf_i+0xc4>
 80050f4:	0645      	lsls	r5, r0, #25
 80050f6:	d5fb      	bpl.n	80050f0 <_printf_i+0xb8>
 80050f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050fc:	2d00      	cmp	r5, #0
 80050fe:	da03      	bge.n	8005108 <_printf_i+0xd0>
 8005100:	232d      	movs	r3, #45	@ 0x2d
 8005102:	426d      	negs	r5, r5
 8005104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005108:	4859      	ldr	r0, [pc, #356]	@ (8005270 <_printf_i+0x238>)
 800510a:	230a      	movs	r3, #10
 800510c:	e011      	b.n	8005132 <_printf_i+0xfa>
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	6833      	ldr	r3, [r6, #0]
 8005112:	0608      	lsls	r0, r1, #24
 8005114:	f853 5b04 	ldr.w	r5, [r3], #4
 8005118:	d402      	bmi.n	8005120 <_printf_i+0xe8>
 800511a:	0649      	lsls	r1, r1, #25
 800511c:	bf48      	it	mi
 800511e:	b2ad      	uxthmi	r5, r5
 8005120:	2f6f      	cmp	r7, #111	@ 0x6f
 8005122:	4853      	ldr	r0, [pc, #332]	@ (8005270 <_printf_i+0x238>)
 8005124:	6033      	str	r3, [r6, #0]
 8005126:	bf14      	ite	ne
 8005128:	230a      	movne	r3, #10
 800512a:	2308      	moveq	r3, #8
 800512c:	2100      	movs	r1, #0
 800512e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005132:	6866      	ldr	r6, [r4, #4]
 8005134:	60a6      	str	r6, [r4, #8]
 8005136:	2e00      	cmp	r6, #0
 8005138:	bfa2      	ittt	ge
 800513a:	6821      	ldrge	r1, [r4, #0]
 800513c:	f021 0104 	bicge.w	r1, r1, #4
 8005140:	6021      	strge	r1, [r4, #0]
 8005142:	b90d      	cbnz	r5, 8005148 <_printf_i+0x110>
 8005144:	2e00      	cmp	r6, #0
 8005146:	d04b      	beq.n	80051e0 <_printf_i+0x1a8>
 8005148:	4616      	mov	r6, r2
 800514a:	fbb5 f1f3 	udiv	r1, r5, r3
 800514e:	fb03 5711 	mls	r7, r3, r1, r5
 8005152:	5dc7      	ldrb	r7, [r0, r7]
 8005154:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005158:	462f      	mov	r7, r5
 800515a:	42bb      	cmp	r3, r7
 800515c:	460d      	mov	r5, r1
 800515e:	d9f4      	bls.n	800514a <_printf_i+0x112>
 8005160:	2b08      	cmp	r3, #8
 8005162:	d10b      	bne.n	800517c <_printf_i+0x144>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	07df      	lsls	r7, r3, #31
 8005168:	d508      	bpl.n	800517c <_printf_i+0x144>
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	6861      	ldr	r1, [r4, #4]
 800516e:	4299      	cmp	r1, r3
 8005170:	bfde      	ittt	le
 8005172:	2330      	movle	r3, #48	@ 0x30
 8005174:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005178:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800517c:	1b92      	subs	r2, r2, r6
 800517e:	6122      	str	r2, [r4, #16]
 8005180:	f8cd a000 	str.w	sl, [sp]
 8005184:	464b      	mov	r3, r9
 8005186:	aa03      	add	r2, sp, #12
 8005188:	4621      	mov	r1, r4
 800518a:	4640      	mov	r0, r8
 800518c:	f7ff fee6 	bl	8004f5c <_printf_common>
 8005190:	3001      	adds	r0, #1
 8005192:	d14a      	bne.n	800522a <_printf_i+0x1f2>
 8005194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005198:	b004      	add	sp, #16
 800519a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	f043 0320 	orr.w	r3, r3, #32
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	4833      	ldr	r0, [pc, #204]	@ (8005274 <_printf_i+0x23c>)
 80051a8:	2778      	movs	r7, #120	@ 0x78
 80051aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	6831      	ldr	r1, [r6, #0]
 80051b2:	061f      	lsls	r7, r3, #24
 80051b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80051b8:	d402      	bmi.n	80051c0 <_printf_i+0x188>
 80051ba:	065f      	lsls	r7, r3, #25
 80051bc:	bf48      	it	mi
 80051be:	b2ad      	uxthmi	r5, r5
 80051c0:	6031      	str	r1, [r6, #0]
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	bf44      	itt	mi
 80051c6:	f043 0320 	orrmi.w	r3, r3, #32
 80051ca:	6023      	strmi	r3, [r4, #0]
 80051cc:	b11d      	cbz	r5, 80051d6 <_printf_i+0x19e>
 80051ce:	2310      	movs	r3, #16
 80051d0:	e7ac      	b.n	800512c <_printf_i+0xf4>
 80051d2:	4827      	ldr	r0, [pc, #156]	@ (8005270 <_printf_i+0x238>)
 80051d4:	e7e9      	b.n	80051aa <_printf_i+0x172>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	f023 0320 	bic.w	r3, r3, #32
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	e7f6      	b.n	80051ce <_printf_i+0x196>
 80051e0:	4616      	mov	r6, r2
 80051e2:	e7bd      	b.n	8005160 <_printf_i+0x128>
 80051e4:	6833      	ldr	r3, [r6, #0]
 80051e6:	6825      	ldr	r5, [r4, #0]
 80051e8:	6961      	ldr	r1, [r4, #20]
 80051ea:	1d18      	adds	r0, r3, #4
 80051ec:	6030      	str	r0, [r6, #0]
 80051ee:	062e      	lsls	r6, r5, #24
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	d501      	bpl.n	80051f8 <_printf_i+0x1c0>
 80051f4:	6019      	str	r1, [r3, #0]
 80051f6:	e002      	b.n	80051fe <_printf_i+0x1c6>
 80051f8:	0668      	lsls	r0, r5, #25
 80051fa:	d5fb      	bpl.n	80051f4 <_printf_i+0x1bc>
 80051fc:	8019      	strh	r1, [r3, #0]
 80051fe:	2300      	movs	r3, #0
 8005200:	6123      	str	r3, [r4, #16]
 8005202:	4616      	mov	r6, r2
 8005204:	e7bc      	b.n	8005180 <_printf_i+0x148>
 8005206:	6833      	ldr	r3, [r6, #0]
 8005208:	1d1a      	adds	r2, r3, #4
 800520a:	6032      	str	r2, [r6, #0]
 800520c:	681e      	ldr	r6, [r3, #0]
 800520e:	6862      	ldr	r2, [r4, #4]
 8005210:	2100      	movs	r1, #0
 8005212:	4630      	mov	r0, r6
 8005214:	f7fa ffe4 	bl	80001e0 <memchr>
 8005218:	b108      	cbz	r0, 800521e <_printf_i+0x1e6>
 800521a:	1b80      	subs	r0, r0, r6
 800521c:	6060      	str	r0, [r4, #4]
 800521e:	6863      	ldr	r3, [r4, #4]
 8005220:	6123      	str	r3, [r4, #16]
 8005222:	2300      	movs	r3, #0
 8005224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005228:	e7aa      	b.n	8005180 <_printf_i+0x148>
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	4632      	mov	r2, r6
 800522e:	4649      	mov	r1, r9
 8005230:	4640      	mov	r0, r8
 8005232:	47d0      	blx	sl
 8005234:	3001      	adds	r0, #1
 8005236:	d0ad      	beq.n	8005194 <_printf_i+0x15c>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	079b      	lsls	r3, r3, #30
 800523c:	d413      	bmi.n	8005266 <_printf_i+0x22e>
 800523e:	68e0      	ldr	r0, [r4, #12]
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	4298      	cmp	r0, r3
 8005244:	bfb8      	it	lt
 8005246:	4618      	movlt	r0, r3
 8005248:	e7a6      	b.n	8005198 <_printf_i+0x160>
 800524a:	2301      	movs	r3, #1
 800524c:	4632      	mov	r2, r6
 800524e:	4649      	mov	r1, r9
 8005250:	4640      	mov	r0, r8
 8005252:	47d0      	blx	sl
 8005254:	3001      	adds	r0, #1
 8005256:	d09d      	beq.n	8005194 <_printf_i+0x15c>
 8005258:	3501      	adds	r5, #1
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	9903      	ldr	r1, [sp, #12]
 800525e:	1a5b      	subs	r3, r3, r1
 8005260:	42ab      	cmp	r3, r5
 8005262:	dcf2      	bgt.n	800524a <_printf_i+0x212>
 8005264:	e7eb      	b.n	800523e <_printf_i+0x206>
 8005266:	2500      	movs	r5, #0
 8005268:	f104 0619 	add.w	r6, r4, #25
 800526c:	e7f5      	b.n	800525a <_printf_i+0x222>
 800526e:	bf00      	nop
 8005270:	080058f1 	.word	0x080058f1
 8005274:	08005902 	.word	0x08005902

08005278 <__sflush_r>:
 8005278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800527c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005280:	0716      	lsls	r6, r2, #28
 8005282:	4605      	mov	r5, r0
 8005284:	460c      	mov	r4, r1
 8005286:	d454      	bmi.n	8005332 <__sflush_r+0xba>
 8005288:	684b      	ldr	r3, [r1, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dc02      	bgt.n	8005294 <__sflush_r+0x1c>
 800528e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	dd48      	ble.n	8005326 <__sflush_r+0xae>
 8005294:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005296:	2e00      	cmp	r6, #0
 8005298:	d045      	beq.n	8005326 <__sflush_r+0xae>
 800529a:	2300      	movs	r3, #0
 800529c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052a0:	682f      	ldr	r7, [r5, #0]
 80052a2:	6a21      	ldr	r1, [r4, #32]
 80052a4:	602b      	str	r3, [r5, #0]
 80052a6:	d030      	beq.n	800530a <__sflush_r+0x92>
 80052a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	0759      	lsls	r1, r3, #29
 80052ae:	d505      	bpl.n	80052bc <__sflush_r+0x44>
 80052b0:	6863      	ldr	r3, [r4, #4]
 80052b2:	1ad2      	subs	r2, r2, r3
 80052b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052b6:	b10b      	cbz	r3, 80052bc <__sflush_r+0x44>
 80052b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	2300      	movs	r3, #0
 80052be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052c0:	6a21      	ldr	r1, [r4, #32]
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b0      	blx	r6
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	d106      	bne.n	80052da <__sflush_r+0x62>
 80052cc:	6829      	ldr	r1, [r5, #0]
 80052ce:	291d      	cmp	r1, #29
 80052d0:	d82b      	bhi.n	800532a <__sflush_r+0xb2>
 80052d2:	4a2a      	ldr	r2, [pc, #168]	@ (800537c <__sflush_r+0x104>)
 80052d4:	410a      	asrs	r2, r1
 80052d6:	07d6      	lsls	r6, r2, #31
 80052d8:	d427      	bmi.n	800532a <__sflush_r+0xb2>
 80052da:	2200      	movs	r2, #0
 80052dc:	6062      	str	r2, [r4, #4]
 80052de:	04d9      	lsls	r1, r3, #19
 80052e0:	6922      	ldr	r2, [r4, #16]
 80052e2:	6022      	str	r2, [r4, #0]
 80052e4:	d504      	bpl.n	80052f0 <__sflush_r+0x78>
 80052e6:	1c42      	adds	r2, r0, #1
 80052e8:	d101      	bne.n	80052ee <__sflush_r+0x76>
 80052ea:	682b      	ldr	r3, [r5, #0]
 80052ec:	b903      	cbnz	r3, 80052f0 <__sflush_r+0x78>
 80052ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80052f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052f2:	602f      	str	r7, [r5, #0]
 80052f4:	b1b9      	cbz	r1, 8005326 <__sflush_r+0xae>
 80052f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052fa:	4299      	cmp	r1, r3
 80052fc:	d002      	beq.n	8005304 <__sflush_r+0x8c>
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fa7a 	bl	80057f8 <_free_r>
 8005304:	2300      	movs	r3, #0
 8005306:	6363      	str	r3, [r4, #52]	@ 0x34
 8005308:	e00d      	b.n	8005326 <__sflush_r+0xae>
 800530a:	2301      	movs	r3, #1
 800530c:	4628      	mov	r0, r5
 800530e:	47b0      	blx	r6
 8005310:	4602      	mov	r2, r0
 8005312:	1c50      	adds	r0, r2, #1
 8005314:	d1c9      	bne.n	80052aa <__sflush_r+0x32>
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0c6      	beq.n	80052aa <__sflush_r+0x32>
 800531c:	2b1d      	cmp	r3, #29
 800531e:	d001      	beq.n	8005324 <__sflush_r+0xac>
 8005320:	2b16      	cmp	r3, #22
 8005322:	d11e      	bne.n	8005362 <__sflush_r+0xea>
 8005324:	602f      	str	r7, [r5, #0]
 8005326:	2000      	movs	r0, #0
 8005328:	e022      	b.n	8005370 <__sflush_r+0xf8>
 800532a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800532e:	b21b      	sxth	r3, r3
 8005330:	e01b      	b.n	800536a <__sflush_r+0xf2>
 8005332:	690f      	ldr	r7, [r1, #16]
 8005334:	2f00      	cmp	r7, #0
 8005336:	d0f6      	beq.n	8005326 <__sflush_r+0xae>
 8005338:	0793      	lsls	r3, r2, #30
 800533a:	680e      	ldr	r6, [r1, #0]
 800533c:	bf08      	it	eq
 800533e:	694b      	ldreq	r3, [r1, #20]
 8005340:	600f      	str	r7, [r1, #0]
 8005342:	bf18      	it	ne
 8005344:	2300      	movne	r3, #0
 8005346:	eba6 0807 	sub.w	r8, r6, r7
 800534a:	608b      	str	r3, [r1, #8]
 800534c:	f1b8 0f00 	cmp.w	r8, #0
 8005350:	dde9      	ble.n	8005326 <__sflush_r+0xae>
 8005352:	6a21      	ldr	r1, [r4, #32]
 8005354:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005356:	4643      	mov	r3, r8
 8005358:	463a      	mov	r2, r7
 800535a:	4628      	mov	r0, r5
 800535c:	47b0      	blx	r6
 800535e:	2800      	cmp	r0, #0
 8005360:	dc08      	bgt.n	8005374 <__sflush_r+0xfc>
 8005362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800536a:	81a3      	strh	r3, [r4, #12]
 800536c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005374:	4407      	add	r7, r0
 8005376:	eba8 0800 	sub.w	r8, r8, r0
 800537a:	e7e7      	b.n	800534c <__sflush_r+0xd4>
 800537c:	dfbffffe 	.word	0xdfbffffe

08005380 <_fflush_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	690b      	ldr	r3, [r1, #16]
 8005384:	4605      	mov	r5, r0
 8005386:	460c      	mov	r4, r1
 8005388:	b913      	cbnz	r3, 8005390 <_fflush_r+0x10>
 800538a:	2500      	movs	r5, #0
 800538c:	4628      	mov	r0, r5
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	b118      	cbz	r0, 800539a <_fflush_r+0x1a>
 8005392:	6a03      	ldr	r3, [r0, #32]
 8005394:	b90b      	cbnz	r3, 800539a <_fflush_r+0x1a>
 8005396:	f7ff fa29 	bl	80047ec <__sinit>
 800539a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f3      	beq.n	800538a <_fflush_r+0xa>
 80053a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053a4:	07d0      	lsls	r0, r2, #31
 80053a6:	d404      	bmi.n	80053b2 <_fflush_r+0x32>
 80053a8:	0599      	lsls	r1, r3, #22
 80053aa:	d402      	bmi.n	80053b2 <_fflush_r+0x32>
 80053ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ae:	f7ff fa98 	bl	80048e2 <__retarget_lock_acquire_recursive>
 80053b2:	4628      	mov	r0, r5
 80053b4:	4621      	mov	r1, r4
 80053b6:	f7ff ff5f 	bl	8005278 <__sflush_r>
 80053ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053bc:	07da      	lsls	r2, r3, #31
 80053be:	4605      	mov	r5, r0
 80053c0:	d4e4      	bmi.n	800538c <_fflush_r+0xc>
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	059b      	lsls	r3, r3, #22
 80053c6:	d4e1      	bmi.n	800538c <_fflush_r+0xc>
 80053c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ca:	f7ff fa8b 	bl	80048e4 <__retarget_lock_release_recursive>
 80053ce:	e7dd      	b.n	800538c <_fflush_r+0xc>

080053d0 <__malloc_lock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	@ (80053d8 <__malloc_lock+0x8>)
 80053d2:	f7ff ba86 	b.w	80048e2 <__retarget_lock_acquire_recursive>
 80053d6:	bf00      	nop
 80053d8:	20000444 	.word	0x20000444

080053dc <__malloc_unlock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	@ (80053e4 <__malloc_unlock+0x8>)
 80053de:	f7ff ba81 	b.w	80048e4 <__retarget_lock_release_recursive>
 80053e2:	bf00      	nop
 80053e4:	20000444 	.word	0x20000444

080053e8 <__sread>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	460c      	mov	r4, r1
 80053ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f0:	f000 f9c0 	bl	8005774 <_read_r>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	bfab      	itete	ge
 80053f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053fa:	89a3      	ldrhlt	r3, [r4, #12]
 80053fc:	181b      	addge	r3, r3, r0
 80053fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005402:	bfac      	ite	ge
 8005404:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005406:	81a3      	strhlt	r3, [r4, #12]
 8005408:	bd10      	pop	{r4, pc}

0800540a <__swrite>:
 800540a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800540e:	461f      	mov	r7, r3
 8005410:	898b      	ldrh	r3, [r1, #12]
 8005412:	05db      	lsls	r3, r3, #23
 8005414:	4605      	mov	r5, r0
 8005416:	460c      	mov	r4, r1
 8005418:	4616      	mov	r6, r2
 800541a:	d505      	bpl.n	8005428 <__swrite+0x1e>
 800541c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005420:	2302      	movs	r3, #2
 8005422:	2200      	movs	r2, #0
 8005424:	f000 f994 	bl	8005750 <_lseek_r>
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005432:	81a3      	strh	r3, [r4, #12]
 8005434:	4632      	mov	r2, r6
 8005436:	463b      	mov	r3, r7
 8005438:	4628      	mov	r0, r5
 800543a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800543e:	f000 b9bb 	b.w	80057b8 <_write_r>

08005442 <__sseek>:
 8005442:	b510      	push	{r4, lr}
 8005444:	460c      	mov	r4, r1
 8005446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544a:	f000 f981 	bl	8005750 <_lseek_r>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	bf15      	itete	ne
 8005454:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005456:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800545a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800545e:	81a3      	strheq	r3, [r4, #12]
 8005460:	bf18      	it	ne
 8005462:	81a3      	strhne	r3, [r4, #12]
 8005464:	bd10      	pop	{r4, pc}

08005466 <__sclose>:
 8005466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546a:	f000 b93f 	b.w	80056ec <_close_r>

0800546e <_realloc_r>:
 800546e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005472:	4680      	mov	r8, r0
 8005474:	4615      	mov	r5, r2
 8005476:	460c      	mov	r4, r1
 8005478:	b921      	cbnz	r1, 8005484 <_realloc_r+0x16>
 800547a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	4611      	mov	r1, r2
 8005480:	f7ff bcec 	b.w	8004e5c <_malloc_r>
 8005484:	b92a      	cbnz	r2, 8005492 <_realloc_r+0x24>
 8005486:	f000 f9b7 	bl	80057f8 <_free_r>
 800548a:	2400      	movs	r4, #0
 800548c:	4620      	mov	r0, r4
 800548e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005492:	f000 f9fb 	bl	800588c <_malloc_usable_size_r>
 8005496:	4285      	cmp	r5, r0
 8005498:	4606      	mov	r6, r0
 800549a:	d802      	bhi.n	80054a2 <_realloc_r+0x34>
 800549c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80054a0:	d8f4      	bhi.n	800548c <_realloc_r+0x1e>
 80054a2:	4629      	mov	r1, r5
 80054a4:	4640      	mov	r0, r8
 80054a6:	f7ff fcd9 	bl	8004e5c <_malloc_r>
 80054aa:	4607      	mov	r7, r0
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d0ec      	beq.n	800548a <_realloc_r+0x1c>
 80054b0:	42b5      	cmp	r5, r6
 80054b2:	462a      	mov	r2, r5
 80054b4:	4621      	mov	r1, r4
 80054b6:	bf28      	it	cs
 80054b8:	4632      	movcs	r2, r6
 80054ba:	f000 f98f 	bl	80057dc <memcpy>
 80054be:	4621      	mov	r1, r4
 80054c0:	4640      	mov	r0, r8
 80054c2:	f000 f999 	bl	80057f8 <_free_r>
 80054c6:	463c      	mov	r4, r7
 80054c8:	e7e0      	b.n	800548c <_realloc_r+0x1e>

080054ca <__swbuf_r>:
 80054ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054cc:	460e      	mov	r6, r1
 80054ce:	4614      	mov	r4, r2
 80054d0:	4605      	mov	r5, r0
 80054d2:	b118      	cbz	r0, 80054dc <__swbuf_r+0x12>
 80054d4:	6a03      	ldr	r3, [r0, #32]
 80054d6:	b90b      	cbnz	r3, 80054dc <__swbuf_r+0x12>
 80054d8:	f7ff f988 	bl	80047ec <__sinit>
 80054dc:	69a3      	ldr	r3, [r4, #24]
 80054de:	60a3      	str	r3, [r4, #8]
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	071a      	lsls	r2, r3, #28
 80054e4:	d501      	bpl.n	80054ea <__swbuf_r+0x20>
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	b943      	cbnz	r3, 80054fc <__swbuf_r+0x32>
 80054ea:	4621      	mov	r1, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 f82b 	bl	8005548 <__swsetup_r>
 80054f2:	b118      	cbz	r0, 80054fc <__swbuf_r+0x32>
 80054f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80054f8:	4638      	mov	r0, r7
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	6922      	ldr	r2, [r4, #16]
 8005500:	1a98      	subs	r0, r3, r2
 8005502:	6963      	ldr	r3, [r4, #20]
 8005504:	b2f6      	uxtb	r6, r6
 8005506:	4283      	cmp	r3, r0
 8005508:	4637      	mov	r7, r6
 800550a:	dc05      	bgt.n	8005518 <__swbuf_r+0x4e>
 800550c:	4621      	mov	r1, r4
 800550e:	4628      	mov	r0, r5
 8005510:	f7ff ff36 	bl	8005380 <_fflush_r>
 8005514:	2800      	cmp	r0, #0
 8005516:	d1ed      	bne.n	80054f4 <__swbuf_r+0x2a>
 8005518:	68a3      	ldr	r3, [r4, #8]
 800551a:	3b01      	subs	r3, #1
 800551c:	60a3      	str	r3, [r4, #8]
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	6022      	str	r2, [r4, #0]
 8005524:	701e      	strb	r6, [r3, #0]
 8005526:	6962      	ldr	r2, [r4, #20]
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	429a      	cmp	r2, r3
 800552c:	d004      	beq.n	8005538 <__swbuf_r+0x6e>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	07db      	lsls	r3, r3, #31
 8005532:	d5e1      	bpl.n	80054f8 <__swbuf_r+0x2e>
 8005534:	2e0a      	cmp	r6, #10
 8005536:	d1df      	bne.n	80054f8 <__swbuf_r+0x2e>
 8005538:	4621      	mov	r1, r4
 800553a:	4628      	mov	r0, r5
 800553c:	f7ff ff20 	bl	8005380 <_fflush_r>
 8005540:	2800      	cmp	r0, #0
 8005542:	d0d9      	beq.n	80054f8 <__swbuf_r+0x2e>
 8005544:	e7d6      	b.n	80054f4 <__swbuf_r+0x2a>
	...

08005548 <__swsetup_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4b29      	ldr	r3, [pc, #164]	@ (80055f0 <__swsetup_r+0xa8>)
 800554c:	4605      	mov	r5, r0
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	460c      	mov	r4, r1
 8005552:	b118      	cbz	r0, 800555c <__swsetup_r+0x14>
 8005554:	6a03      	ldr	r3, [r0, #32]
 8005556:	b90b      	cbnz	r3, 800555c <__swsetup_r+0x14>
 8005558:	f7ff f948 	bl	80047ec <__sinit>
 800555c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005560:	0719      	lsls	r1, r3, #28
 8005562:	d422      	bmi.n	80055aa <__swsetup_r+0x62>
 8005564:	06da      	lsls	r2, r3, #27
 8005566:	d407      	bmi.n	8005578 <__swsetup_r+0x30>
 8005568:	2209      	movs	r2, #9
 800556a:	602a      	str	r2, [r5, #0]
 800556c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005576:	e033      	b.n	80055e0 <__swsetup_r+0x98>
 8005578:	0758      	lsls	r0, r3, #29
 800557a:	d512      	bpl.n	80055a2 <__swsetup_r+0x5a>
 800557c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800557e:	b141      	cbz	r1, 8005592 <__swsetup_r+0x4a>
 8005580:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005584:	4299      	cmp	r1, r3
 8005586:	d002      	beq.n	800558e <__swsetup_r+0x46>
 8005588:	4628      	mov	r0, r5
 800558a:	f000 f935 	bl	80057f8 <_free_r>
 800558e:	2300      	movs	r3, #0
 8005590:	6363      	str	r3, [r4, #52]	@ 0x34
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	2300      	movs	r3, #0
 800559c:	6063      	str	r3, [r4, #4]
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	f043 0308 	orr.w	r3, r3, #8
 80055a8:	81a3      	strh	r3, [r4, #12]
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	b94b      	cbnz	r3, 80055c2 <__swsetup_r+0x7a>
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b8:	d003      	beq.n	80055c2 <__swsetup_r+0x7a>
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 f83f 	bl	8005640 <__smakebuf_r>
 80055c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c6:	f013 0201 	ands.w	r2, r3, #1
 80055ca:	d00a      	beq.n	80055e2 <__swsetup_r+0x9a>
 80055cc:	2200      	movs	r2, #0
 80055ce:	60a2      	str	r2, [r4, #8]
 80055d0:	6962      	ldr	r2, [r4, #20]
 80055d2:	4252      	negs	r2, r2
 80055d4:	61a2      	str	r2, [r4, #24]
 80055d6:	6922      	ldr	r2, [r4, #16]
 80055d8:	b942      	cbnz	r2, 80055ec <__swsetup_r+0xa4>
 80055da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055de:	d1c5      	bne.n	800556c <__swsetup_r+0x24>
 80055e0:	bd38      	pop	{r3, r4, r5, pc}
 80055e2:	0799      	lsls	r1, r3, #30
 80055e4:	bf58      	it	pl
 80055e6:	6962      	ldrpl	r2, [r4, #20]
 80055e8:	60a2      	str	r2, [r4, #8]
 80055ea:	e7f4      	b.n	80055d6 <__swsetup_r+0x8e>
 80055ec:	2000      	movs	r0, #0
 80055ee:	e7f7      	b.n	80055e0 <__swsetup_r+0x98>
 80055f0:	20000048 	.word	0x20000048

080055f4 <__swhatbuf_r>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	460c      	mov	r4, r1
 80055f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fc:	2900      	cmp	r1, #0
 80055fe:	b096      	sub	sp, #88	@ 0x58
 8005600:	4615      	mov	r5, r2
 8005602:	461e      	mov	r6, r3
 8005604:	da0d      	bge.n	8005622 <__swhatbuf_r+0x2e>
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800560c:	f04f 0100 	mov.w	r1, #0
 8005610:	bf14      	ite	ne
 8005612:	2340      	movne	r3, #64	@ 0x40
 8005614:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005618:	2000      	movs	r0, #0
 800561a:	6031      	str	r1, [r6, #0]
 800561c:	602b      	str	r3, [r5, #0]
 800561e:	b016      	add	sp, #88	@ 0x58
 8005620:	bd70      	pop	{r4, r5, r6, pc}
 8005622:	466a      	mov	r2, sp
 8005624:	f000 f872 	bl	800570c <_fstat_r>
 8005628:	2800      	cmp	r0, #0
 800562a:	dbec      	blt.n	8005606 <__swhatbuf_r+0x12>
 800562c:	9901      	ldr	r1, [sp, #4]
 800562e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005632:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005636:	4259      	negs	r1, r3
 8005638:	4159      	adcs	r1, r3
 800563a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800563e:	e7eb      	b.n	8005618 <__swhatbuf_r+0x24>

08005640 <__smakebuf_r>:
 8005640:	898b      	ldrh	r3, [r1, #12]
 8005642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005644:	079d      	lsls	r5, r3, #30
 8005646:	4606      	mov	r6, r0
 8005648:	460c      	mov	r4, r1
 800564a:	d507      	bpl.n	800565c <__smakebuf_r+0x1c>
 800564c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	2301      	movs	r3, #1
 8005656:	6163      	str	r3, [r4, #20]
 8005658:	b003      	add	sp, #12
 800565a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800565c:	ab01      	add	r3, sp, #4
 800565e:	466a      	mov	r2, sp
 8005660:	f7ff ffc8 	bl	80055f4 <__swhatbuf_r>
 8005664:	9f00      	ldr	r7, [sp, #0]
 8005666:	4605      	mov	r5, r0
 8005668:	4639      	mov	r1, r7
 800566a:	4630      	mov	r0, r6
 800566c:	f7ff fbf6 	bl	8004e5c <_malloc_r>
 8005670:	b948      	cbnz	r0, 8005686 <__smakebuf_r+0x46>
 8005672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005676:	059a      	lsls	r2, r3, #22
 8005678:	d4ee      	bmi.n	8005658 <__smakebuf_r+0x18>
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	f043 0302 	orr.w	r3, r3, #2
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	e7e2      	b.n	800564c <__smakebuf_r+0xc>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	6020      	str	r0, [r4, #0]
 800568a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005696:	b15b      	cbz	r3, 80056b0 <__smakebuf_r+0x70>
 8005698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800569c:	4630      	mov	r0, r6
 800569e:	f000 f847 	bl	8005730 <_isatty_r>
 80056a2:	b128      	cbz	r0, 80056b0 <__smakebuf_r+0x70>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	431d      	orrs	r5, r3
 80056b4:	81a5      	strh	r5, [r4, #12]
 80056b6:	e7cf      	b.n	8005658 <__smakebuf_r+0x18>

080056b8 <memmove>:
 80056b8:	4288      	cmp	r0, r1
 80056ba:	b510      	push	{r4, lr}
 80056bc:	eb01 0402 	add.w	r4, r1, r2
 80056c0:	d902      	bls.n	80056c8 <memmove+0x10>
 80056c2:	4284      	cmp	r4, r0
 80056c4:	4623      	mov	r3, r4
 80056c6:	d807      	bhi.n	80056d8 <memmove+0x20>
 80056c8:	1e43      	subs	r3, r0, #1
 80056ca:	42a1      	cmp	r1, r4
 80056cc:	d008      	beq.n	80056e0 <memmove+0x28>
 80056ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056d6:	e7f8      	b.n	80056ca <memmove+0x12>
 80056d8:	4402      	add	r2, r0
 80056da:	4601      	mov	r1, r0
 80056dc:	428a      	cmp	r2, r1
 80056de:	d100      	bne.n	80056e2 <memmove+0x2a>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ea:	e7f7      	b.n	80056dc <memmove+0x24>

080056ec <_close_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4d06      	ldr	r5, [pc, #24]	@ (8005708 <_close_r+0x1c>)
 80056f0:	2300      	movs	r3, #0
 80056f2:	4604      	mov	r4, r0
 80056f4:	4608      	mov	r0, r1
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	f7fb ff83 	bl	8001602 <_close>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_close_r+0x1a>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	b103      	cbz	r3, 8005706 <_close_r+0x1a>
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	20000450 	.word	0x20000450

0800570c <_fstat_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d07      	ldr	r5, [pc, #28]	@ (800572c <_fstat_r+0x20>)
 8005710:	2300      	movs	r3, #0
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	602b      	str	r3, [r5, #0]
 800571a:	f7fb ff7e 	bl	800161a <_fstat>
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	d102      	bne.n	8005728 <_fstat_r+0x1c>
 8005722:	682b      	ldr	r3, [r5, #0]
 8005724:	b103      	cbz	r3, 8005728 <_fstat_r+0x1c>
 8005726:	6023      	str	r3, [r4, #0]
 8005728:	bd38      	pop	{r3, r4, r5, pc}
 800572a:	bf00      	nop
 800572c:	20000450 	.word	0x20000450

08005730 <_isatty_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d06      	ldr	r5, [pc, #24]	@ (800574c <_isatty_r+0x1c>)
 8005734:	2300      	movs	r3, #0
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	f7fb ff7d 	bl	800163a <_isatty>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_isatty_r+0x1a>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_isatty_r+0x1a>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	20000450 	.word	0x20000450

08005750 <_lseek_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4d07      	ldr	r5, [pc, #28]	@ (8005770 <_lseek_r+0x20>)
 8005754:	4604      	mov	r4, r0
 8005756:	4608      	mov	r0, r1
 8005758:	4611      	mov	r1, r2
 800575a:	2200      	movs	r2, #0
 800575c:	602a      	str	r2, [r5, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	f7fb ff76 	bl	8001650 <_lseek>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_lseek_r+0x1e>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b103      	cbz	r3, 800576e <_lseek_r+0x1e>
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	20000450 	.word	0x20000450

08005774 <_read_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4d07      	ldr	r5, [pc, #28]	@ (8005794 <_read_r+0x20>)
 8005778:	4604      	mov	r4, r0
 800577a:	4608      	mov	r0, r1
 800577c:	4611      	mov	r1, r2
 800577e:	2200      	movs	r2, #0
 8005780:	602a      	str	r2, [r5, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	f7fb ff20 	bl	80015c8 <_read>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_read_r+0x1e>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_read_r+0x1e>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	20000450 	.word	0x20000450

08005798 <_sbrk_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d06      	ldr	r5, [pc, #24]	@ (80057b4 <_sbrk_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	f7fb ff62 	bl	800166c <_sbrk>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_sbrk_r+0x1a>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_sbrk_r+0x1a>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000450 	.word	0x20000450

080057b8 <_write_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d07      	ldr	r5, [pc, #28]	@ (80057d8 <_write_r+0x20>)
 80057bc:	4604      	mov	r4, r0
 80057be:	4608      	mov	r0, r1
 80057c0:	4611      	mov	r1, r2
 80057c2:	2200      	movs	r2, #0
 80057c4:	602a      	str	r2, [r5, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7fb ff98 	bl	80016fc <_write>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_write_r+0x1e>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_write_r+0x1e>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	20000450 	.word	0x20000450

080057dc <memcpy>:
 80057dc:	440a      	add	r2, r1
 80057de:	4291      	cmp	r1, r2
 80057e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80057e4:	d100      	bne.n	80057e8 <memcpy+0xc>
 80057e6:	4770      	bx	lr
 80057e8:	b510      	push	{r4, lr}
 80057ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057f2:	4291      	cmp	r1, r2
 80057f4:	d1f9      	bne.n	80057ea <memcpy+0xe>
 80057f6:	bd10      	pop	{r4, pc}

080057f8 <_free_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4605      	mov	r5, r0
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d041      	beq.n	8005884 <_free_r+0x8c>
 8005800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005804:	1f0c      	subs	r4, r1, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	bfb8      	it	lt
 800580a:	18e4      	addlt	r4, r4, r3
 800580c:	f7ff fde0 	bl	80053d0 <__malloc_lock>
 8005810:	4a1d      	ldr	r2, [pc, #116]	@ (8005888 <_free_r+0x90>)
 8005812:	6813      	ldr	r3, [r2, #0]
 8005814:	b933      	cbnz	r3, 8005824 <_free_r+0x2c>
 8005816:	6063      	str	r3, [r4, #4]
 8005818:	6014      	str	r4, [r2, #0]
 800581a:	4628      	mov	r0, r5
 800581c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005820:	f7ff bddc 	b.w	80053dc <__malloc_unlock>
 8005824:	42a3      	cmp	r3, r4
 8005826:	d908      	bls.n	800583a <_free_r+0x42>
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	1821      	adds	r1, r4, r0
 800582c:	428b      	cmp	r3, r1
 800582e:	bf01      	itttt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	1809      	addeq	r1, r1, r0
 8005836:	6021      	streq	r1, [r4, #0]
 8005838:	e7ed      	b.n	8005816 <_free_r+0x1e>
 800583a:	461a      	mov	r2, r3
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	b10b      	cbz	r3, 8005844 <_free_r+0x4c>
 8005840:	42a3      	cmp	r3, r4
 8005842:	d9fa      	bls.n	800583a <_free_r+0x42>
 8005844:	6811      	ldr	r1, [r2, #0]
 8005846:	1850      	adds	r0, r2, r1
 8005848:	42a0      	cmp	r0, r4
 800584a:	d10b      	bne.n	8005864 <_free_r+0x6c>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	4401      	add	r1, r0
 8005850:	1850      	adds	r0, r2, r1
 8005852:	4283      	cmp	r3, r0
 8005854:	6011      	str	r1, [r2, #0]
 8005856:	d1e0      	bne.n	800581a <_free_r+0x22>
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	6053      	str	r3, [r2, #4]
 800585e:	4408      	add	r0, r1
 8005860:	6010      	str	r0, [r2, #0]
 8005862:	e7da      	b.n	800581a <_free_r+0x22>
 8005864:	d902      	bls.n	800586c <_free_r+0x74>
 8005866:	230c      	movs	r3, #12
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	e7d6      	b.n	800581a <_free_r+0x22>
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	1821      	adds	r1, r4, r0
 8005870:	428b      	cmp	r3, r1
 8005872:	bf04      	itt	eq
 8005874:	6819      	ldreq	r1, [r3, #0]
 8005876:	685b      	ldreq	r3, [r3, #4]
 8005878:	6063      	str	r3, [r4, #4]
 800587a:	bf04      	itt	eq
 800587c:	1809      	addeq	r1, r1, r0
 800587e:	6021      	streq	r1, [r4, #0]
 8005880:	6054      	str	r4, [r2, #4]
 8005882:	e7ca      	b.n	800581a <_free_r+0x22>
 8005884:	bd38      	pop	{r3, r4, r5, pc}
 8005886:	bf00      	nop
 8005888:	2000044c 	.word	0x2000044c

0800588c <_malloc_usable_size_r>:
 800588c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005890:	1f18      	subs	r0, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	bfbc      	itt	lt
 8005896:	580b      	ldrlt	r3, [r1, r0]
 8005898:	18c0      	addlt	r0, r0, r3
 800589a:	4770      	bx	lr

0800589c <_init>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr

080058a8 <_fini>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr
