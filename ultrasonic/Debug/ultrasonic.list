
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005f10  08005f10  00006f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f6c  08005f6c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005f6c  08005f6c  00006f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f74  08005f74  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f74  08005f74  00006f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f78  08005f78  00006f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005f7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000068  08005fe4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08005fe4  00007374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efa7  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b3  00000000  00000000  0001603f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000184f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a90  00000000  00000000  00019298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e0a  00000000  00000000  00019d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001036b  00000000  00000000  00031b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901cc  00000000  00000000  00041e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2069  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ec  00000000  00000000  000d20ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d6198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ef8 	.word	0x08005ef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005ef8 	.word	0x08005ef8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <delay_us>:
extern TIM_HandleTypeDef htim3;//ultrasonic
extern TIM_HandleTypeDef htim11;//delay_us
extern UART_HandleTypeDef huart2;

//us동안 지
void delay_us(uint16_t t){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
		htim11.Instance->CNT=0;
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <delay_us+0x30>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
		while(htim11.Instance->CNT < t);
 8000d5e:	bf00      	nop
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <delay_us+0x30>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3f9      	bcc.n	8000d60 <delay_us+0x14>
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000114 	.word	0x20000114

08000d80 <app>:

void stopSound(){
	htim1.Instance-> CCR1 = 0;
}

void app(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	//uart 수신 인터럽트 시작
	initUart(&huart2);
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <app+0x3c>)
 8000d88:	f000 fc7c 	bl	8001684 <initUart>

	//타이머 시작
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <app+0x40>)
 8000d90:	f001 febe 	bl	8002b10 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim11);
 8000d94:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <app+0x44>)
 8000d96:	f001 fe07 	bl	80029a8 <HAL_TIM_Base_Start>
	initUltrasonic(&htim3);
 8000d9a:	480b      	ldr	r0, [pc, #44]	@ (8000dc8 <app+0x48>)
 8000d9c:	f000 fd22 	bl	80017e4 <initUltrasonic>

	while(1){
		uint8_t distance = getDistance();
 8000da0:	f000 fd32 	bl	8001808 <getDistance>
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
		printf("distance = %d\n", distance);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <app+0x4c>)
 8000dae:	f004 fa37 	bl	8005220 <iprintf>
		HAL_Delay(50);
 8000db2:	2032      	movs	r0, #50	@ 0x32
 8000db4:	f000 fdea 	bl	800198c <HAL_Delay>
	while(1){
 8000db8:	bf00      	nop
 8000dba:	e7f1      	b.n	8000da0 <app+0x20>
 8000dbc:	2000015c 	.word	0x2000015c
 8000dc0:	20000084 	.word	0x20000084
 8000dc4:	20000114 	.word	0x20000114
 8000dc8:	200000cc 	.word	0x200000cc
 8000dcc:	08005f10 	.word	0x08005f10

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f000 fd68 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f80e 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 f9c8 	bl	8001170 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000de0:	f000 f868 	bl	8000eb4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000de4:	f000 f906 	bl	8000ff4 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000de8:	f000 f974 	bl	80010d4 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000dec:	f000 f996 	bl	800111c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000df0:	f7ff ffc6 	bl	8000d80 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <main+0x24>

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	@ 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2230      	movs	r2, #48	@ 0x30
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 fa1c 	bl	8005244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b22      	ldr	r3, [pc, #136]	@ (8000eac <SystemClock_Config+0xb4>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	4a21      	ldr	r2, [pc, #132]	@ (8000eac <SystemClock_Config+0xb4>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <SystemClock_Config+0xb4>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <SystemClock_Config+0xb8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <SystemClock_Config+0xb8>)
 8000e42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <SystemClock_Config+0xb8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 f8f5 	bl	8002058 <HAL_RCC_OscConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e74:	f000 f9ae 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e78:	230f      	movs	r3, #15
 8000e7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 fb58 	bl	8002548 <HAL_RCC_ClockConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e9e:	f000 f999 	bl	80011d4 <Error_Handler>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3750      	adds	r7, #80	@ 0x50
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40007000 	.word	0x40007000

08000eb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b096      	sub	sp, #88	@ 0x58
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2220      	movs	r2, #32
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 f9a9 	bl	8005244 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000ef4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff0 <MX_TIM1_Init+0x13c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000efa:	220f      	movs	r2, #15
 8000efc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f04:	4b39      	ldr	r3, [pc, #228]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b37      	ldr	r3, [pc, #220]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f12:	4b36      	ldr	r3, [pc, #216]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b34      	ldr	r3, [pc, #208]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f1e:	4833      	ldr	r0, [pc, #204]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f20:	f001 fcf2 	bl	8002908 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f2a:	f000 f953 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f34:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482c      	ldr	r0, [pc, #176]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f3c:	f002 fa5a 	bl	80033f4 <HAL_TIM_ConfigClockSource>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f46:	f000 f945 	bl	80011d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f4a:	4828      	ldr	r0, [pc, #160]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f4c:	f001 fd86 	bl	8002a5c <HAL_TIM_PWM_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f56:	f000 f93d 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f66:	4619      	mov	r1, r3
 8000f68:	4820      	ldr	r0, [pc, #128]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f6a:	f002 ff6d 	bl	8003e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f74:	f000 f92e 	bl	80011d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f78:	2360      	movs	r3, #96	@ 0x60
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f84:	2300      	movs	r3, #0
 8000f86:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000f9e:	f002 f967 	bl	8003270 <HAL_TIM_PWM_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000fa8:	f000 f914 	bl	80011d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000fd0:	f002 ffa8 	bl	8003f24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000fda:	f000 f8fb 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fde:	4803      	ldr	r0, [pc, #12]	@ (8000fec <MX_TIM1_Init+0x138>)
 8000fe0:	f000 f9a2 	bl	8001328 <HAL_TIM_MspPostInit>

}
 8000fe4:	bf00      	nop
 8000fe6:	3758      	adds	r7, #88	@ 0x58
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000084 	.word	0x20000084
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800101e:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <MX_TIM3_Init+0xd8>)
 8001020:	4a2b      	ldr	r2, [pc, #172]	@ (80010d0 <MX_TIM3_Init+0xdc>)
 8001022:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001024:	4b29      	ldr	r3, [pc, #164]	@ (80010cc <MX_TIM3_Init+0xd8>)
 8001026:	220f      	movs	r2, #15
 8001028:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <MX_TIM3_Init+0xd8>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001030:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <MX_TIM3_Init+0xd8>)
 8001032:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001036:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <MX_TIM3_Init+0xd8>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <MX_TIM3_Init+0xd8>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001044:	4821      	ldr	r0, [pc, #132]	@ (80010cc <MX_TIM3_Init+0xd8>)
 8001046:	f001 fc5f 	bl	8002908 <HAL_TIM_Base_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001050:	f000 f8c0 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001058:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4619      	mov	r1, r3
 8001060:	481a      	ldr	r0, [pc, #104]	@ (80010cc <MX_TIM3_Init+0xd8>)
 8001062:	f002 f9c7 	bl	80033f4 <HAL_TIM_ConfigClockSource>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800106c:	f000 f8b2 	bl	80011d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001070:	4816      	ldr	r0, [pc, #88]	@ (80010cc <MX_TIM3_Init+0xd8>)
 8001072:	f001 fdfd 	bl	8002c70 <HAL_TIM_IC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 f8aa 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	480f      	ldr	r0, [pc, #60]	@ (80010cc <MX_TIM3_Init+0xd8>)
 8001090:	f002 feda 	bl	8003e48 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800109a:	f000 f89b 	bl	80011d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010a2:	2301      	movs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_TIM3_Init+0xd8>)
 80010b6:	f002 f83f 	bl	8003138 <HAL_TIM_IC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80010c0:	f000 f888 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	@ 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000cc 	.word	0x200000cc
 80010d0:	40000400 	.word	0x40000400

080010d4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <MX_TIM11_Init+0x40>)
 80010da:	4a0f      	ldr	r2, [pc, #60]	@ (8001118 <MX_TIM11_Init+0x44>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16-1;
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <MX_TIM11_Init+0x40>)
 80010e0:	220f      	movs	r2, #15
 80010e2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <MX_TIM11_Init+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <MX_TIM11_Init+0x40>)
 80010ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <MX_TIM11_Init+0x40>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_TIM11_Init+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_TIM11_Init+0x40>)
 8001100:	f001 fc02 	bl	8002908 <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800110a:	f000 f863 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000114 	.word	0x20000114
 8001118:	40014800 	.word	0x40014800

0800111c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <MX_USART2_UART_Init+0x50>)
 8001124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001154:	f002 ff4c 	bl	8003ff0 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800115e:	f000 f839 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000015c 	.word	0x2000015c
 800116c:	40004400 	.word	0x40004400

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <MX_GPIO_Init+0x5c>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <MX_GPIO_Init+0x5c>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6313      	str	r3, [r2, #48]	@ 0x30
 8001194:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <MX_GPIO_Init+0x5c>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <MX_GPIO_Init+0x60>)
 80011a6:	f000 ff3d 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 80011aa:	2320      	movs	r3, #32
 80011ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_GPIO_Init+0x60>)
 80011c0:	f000 fdac 	bl	8001d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <Error_Handler+0x8>

080011e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <HAL_MspInit+0x4c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a0f      	ldr	r2, [pc, #60]	@ (800122c <HAL_MspInit+0x4c>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <HAL_MspInit+0x4c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	4a08      	ldr	r2, [pc, #32]	@ (800122c <HAL_MspInit+0x4c>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	@ 0x40
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_MspInit+0x4c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a31      	ldr	r2, [pc, #196]	@ (8001314 <HAL_TIM_Base_MspInit+0xe4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10e      	bne.n	8001270 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	4a2f      	ldr	r2, [pc, #188]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6453      	str	r3, [r2, #68]	@ 0x44
 8001262:	4b2d      	ldr	r3, [pc, #180]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800126e:	e04c      	b.n	800130a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a29      	ldr	r2, [pc, #164]	@ (800131c <HAL_TIM_Base_MspInit+0xec>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d134      	bne.n	80012e4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a25      	ldr	r2, [pc, #148]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_Pin;
 80012b2:	2340      	movs	r3, #64	@ 0x40
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c2:	2302      	movs	r3, #2
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4814      	ldr	r0, [pc, #80]	@ (8001320 <HAL_TIM_Base_MspInit+0xf0>)
 80012ce:	f000 fd25 	bl	8001d1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	201d      	movs	r0, #29
 80012d8:	f000 fc57 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012dc:	201d      	movs	r0, #29
 80012de:	f000 fc70 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
}
 80012e2:	e012      	b.n	800130a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM11)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001324 <HAL_TIM_Base_MspInit+0xf4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10d      	bne.n	800130a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_TIM_Base_MspInit+0xe8>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	@ 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40010000 	.word	0x40010000
 8001318:	40023800 	.word	0x40023800
 800131c:	40000400 	.word	0x40000400
 8001320:	40020000 	.word	0x40020000
 8001324:	40014800 	.word	0x40014800

08001328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <HAL_TIM_MspPostInit+0x68>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d11e      	bne.n	8001388 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <HAL_TIM_MspPostInit+0x6c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <HAL_TIM_MspPostInit+0x6c>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <HAL_TIM_MspPostInit+0x6c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001366:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800136a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001378:	2301      	movs	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <HAL_TIM_MspPostInit+0x70>)
 8001384:	f000 fcca 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40010000 	.word	0x40010000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000

0800139c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001430 <HAL_UART_MspInit+0x94>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d133      	bne.n	8001426 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <HAL_UART_MspInit+0x98>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001434 <HAL_UART_MspInit+0x98>)
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_UART_MspInit+0x98>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_UART_MspInit+0x98>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <HAL_UART_MspInit+0x98>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <HAL_UART_MspInit+0x98>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013f6:	230c      	movs	r3, #12
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001406:	2307      	movs	r3, #7
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4809      	ldr	r0, [pc, #36]	@ (8001438 <HAL_UART_MspInit+0x9c>)
 8001412:	f000 fc83 	bl	8001d1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2026      	movs	r0, #38	@ 0x26
 800141c:	f000 fbb5 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001420:	2026      	movs	r0, #38	@ 0x26
 8001422:	f000 fbce 	bl	8001bc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	@ 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40004400 	.word	0x40004400
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <NMI_Handler+0x4>

08001444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <MemManage_Handler+0x4>

08001454 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <UsageFault_Handler+0x4>

08001464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f000 fa5b 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <TIM3_IRQHandler+0x10>)
 80014a2:	f001 fd59 	bl	8002f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000cc 	.word	0x200000cc

080014b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <USART2_IRQHandler+0x10>)
 80014b6:	f002 fe9b 	bl	80041f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000015c 	.word	0x2000015c

080014c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e00a      	b.n	80014ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d6:	f3af 8000 	nop.w
 80014da:	4601      	mov	r1, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	b2ca      	uxtb	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf0      	blt.n	80014d6 <_read+0x12>
  }

  return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001526:	605a      	str	r2, [r3, #4]
  return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f003 fe5c 	bl	8005254 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20020000 	.word	0x20020000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	200001a4 	.word	0x200001a4
 80015d0:	20000378 	.word	0x20000378

080015d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <_write>:
uint8_t rxCharacter;
uint8_t rxBuffer[rxBufferMax];//circle Buffer
int rxBufferReadIndex;//읽기 위치
int rxBufferWriteIndex;//쓰기 위치

int _write(int file, char* p, int len){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t *)p, len, 10);
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <_write+0x28>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	b29a      	uxth	r2, r3
 800160c:	230a      	movs	r3, #10
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	f002 fd3e 	bl	8004090 <HAL_UART_Transmit>
	return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200001a8 	.word	0x200001a8

08001624 <HAL_UART_RxCpltCallback>:


//수신 인터럽트(interrupt=event) 콜백(listner, isr)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	//수신된 문자 저장
	rxBuffer[rxBufferWriteIndex++]=rxCharacter;
 800162c:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <HAL_UART_RxCpltCallback+0x4c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	490f      	ldr	r1, [pc, #60]	@ (8001670 <HAL_UART_RxCpltCallback+0x4c>)
 8001634:	600a      	str	r2, [r1, #0]
 8001636:	4a0f      	ldr	r2, [pc, #60]	@ (8001674 <HAL_UART_RxCpltCallback+0x50>)
 8001638:	7811      	ldrb	r1, [r2, #0]
 800163a:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <HAL_UART_RxCpltCallback+0x54>)
 800163c:	54d1      	strb	r1, [r2, r3]
	//최대값 도달 시 처음으로
	rxBufferWriteIndex %=rxBufferMax;
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <HAL_UART_RxCpltCallback+0x4c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <HAL_UART_RxCpltCallback+0x58>)
 8001644:	fb83 1302 	smull	r1, r3, r3, r2
 8001648:	1159      	asrs	r1, r3, #5
 800164a:	17d3      	asrs	r3, r2, #31
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	2164      	movs	r1, #100	@ 0x64
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4a06      	ldr	r2, [pc, #24]	@ (8001670 <HAL_UART_RxCpltCallback+0x4c>)
 8001658:	6013      	str	r3, [r2, #0]
	//인터럽트 재 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_UART_RxCpltCallback+0x5c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2201      	movs	r2, #1
 8001660:	4904      	ldr	r1, [pc, #16]	@ (8001674 <HAL_UART_RxCpltCallback+0x50>)
 8001662:	4618      	mov	r0, r3
 8001664:	f002 fd9f 	bl	80041a6 <HAL_UART_Receive_IT>

}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000214 	.word	0x20000214
 8001674:	200001ac 	.word	0x200001ac
 8001678:	200001b0 	.word	0x200001b0
 800167c:	51eb851f 	.word	0x51eb851f
 8001680:	200001a8 	.word	0x200001a8

08001684 <initUart>:


// uart 장치 초기
void initUart(UART_HandleTypeDef *inHuart){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	//uart 장치 주소 백업
	myHuart = inHuart;
 800168c:	4a06      	ldr	r2, [pc, #24]	@ (80016a8 <initUart+0x24>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
	//인터럽트 셋팅
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <initUart+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	4904      	ldr	r1, [pc, #16]	@ (80016ac <initUart+0x28>)
 800169a:	4618      	mov	r0, r3
 800169c:	f002 fd83 	bl	80041a6 <HAL_UART_Receive_IT>

}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200001a8 	.word	0x200001a8
 80016ac:	200001ac 	.word	0x200001ac

080016b0 <HAL_TIM_IC_CaptureCallback>:
bool isFirstCapture;

TIM_HandleTypeDef *myHtim;

//tim3의 interrupt callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7f1b      	ldrb	r3, [r3, #28]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d17c      	bne.n	80017ba <HAL_TIM_IC_CaptureCallback+0x10a>
		if(isFirstCapture == true){
 80016c0:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01b      	beq.n	8001700 <HAL_TIM_IC_CaptureCallback+0x50>
			//IC_VAL1에 상승 엣지 시간 저장
			IC_VAL1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80016c8:	2100      	movs	r1, #0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f001 ff5a 	bl	8003584 <HAL_TIM_ReadCapturedValue>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80016d6:	801a      	strh	r2, [r3, #0]
			//하강 엣지 검출 설정
			isFirstCapture = false;
 80016d8:	4b3d      	ldr	r3, [pc, #244]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6a1a      	ldr	r2, [r3, #32]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 020a 	bic.w	r2, r2, #10
 80016ec:	621a      	str	r2, [r3, #32]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0202 	orr.w	r2, r2, #2
 80016fc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			//interrupt종료
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}
	}
};
 80016fe:	e05c      	b.n	80017ba <HAL_TIM_IC_CaptureCallback+0x10a>
			IC_VAL2  = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001700:	2100      	movs	r1, #0
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f001 ff3e 	bl	8003584 <HAL_TIM_ReadCapturedValue>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800170e:	801a      	strh	r2, [r3, #0]
			if(IC_VAL2>IC_VAL1){
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d908      	bls.n	800172e <HAL_TIM_IC_CaptureCallback+0x7e>
				difference = IC_VAL2 - IC_VAL1;
 800171c:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800171e:	881a      	ldrh	r2, [r3, #0]
 8001720:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	e009      	b.n	8001742 <HAL_TIM_IC_CaptureCallback+0x92>
				difference = (65535 - IC_VAL1) + IC_VAL2;
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001740:	801a      	strh	r2, [r3, #0]
			distance = (uint8_t)((float)difference * 0.034 /2);//s = t x 0.034/2
 8001742:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174e:	ee17 0a90 	vmov	r0, s15
 8001752:	f7fe fef9 	bl	8000548 <__aeabi_f2d>
 8001756:	a31c      	add	r3, pc, #112	@ (adr r3, 80017c8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff4c 	bl	80005f8 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001770:	f7ff f86c 	bl	800084c <__aeabi_ddiv>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff f94e 	bl	8000a1c <__aeabi_d2uiz>
 8001780:	4603      	mov	r3, r0
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001786:	701a      	strb	r2, [r3, #0]
			isFirstCapture = true;
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 020a 	bic.w	r2, r2, #10
 800179c:	621a      	str	r2, [r3, #32]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a12      	ldr	r2, [r2, #32]
 80017a8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0202 	bic.w	r2, r2, #2
 80017b8:	60da      	str	r2, [r3, #12]
};
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	b020c49c 	.word	0xb020c49c
 80017cc:	3fa16872 	.word	0x3fa16872
 80017d0:	2000021f 	.word	0x2000021f
 80017d4:	20000218 	.word	0x20000218
 80017d8:	2000021a 	.word	0x2000021a
 80017dc:	2000021c 	.word	0x2000021c
 80017e0:	2000021e 	.word	0x2000021e

080017e4 <initUltrasonic>:

void initUltrasonic(TIM_HandleTypeDef *inHtim){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	myHtim=inHtim;
 80017ec:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <initUltrasonic+0x20>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(inHtim, TIM_CHANNEL_1);
 80017f2:	2100      	movs	r1, #0
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f001 fa95 	bl	8002d24 <HAL_TIM_IC_Start_IT>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000220 	.word	0x20000220

08001808 <getDistance>:


uint8_t getDistance(){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	//10us 펄스 발생
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 1);
 800180c:	2201      	movs	r2, #1
 800180e:	2120      	movs	r1, #32
 8001810:	480d      	ldr	r0, [pc, #52]	@ (8001848 <getDistance+0x40>)
 8001812:	f000 fc07 	bl	8002024 <HAL_GPIO_WritePin>
	delay_us(10);
 8001816:	200a      	movs	r0, #10
 8001818:	f7ff fa98 	bl	8000d4c <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2120      	movs	r1, #32
 8001820:	4809      	ldr	r0, [pc, #36]	@ (8001848 <getDistance+0x40>)
 8001822:	f000 fbff 	bl	8002024 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(myHtim, TIM_IT_CC1);
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <getDistance+0x44>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	4b07      	ldr	r3, [pc, #28]	@ (800184c <getDistance+0x44>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0202 	orr.w	r2, r2, #2
 8001838:	60da      	str	r2, [r3, #12]
	HAL_Delay(66);
 800183a:	2042      	movs	r0, #66	@ 0x42
 800183c:	f000 f8a6 	bl	800198c <HAL_Delay>
	return distance;
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <getDistance+0x48>)
 8001842:	781b      	ldrb	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40020000 	.word	0x40020000
 800184c:	20000220 	.word	0x20000220
 8001850:	2000021e 	.word	0x2000021e

08001854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800188c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001858:	f7ff febc 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	@ (8001890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	@ (8001894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	@ (80018a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f003 fced 	bl	8005260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7ff faa3 	bl	8000dd0 <main>
  bx  lr    
 800188a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800188c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001898:	08005f7c 	.word	0x08005f7c
  ldr r2, =_sbss
 800189c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018a0:	20000374 	.word	0x20000374

080018a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ac:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <HAL_Init+0x40>)
 80018b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_Init+0x40>)
 80018be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <HAL_Init+0x40>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f94f 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	200f      	movs	r0, #15
 80018d8:	f000 f808 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff fc80 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f967 	bl	8001bde <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001928:	f000 f92f 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	@ (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000000 	.word	0x20000000
 8001944:	20000008 	.word	0x20000008
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	20000224 	.word	0x20000224

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000224 	.word	0x20000224

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4907      	ldr	r1, [pc, #28]	@ (8001a70 <__NVIC_EnableIRQ+0x38>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	@ (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	@ (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff29 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff3e 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff8e 	bl	8001ac8 <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff31 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffa2 	bl	8001b30 <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff feb6 	bl	8001974 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d008      	beq.n	8001c28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2280      	movs	r2, #128	@ 0x80
 8001c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e052      	b.n	8001cce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0216 	bic.w	r2, r2, #22
 8001c36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <HAL_DMA_Abort+0x62>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0208 	bic.w	r2, r2, #8
 8001c66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c78:	e013      	b.n	8001ca2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7a:	f7ff fe7b 	bl	8001974 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d90c      	bls.n	8001ca2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e015      	b.n	8001cce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e4      	bne.n	8001c7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb4:	223f      	movs	r2, #63	@ 0x3f
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2280      	movs	r2, #128	@ 0x80
 8001cee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e00c      	b.n	8001d0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e159      	b.n	8001fec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8148 	bne.w	8001fe6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a2 	beq.w	8001fe6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b57      	ldr	r3, [pc, #348]	@ (8002004 <HAL_GPIO_Init+0x2e8>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	4a56      	ldr	r2, [pc, #344]	@ (8002004 <HAL_GPIO_Init+0x2e8>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb2:	4b54      	ldr	r3, [pc, #336]	@ (8002004 <HAL_GPIO_Init+0x2e8>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ebe:	4a52      	ldr	r2, [pc, #328]	@ (8002008 <HAL_GPIO_Init+0x2ec>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a49      	ldr	r2, [pc, #292]	@ (800200c <HAL_GPIO_Init+0x2f0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_GPIO_Init+0x202>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a48      	ldr	r2, [pc, #288]	@ (8002010 <HAL_GPIO_Init+0x2f4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x1fe>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a47      	ldr	r2, [pc, #284]	@ (8002014 <HAL_GPIO_Init+0x2f8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x1fa>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a46      	ldr	r2, [pc, #280]	@ (8002018 <HAL_GPIO_Init+0x2fc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x1f6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a45      	ldr	r2, [pc, #276]	@ (800201c <HAL_GPIO_Init+0x300>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x1f2>
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	e008      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e004      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f30:	4935      	ldr	r1, [pc, #212]	@ (8002008 <HAL_GPIO_Init+0x2ec>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3e:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f62:	4a2f      	ldr	r2, [pc, #188]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f8c:	4a24      	ldr	r2, [pc, #144]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f92:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	f67f aea2 	bls.w	8001d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40013800 	.word	0x40013800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021000 	.word	0x40021000
 8002020:	40013c00 	.word	0x40013c00

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e267      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d075      	beq.n	8002162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002076:	4b88      	ldr	r3, [pc, #544]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d00c      	beq.n	800209c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002082:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800208a:	2b08      	cmp	r3, #8
 800208c:	d112      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208e:	4b82      	ldr	r3, [pc, #520]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800209a:	d10b      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	4b7e      	ldr	r3, [pc, #504]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d05b      	beq.n	8002160 <HAL_RCC_OscConfig+0x108>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d157      	bne.n	8002160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e242      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020bc:	d106      	bne.n	80020cc <HAL_RCC_OscConfig+0x74>
 80020be:	4b76      	ldr	r3, [pc, #472]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a75      	ldr	r2, [pc, #468]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e01d      	b.n	8002108 <HAL_RCC_OscConfig+0xb0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x98>
 80020d6:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6f      	ldr	r2, [pc, #444]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80020dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6c      	ldr	r2, [pc, #432]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0xb0>
 80020f0:	4b69      	ldr	r3, [pc, #420]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a68      	ldr	r2, [pc, #416]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80020f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a65      	ldr	r2, [pc, #404]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 8002102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d013      	beq.n	8002138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fc30 	bl	8001974 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7ff fc2c 	bl	8001974 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	@ 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e207      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b5b      	ldr	r3, [pc, #364]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0xc0>
 8002136:	e014      	b.n	8002162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fc1c 	bl	8001974 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff fc18 	bl	8001974 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	@ 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1f3      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002152:	4b51      	ldr	r3, [pc, #324]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0xe8>
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d063      	beq.n	8002236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800216e:	4b4a      	ldr	r3, [pc, #296]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00b      	beq.n	8002192 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217a:	4b47      	ldr	r3, [pc, #284]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002182:	2b08      	cmp	r3, #8
 8002184:	d11c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d116      	bne.n	80021c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_RCC_OscConfig+0x152>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e1c7      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4937      	ldr	r1, [pc, #220]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	e03a      	b.n	8002236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <HAL_RCC_OscConfig+0x244>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7ff fbd1 	bl	8001974 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d6:	f7ff fbcd 	bl	8001974 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e1a8      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b28      	ldr	r3, [pc, #160]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4925      	ldr	r1, [pc, #148]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
 8002208:	e015      	b.n	8002236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220a:	4b24      	ldr	r3, [pc, #144]	@ (800229c <HAL_RCC_OscConfig+0x244>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff fbb0 	bl	8001974 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002218:	f7ff fbac 	bl	8001974 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e187      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d036      	beq.n	80022b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_RCC_OscConfig+0x248>)
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff fb90 	bl	8001974 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002258:	f7ff fb8c 	bl	8001974 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e167      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <HAL_RCC_OscConfig+0x240>)
 800226c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x200>
 8002276:	e01b      	b.n	80022b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002278:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_RCC_OscConfig+0x248>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7ff fb79 	bl	8001974 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	e00e      	b.n	80022a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002286:	f7ff fb75 	bl	8001974 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d907      	bls.n	80022a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e150      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
 8002298:	40023800 	.word	0x40023800
 800229c:	42470000 	.word	0x42470000
 80022a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b88      	ldr	r3, [pc, #544]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ea      	bne.n	8002286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8097 	beq.w	80023ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b81      	ldr	r3, [pc, #516]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b7d      	ldr	r3, [pc, #500]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	4a7c      	ldr	r2, [pc, #496]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022de:	4b7a      	ldr	r3, [pc, #488]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b77      	ldr	r3, [pc, #476]	@ (80024cc <HAL_RCC_OscConfig+0x474>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d118      	bne.n	800232c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b74      	ldr	r3, [pc, #464]	@ (80024cc <HAL_RCC_OscConfig+0x474>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a73      	ldr	r2, [pc, #460]	@ (80024cc <HAL_RCC_OscConfig+0x474>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7ff fb35 	bl	8001974 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7ff fb31 	bl	8001974 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e10c      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b6a      	ldr	r3, [pc, #424]	@ (80024cc <HAL_RCC_OscConfig+0x474>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x2ea>
 8002334:	4b64      	ldr	r3, [pc, #400]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002338:	4a63      	ldr	r2, [pc, #396]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x324>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x30c>
 800234a:	4b5f      	ldr	r3, [pc, #380]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234e:	4a5e      	ldr	r2, [pc, #376]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6713      	str	r3, [r2, #112]	@ 0x70
 8002356:	4b5c      	ldr	r3, [pc, #368]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235a:	4a5b      	ldr	r2, [pc, #364]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6713      	str	r3, [r2, #112]	@ 0x70
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x324>
 8002364:	4b58      	ldr	r3, [pc, #352]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002368:	4a57      	ldr	r2, [pc, #348]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002370:	4b55      	ldr	r3, [pc, #340]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002374:	4a54      	ldr	r2, [pc, #336]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 8002376:	f023 0304 	bic.w	r3, r3, #4
 800237a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7ff faf6 	bl	8001974 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7ff faf2 	bl	8001974 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0cb      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	4b49      	ldr	r3, [pc, #292]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0ee      	beq.n	800238c <HAL_RCC_OscConfig+0x334>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7ff fae0 	bl	8001974 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7ff fadc 	bl	8001974 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0b5      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ce:	4b3e      	ldr	r3, [pc, #248]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ee      	bne.n	80023b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b39      	ldr	r3, [pc, #228]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	4a38      	ldr	r2, [pc, #224]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80a1 	beq.w	8002538 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f6:	4b34      	ldr	r3, [pc, #208]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d05c      	beq.n	80024bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d141      	bne.n	800248e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <HAL_RCC_OscConfig+0x478>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff fab0 	bl	8001974 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7ff faac 	bl	8001974 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e087      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	4b27      	ldr	r3, [pc, #156]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	3b01      	subs	r3, #1
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	061b      	lsls	r3, r3, #24
 800245a:	491b      	ldr	r1, [pc, #108]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002460:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_RCC_OscConfig+0x478>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7ff fa85 	bl	8001974 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7ff fa81 	bl	8001974 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e05c      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x416>
 800248c:	e054      	b.n	8002538 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <HAL_RCC_OscConfig+0x478>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff fa6e 	bl	8001974 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7ff fa6a 	bl	8001974 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e045      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_RCC_OscConfig+0x470>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x444>
 80024ba:	e03d      	b.n	8002538 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e038      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40007000 	.word	0x40007000
 80024d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <HAL_RCC_OscConfig+0x4ec>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d028      	beq.n	8002534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d121      	bne.n	8002534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d11a      	bne.n	8002534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002504:	4013      	ands	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800250a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800250c:	4293      	cmp	r3, r2
 800250e:	d111      	bne.n	8002534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	3b01      	subs	r3, #1
 800251e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800

08002548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0cc      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b68      	ldr	r3, [pc, #416]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d90c      	bls.n	8002584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b63      	ldr	r3, [pc, #396]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0b8      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259c:	4b59      	ldr	r3, [pc, #356]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a58      	ldr	r2, [pc, #352]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b4:	4b53      	ldr	r3, [pc, #332]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a52      	ldr	r2, [pc, #328]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b50      	ldr	r3, [pc, #320]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	494d      	ldr	r1, [pc, #308]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d044      	beq.n	8002668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b47      	ldr	r3, [pc, #284]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d119      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e07f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d003      	beq.n	8002606 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002602:	2b03      	cmp	r3, #3
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b3f      	ldr	r3, [pc, #252]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e06f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	4b3b      	ldr	r3, [pc, #236]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e067      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b37      	ldr	r3, [pc, #220]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4934      	ldr	r1, [pc, #208]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002638:	f7ff f99c 	bl	8001974 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7ff f998 	bl	8001974 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e04f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002668:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d20c      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e032      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4916      	ldr	r1, [pc, #88]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	490e      	ldr	r1, [pc, #56]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ce:	f000 f821 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	490a      	ldr	r1, [pc, #40]	@ (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	5ccb      	ldrb	r3, [r1, r3]
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	4a09      	ldr	r2, [pc, #36]	@ (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f8fc 	bl	80018ec <HAL_InitTick>

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023c00 	.word	0x40023c00
 8002704:	40023800 	.word	0x40023800
 8002708:	08005f20 	.word	0x08005f20
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004

08002714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002718:	b090      	sub	sp, #64	@ 0x40
 800271a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800272c:	4b59      	ldr	r3, [pc, #356]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x180>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b08      	cmp	r3, #8
 8002736:	d00d      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x40>
 8002738:	2b08      	cmp	r3, #8
 800273a:	f200 80a1 	bhi.w	8002880 <HAL_RCC_GetSysClockFreq+0x16c>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x34>
 8002742:	2b04      	cmp	r3, #4
 8002744:	d003      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x3a>
 8002746:	e09b      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x184>)
 800274a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800274c:	e09b      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800274e:	4b53      	ldr	r3, [pc, #332]	@ (800289c <HAL_RCC_GetSysClockFreq+0x188>)
 8002750:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002752:	e098      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002754:	4b4f      	ldr	r3, [pc, #316]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x180>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800275c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275e:	4b4d      	ldr	r3, [pc, #308]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x180>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d028      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276a:	4b4a      	ldr	r3, [pc, #296]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x180>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	099b      	lsrs	r3, r3, #6
 8002770:	2200      	movs	r2, #0
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	627a      	str	r2, [r7, #36]	@ 0x24
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800277c:	2100      	movs	r1, #0
 800277e:	4b47      	ldr	r3, [pc, #284]	@ (800289c <HAL_RCC_GetSysClockFreq+0x188>)
 8002780:	fb03 f201 	mul.w	r2, r3, r1
 8002784:	2300      	movs	r3, #0
 8002786:	fb00 f303 	mul.w	r3, r0, r3
 800278a:	4413      	add	r3, r2
 800278c:	4a43      	ldr	r2, [pc, #268]	@ (800289c <HAL_RCC_GetSysClockFreq+0x188>)
 800278e:	fba0 1202 	umull	r1, r2, r0, r2
 8002792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002794:	460a      	mov	r2, r1
 8002796:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800279a:	4413      	add	r3, r2
 800279c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800279e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a0:	2200      	movs	r2, #0
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	61fa      	str	r2, [r7, #28]
 80027a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80027ae:	f7fe f955 	bl	8000a5c <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4613      	mov	r3, r2
 80027b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027ba:	e053      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027bc:	4b35      	ldr	r3, [pc, #212]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x180>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	2200      	movs	r2, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	617a      	str	r2, [r7, #20]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027ce:	f04f 0b00 	mov.w	fp, #0
 80027d2:	4652      	mov	r2, sl
 80027d4:	465b      	mov	r3, fp
 80027d6:	f04f 0000 	mov.w	r0, #0
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	0159      	lsls	r1, r3, #5
 80027e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027e4:	0150      	lsls	r0, r2, #5
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	ebb2 080a 	subs.w	r8, r2, sl
 80027ee:	eb63 090b 	sbc.w	r9, r3, fp
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002802:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002806:	ebb2 0408 	subs.w	r4, r2, r8
 800280a:	eb63 0509 	sbc.w	r5, r3, r9
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	00eb      	lsls	r3, r5, #3
 8002818:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800281c:	00e2      	lsls	r2, r4, #3
 800281e:	4614      	mov	r4, r2
 8002820:	461d      	mov	r5, r3
 8002822:	eb14 030a 	adds.w	r3, r4, sl
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	eb45 030b 	adc.w	r3, r5, fp
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800283a:	4629      	mov	r1, r5
 800283c:	028b      	lsls	r3, r1, #10
 800283e:	4621      	mov	r1, r4
 8002840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002844:	4621      	mov	r1, r4
 8002846:	028a      	lsls	r2, r1, #10
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284e:	2200      	movs	r2, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	60fa      	str	r2, [r7, #12]
 8002854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002858:	f7fe f900 	bl	8000a5c <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x180>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002874:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800287e:	e002      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x184>)
 8002882:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002888:	4618      	mov	r0, r3
 800288a:	3740      	adds	r7, #64	@ 0x40
 800288c:	46bd      	mov	sp, r7
 800288e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	00f42400 	.word	0x00f42400
 800289c:	017d7840 	.word	0x017d7840

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b03      	ldr	r3, [pc, #12]	@ (80028b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000000 	.word	0x20000000

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028bc:	f7ff fff0 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0a9b      	lsrs	r3, r3, #10
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4903      	ldr	r1, [pc, #12]	@ (80028dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08005f30 	.word	0x08005f30

080028e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028e4:	f7ff ffdc 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0b5b      	lsrs	r3, r3, #13
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4903      	ldr	r1, [pc, #12]	@ (8002904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	08005f30 	.word	0x08005f30

08002908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e041      	b.n	800299e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fc7e 	bl	8001230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 fe88 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d001      	beq.n	80029c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e03c      	b.n	8002a3a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a48 <HAL_TIM_Base_Start+0xa0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d018      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029da:	d013      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a4c <HAL_TIM_Base_Start+0xa4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00e      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a19      	ldr	r2, [pc, #100]	@ (8002a50 <HAL_TIM_Base_Start+0xa8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a17      	ldr	r2, [pc, #92]	@ (8002a54 <HAL_TIM_Base_Start+0xac>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a16      	ldr	r2, [pc, #88]	@ (8002a58 <HAL_TIM_Base_Start+0xb0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d010      	beq.n	8002a38 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a26:	e007      	b.n	8002a38 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40000c00 	.word	0x40000c00
 8002a58:	40014000 	.word	0x40014000

08002a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e041      	b.n	8002af2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f839 	bl	8002afa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 fdde 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_TIM_PWM_Start+0x24>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e022      	b.n	8002b7a <HAL_TIM_PWM_Start+0x6a>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d109      	bne.n	8002b4e <HAL_TIM_PWM_Start+0x3e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	e015      	b.n	8002b7a <HAL_TIM_PWM_Start+0x6a>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d109      	bne.n	8002b68 <HAL_TIM_PWM_Start+0x58>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e008      	b.n	8002b7a <HAL_TIM_PWM_Start+0x6a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e068      	b.n	8002c54 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_PWM_Start+0x82>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b90:	e013      	b.n	8002bba <HAL_TIM_PWM_Start+0xaa>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d104      	bne.n	8002ba2 <HAL_TIM_PWM_Start+0x92>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba0:	e00b      	b.n	8002bba <HAL_TIM_PWM_Start+0xaa>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d104      	bne.n	8002bb2 <HAL_TIM_PWM_Start+0xa2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bb0:	e003      	b.n	8002bba <HAL_TIM_PWM_Start+0xaa>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 f91a 	bl	8003dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a23      	ldr	r2, [pc, #140]	@ (8002c5c <HAL_TIM_PWM_Start+0x14c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d107      	bne.n	8002be2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002be0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c5c <HAL_TIM_PWM_Start+0x14c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d018      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x10e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf4:	d013      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x10e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a19      	ldr	r2, [pc, #100]	@ (8002c60 <HAL_TIM_PWM_Start+0x150>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x10e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <HAL_TIM_PWM_Start+0x154>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x10e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <HAL_TIM_PWM_Start+0x158>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x10e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a14      	ldr	r2, [pc, #80]	@ (8002c6c <HAL_TIM_PWM_Start+0x15c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d111      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b06      	cmp	r3, #6
 8002c2e:	d010      	beq.n	8002c52 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c40:	e007      	b.n	8002c52 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800
 8002c68:	40000c00 	.word	0x40000c00
 8002c6c:	40014000 	.word	0x40014000

08002c70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e041      	b.n	8002d06 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f839 	bl	8002d0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f000 fcd4 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_IC_Start_IT+0x1e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	e013      	b.n	8002d6a <HAL_TIM_IC_Start_IT+0x46>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_IC_Start_IT+0x2e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e00b      	b.n	8002d6a <HAL_TIM_IC_Start_IT+0x46>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_IC_Start_IT+0x3e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	e003      	b.n	8002d6a <HAL_TIM_IC_Start_IT+0x46>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d104      	bne.n	8002d7c <HAL_TIM_IC_Start_IT+0x58>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e013      	b.n	8002da4 <HAL_TIM_IC_Start_IT+0x80>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d104      	bne.n	8002d8c <HAL_TIM_IC_Start_IT+0x68>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e00b      	b.n	8002da4 <HAL_TIM_IC_Start_IT+0x80>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d104      	bne.n	8002d9c <HAL_TIM_IC_Start_IT+0x78>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e003      	b.n	8002da4 <HAL_TIM_IC_Start_IT+0x80>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002da6:	7bbb      	ldrb	r3, [r7, #14]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d102      	bne.n	8002db2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dac:	7b7b      	ldrb	r3, [r7, #13]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d001      	beq.n	8002db6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0c2      	b.n	8002f3c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_IC_Start_IT+0xa2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc4:	e013      	b.n	8002dee <HAL_TIM_IC_Start_IT+0xca>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_IC_Start_IT+0xb2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd4:	e00b      	b.n	8002dee <HAL_TIM_IC_Start_IT+0xca>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_IC_Start_IT+0xc2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de4:	e003      	b.n	8002dee <HAL_TIM_IC_Start_IT+0xca>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_IC_Start_IT+0xda>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dfc:	e013      	b.n	8002e26 <HAL_TIM_IC_Start_IT+0x102>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_IC_Start_IT+0xea>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e0c:	e00b      	b.n	8002e26 <HAL_TIM_IC_Start_IT+0x102>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_IC_Start_IT+0xfa>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e1c:	e003      	b.n	8002e26 <HAL_TIM_IC_Start_IT+0x102>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b0c      	cmp	r3, #12
 8002e2a:	d841      	bhi.n	8002eb0 <HAL_TIM_IC_Start_IT+0x18c>
 8002e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e34 <HAL_TIM_IC_Start_IT+0x110>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e69 	.word	0x08002e69
 8002e38:	08002eb1 	.word	0x08002eb1
 8002e3c:	08002eb1 	.word	0x08002eb1
 8002e40:	08002eb1 	.word	0x08002eb1
 8002e44:	08002e7b 	.word	0x08002e7b
 8002e48:	08002eb1 	.word	0x08002eb1
 8002e4c:	08002eb1 	.word	0x08002eb1
 8002e50:	08002eb1 	.word	0x08002eb1
 8002e54:	08002e8d 	.word	0x08002e8d
 8002e58:	08002eb1 	.word	0x08002eb1
 8002e5c:	08002eb1 	.word	0x08002eb1
 8002e60:	08002eb1 	.word	0x08002eb1
 8002e64:	08002e9f 	.word	0x08002e9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0202 	orr.w	r2, r2, #2
 8002e76:	60da      	str	r2, [r3, #12]
      break;
 8002e78:	e01d      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0204 	orr.w	r2, r2, #4
 8002e88:	60da      	str	r2, [r3, #12]
      break;
 8002e8a:	e014      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0208 	orr.w	r2, r2, #8
 8002e9a:	60da      	str	r2, [r3, #12]
      break;
 8002e9c:	e00b      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0210 	orr.w	r2, r2, #16
 8002eac:	60da      	str	r2, [r3, #12]
      break;
 8002eae:	e002      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d13e      	bne.n	8002f3a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	6839      	ldr	r1, [r7, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 ff99 	bl	8003dfc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1d      	ldr	r2, [pc, #116]	@ (8002f44 <HAL_TIM_IC_Start_IT+0x220>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d018      	beq.n	8002f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002edc:	d013      	beq.n	8002f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a19      	ldr	r2, [pc, #100]	@ (8002f48 <HAL_TIM_IC_Start_IT+0x224>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a17      	ldr	r2, [pc, #92]	@ (8002f4c <HAL_TIM_IC_Start_IT+0x228>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	@ (8002f50 <HAL_TIM_IC_Start_IT+0x22c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_TIM_IC_Start_IT+0x1e2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <HAL_TIM_IC_Start_IT+0x230>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d111      	bne.n	8002f2a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d010      	beq.n	8002f3a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f28:	e007      	b.n	8002f3a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800
 8002f50:	40000c00 	.word	0x40000c00
 8002f54:	40014000 	.word	0x40014000

08002f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d020      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01b      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0202 	mvn.w	r2, #2
 8002f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe fb84 	bl	80016b0 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fb38 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fb3f 	bl	8003634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d020      	beq.n	8003008 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01b      	beq.n	8003008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0204 	mvn.w	r2, #4
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fe fb5e 	bl	80016b0 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fb12 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fb19 	bl	8003634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0208 	mvn.w	r2, #8
 8003024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2204      	movs	r2, #4
 800302a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe fb38 	bl	80016b0 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 faec 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 faf3 	bl	8003634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d020      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0210 	mvn.w	r2, #16
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2208      	movs	r2, #8
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fe fb12 	bl	80016b0 <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fac6 	bl	8003620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 facd 	bl	8003634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0201 	mvn.w	r2, #1
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 faa4 	bl	800360c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 ff7a 	bl	8003fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fa9e 	bl	8003648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0220 	mvn.w	r2, #32
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 ff4c 	bl	8003fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003152:	2302      	movs	r3, #2
 8003154:	e088      	b.n	8003268 <HAL_TIM_IC_ConfigChannel+0x130>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003174:	f000 fc8a 	bl	8003a8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 020c 	bic.w	r2, r2, #12
 8003186:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6999      	ldr	r1, [r3, #24]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	619a      	str	r2, [r3, #24]
 800319a:	e060      	b.n	800325e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d11c      	bne.n	80031dc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80031b2:	f000 fd02 	bl	8003bba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80031c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6999      	ldr	r1, [r3, #24]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	021a      	lsls	r2, r3, #8
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	619a      	str	r2, [r3, #24]
 80031da:	e040      	b.n	800325e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11b      	bne.n	800321a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031f2:	f000 fd4f 	bl	8003c94 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 020c 	bic.w	r2, r2, #12
 8003204:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69d9      	ldr	r1, [r3, #28]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	61da      	str	r2, [r3, #28]
 8003218:	e021      	b.n	800325e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d11c      	bne.n	800325a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003230:	f000 fd6c 	bl	8003d0c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003242:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69d9      	ldr	r1, [r3, #28]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	021a      	lsls	r2, r3, #8
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	61da      	str	r2, [r3, #28]
 8003258:	e001      	b.n	800325e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800328a:	2302      	movs	r3, #2
 800328c:	e0ae      	b.n	80033ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	f200 809f 	bhi.w	80033dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800329e:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032d9 	.word	0x080032d9
 80032a8:	080033dd 	.word	0x080033dd
 80032ac:	080033dd 	.word	0x080033dd
 80032b0:	080033dd 	.word	0x080033dd
 80032b4:	08003319 	.word	0x08003319
 80032b8:	080033dd 	.word	0x080033dd
 80032bc:	080033dd 	.word	0x080033dd
 80032c0:	080033dd 	.word	0x080033dd
 80032c4:	0800335b 	.word	0x0800335b
 80032c8:	080033dd 	.word	0x080033dd
 80032cc:	080033dd 	.word	0x080033dd
 80032d0:	080033dd 	.word	0x080033dd
 80032d4:	0800339b 	.word	0x0800339b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fa48 	bl	8003774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6999      	ldr	r1, [r3, #24]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	619a      	str	r2, [r3, #24]
      break;
 8003316:	e064      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fa8e 	bl	8003840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6999      	ldr	r1, [r3, #24]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	021a      	lsls	r2, r3, #8
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	619a      	str	r2, [r3, #24]
      break;
 8003358:	e043      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fad9 	bl	8003918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0208 	orr.w	r2, r2, #8
 8003374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0204 	bic.w	r2, r2, #4
 8003384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	61da      	str	r2, [r3, #28]
      break;
 8003398:	e023      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fb23 	bl	80039ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69d9      	ldr	r1, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	021a      	lsls	r2, r3, #8
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	61da      	str	r2, [r3, #28]
      break;
 80033da:	e002      	b.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	75fb      	strb	r3, [r7, #23]
      break;
 80033e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0x1c>
 800340c:	2302      	movs	r3, #2
 800340e:	e0b4      	b.n	800357a <HAL_TIM_ConfigClockSource+0x186>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800342e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003448:	d03e      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0xd4>
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344e:	f200 8087 	bhi.w	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003456:	f000 8086 	beq.w	8003566 <HAL_TIM_ConfigClockSource+0x172>
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800345e:	d87f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b70      	cmp	r3, #112	@ 0x70
 8003462:	d01a      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xa6>
 8003464:	2b70      	cmp	r3, #112	@ 0x70
 8003466:	d87b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b60      	cmp	r3, #96	@ 0x60
 800346a:	d050      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x11a>
 800346c:	2b60      	cmp	r3, #96	@ 0x60
 800346e:	d877      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b50      	cmp	r3, #80	@ 0x50
 8003472:	d03c      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xfa>
 8003474:	2b50      	cmp	r3, #80	@ 0x50
 8003476:	d873      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b40      	cmp	r3, #64	@ 0x40
 800347a:	d058      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x13a>
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d86f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b30      	cmp	r3, #48	@ 0x30
 8003482:	d064      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003484:	2b30      	cmp	r3, #48	@ 0x30
 8003486:	d86b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d060      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d867      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05c      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003494:	2b10      	cmp	r3, #16
 8003496:	d05a      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003498:	e062      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034aa:	f000 fc87 	bl	8003dbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
      break;
 80034c6:	e04f      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034d8:	f000 fc70 	bl	8003dbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034ea:	609a      	str	r2, [r3, #8]
      break;
 80034ec:	e03c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fb2e 	bl	8003b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2150      	movs	r1, #80	@ 0x50
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fc3d 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 800350c:	e02c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800351a:	461a      	mov	r2, r3
 800351c:	f000 fb8a 	bl	8003c34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2160      	movs	r1, #96	@ 0x60
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fc2d 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 800352c:	e01c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353a:	461a      	mov	r2, r3
 800353c:	f000 fb0e 	bl	8003b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2140      	movs	r1, #64	@ 0x40
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fc1d 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 800354c:	e00c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 fc14 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 800355e:	e003      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	e000      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d831      	bhi.n	80035fc <HAL_TIM_ReadCapturedValue+0x78>
 8003598:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035d5 	.word	0x080035d5
 80035a4:	080035fd 	.word	0x080035fd
 80035a8:	080035fd 	.word	0x080035fd
 80035ac:	080035fd 	.word	0x080035fd
 80035b0:	080035df 	.word	0x080035df
 80035b4:	080035fd 	.word	0x080035fd
 80035b8:	080035fd 	.word	0x080035fd
 80035bc:	080035fd 	.word	0x080035fd
 80035c0:	080035e9 	.word	0x080035e9
 80035c4:	080035fd 	.word	0x080035fd
 80035c8:	080035fd 	.word	0x080035fd
 80035cc:	080035fd 	.word	0x080035fd
 80035d0:	080035f3 	.word	0x080035f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035da:	60fb      	str	r3, [r7, #12]

      break;
 80035dc:	e00f      	b.n	80035fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	60fb      	str	r3, [r7, #12]

      break;
 80035e6:	e00a      	b.n	80035fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ee:	60fb      	str	r3, [r7, #12]

      break;
 80035f0:	e005      	b.n	80035fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	60fb      	str	r3, [r7, #12]

      break;
 80035fa:	e000      	b.n	80035fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80035fc:	bf00      	nop
  }

  return tmpreg;
 80035fe:	68fb      	ldr	r3, [r7, #12]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3a      	ldr	r2, [pc, #232]	@ (8003758 <TIM_Base_SetConfig+0xfc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00f      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367a:	d00b      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a37      	ldr	r2, [pc, #220]	@ (800375c <TIM_Base_SetConfig+0x100>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a36      	ldr	r2, [pc, #216]	@ (8003760 <TIM_Base_SetConfig+0x104>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a35      	ldr	r2, [pc, #212]	@ (8003764 <TIM_Base_SetConfig+0x108>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d108      	bne.n	80036a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003758 <TIM_Base_SetConfig+0xfc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01b      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b4:	d017      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a28      	ldr	r2, [pc, #160]	@ (800375c <TIM_Base_SetConfig+0x100>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a27      	ldr	r2, [pc, #156]	@ (8003760 <TIM_Base_SetConfig+0x104>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00f      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a26      	ldr	r2, [pc, #152]	@ (8003764 <TIM_Base_SetConfig+0x108>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a25      	ldr	r2, [pc, #148]	@ (8003768 <TIM_Base_SetConfig+0x10c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a24      	ldr	r2, [pc, #144]	@ (800376c <TIM_Base_SetConfig+0x110>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a23      	ldr	r2, [pc, #140]	@ (8003770 <TIM_Base_SetConfig+0x114>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d108      	bne.n	80036f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a0e      	ldr	r2, [pc, #56]	@ (8003758 <TIM_Base_SetConfig+0xfc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	611a      	str	r2, [r3, #16]
  }
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40014000 	.word	0x40014000
 800376c:	40014400 	.word	0x40014400
 8003770:	40014800 	.word	0x40014800

08003774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f023 0201 	bic.w	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	@ (800383c <TIM_OC1_SetConfig+0xc8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10c      	bne.n	80037ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0308 	bic.w	r3, r3, #8
 80037d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a13      	ldr	r2, [pc, #76]	@ (800383c <TIM_OC1_SetConfig+0xc8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d111      	bne.n	8003816 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40010000 	.word	0x40010000

08003840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f023 0210 	bic.w	r2, r3, #16
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0320 	bic.w	r3, r3, #32
 800388a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a1e      	ldr	r2, [pc, #120]	@ (8003914 <TIM_OC2_SetConfig+0xd4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10d      	bne.n	80038bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <TIM_OC2_SetConfig+0xd4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d113      	bne.n	80038ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000

08003918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <TIM_OC3_SetConfig+0xd0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10d      	bne.n	8003992 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800397c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a14      	ldr	r2, [pc, #80]	@ (80039e8 <TIM_OC3_SetConfig+0xd0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d113      	bne.n	80039c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40010000 	.word	0x40010000

080039ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a10      	ldr	r2, [pc, #64]	@ (8003a88 <TIM_OC4_SetConfig+0x9c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000

08003a8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f023 0201 	bic.w	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a24      	ldr	r2, [pc, #144]	@ (8003b48 <TIM_TI1_SetConfig+0xbc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac0:	d00f      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a21      	ldr	r2, [pc, #132]	@ (8003b4c <TIM_TI1_SetConfig+0xc0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a20      	ldr	r2, [pc, #128]	@ (8003b50 <TIM_TI1_SetConfig+0xc4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b54 <TIM_TI1_SetConfig+0xc8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <TIM_TI1_SetConfig+0x56>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b58 <TIM_TI1_SetConfig+0xcc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <TIM_TI1_SetConfig+0x5a>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <TIM_TI1_SetConfig+0x5c>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e003      	b.n	8003b06 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f023 030a 	bic.w	r3, r3, #10
 8003b20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 030a 	and.w	r3, r3, #10
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40000400 	.word	0x40000400
 8003b50:	40000800 	.word	0x40000800
 8003b54:	40000c00 	.word	0x40000c00
 8003b58:	40014000 	.word	0x40014000

08003b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0201 	bic.w	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 030a 	bic.w	r3, r3, #10
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b087      	sub	sp, #28
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0210 	bic.w	r2, r3, #16
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	031b      	lsls	r3, r3, #12
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0210 	bic.w	r2, r3, #16
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	031b      	lsls	r3, r3, #12
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f023 0303 	bic.w	r3, r3, #3
 8003cc0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	031b      	lsls	r3, r3, #12
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	031b      	lsls	r3, r3, #12
 8003d64:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f043 0307 	orr.w	r3, r3, #7
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	021a      	lsls	r2, r3, #8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	609a      	str	r2, [r3, #8]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2201      	movs	r2, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1a      	ldr	r2, [r3, #32]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e050      	b.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d018      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eac:	d013      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	@ (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a15      	ldr	r2, [pc, #84]	@ (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a13      	ldr	r2, [pc, #76]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40014000 	.word	0x40014000

08003f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e03d      	b.n	8003fbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e042      	b.n	8004088 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd f9c0 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	@ 0x24
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fdbd 	bl	8004bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	@ 0x28
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d175      	bne.n	800419c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_UART_Transmit+0x2c>
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e06e      	b.n	800419e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2221      	movs	r2, #33	@ 0x21
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ce:	f7fd fc51 	bl	8001974 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	88fa      	ldrh	r2, [r7, #6]
 80040de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e8:	d108      	bne.n	80040fc <HAL_UART_Transmit+0x6c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e003      	b.n	8004104 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004104:	e02e      	b.n	8004164 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	2180      	movs	r1, #128	@ 0x80
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fb1f 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e03a      	b.n	800419e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	3302      	adds	r3, #2
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	e007      	b.n	8004156 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1cb      	bne.n	8004106 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	2140      	movs	r1, #64	@ 0x40
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 faeb 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e006      	b.n	800419e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d112      	bne.n	80041e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_UART_Receive_IT+0x26>
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e00b      	b.n	80041e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	461a      	mov	r2, r3
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fb12 	bl	8004806 <UART_Start_Receive_IT>
 80041e2:	4603      	mov	r3, r0
 80041e4:	e000      	b.n	80041e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
  }
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b0ba      	sub	sp, #232	@ 0xe8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004216:	2300      	movs	r3, #0
 8004218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800421c:	2300      	movs	r3, #0
 800421e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800422e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_UART_IRQHandler+0x66>
 8004242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fbf2 	bl	8004a38 <UART_Receive_IT>
      return;
 8004254:	e25b      	b.n	800470e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80de 	beq.w	800441c <HAL_UART_IRQHandler+0x22c>
 8004260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004270:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80d1 	beq.w	800441c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800427a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_UART_IRQHandler+0xae>
 8004286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800428a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004296:	f043 0201 	orr.w	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800429e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00b      	beq.n	80042c2 <HAL_UART_IRQHandler+0xd2>
 80042aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f043 0202 	orr.w	r2, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_UART_IRQHandler+0xf6>
 80042ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	f043 0204 	orr.w	r2, r3, #4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d011      	beq.n	8004316 <HAL_UART_IRQHandler+0x126>
 80042f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d105      	bne.n	800430a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	f043 0208 	orr.w	r2, r3, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 81f2 	beq.w	8004704 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_UART_IRQHandler+0x14e>
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fb7d 	bl	8004a38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004348:	2b40      	cmp	r3, #64	@ 0x40
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_UART_IRQHandler+0x17a>
 8004362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d04f      	beq.n	800440a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa85 	bl	800487a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437a:	2b40      	cmp	r3, #64	@ 0x40
 800437c:	d141      	bne.n	8004402 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3314      	adds	r3, #20
 8004384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800439c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1d9      	bne.n	800437e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d013      	beq.n	80043fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d6:	4a7e      	ldr	r2, [pc, #504]	@ (80045d0 <HAL_UART_IRQHandler+0x3e0>)
 80043d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd fc79 	bl	8001cd6 <HAL_DMA_Abort_IT>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d016      	beq.n	8004418 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043f4:	4610      	mov	r0, r2
 80043f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f8:	e00e      	b.n	8004418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f994 	bl	8004728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	e00a      	b.n	8004418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f990 	bl	8004728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	e006      	b.n	8004418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f98c 	bl	8004728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004416:	e175      	b.n	8004704 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	bf00      	nop
    return;
 800441a:	e173      	b.n	8004704 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	2b01      	cmp	r3, #1
 8004422:	f040 814f 	bne.w	80046c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8148 	beq.w	80046c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8141 	beq.w	80046c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004462:	2b40      	cmp	r3, #64	@ 0x40
 8004464:	f040 80b6 	bne.w	80045d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004474:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8145 	beq.w	8004708 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004486:	429a      	cmp	r2, r3
 8004488:	f080 813e 	bcs.w	8004708 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004492:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449e:	f000 8088 	beq.w	80045b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	330c      	adds	r3, #12
 80044a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1d9      	bne.n	80044a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3314      	adds	r3, #20
 800450e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004512:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004516:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800451a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e1      	bne.n	80044ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3314      	adds	r3, #20
 8004530:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800453a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800453c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3314      	adds	r3, #20
 800454a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800454e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004550:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004554:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800455c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e3      	bne.n	800452a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004582:	f023 0310 	bic.w	r3, r3, #16
 8004586:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004594:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004596:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800459a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e3      	bne.n	8004570 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fd fb22 	bl	8001bf6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f8b7 	bl	800473c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045ce:	e09b      	b.n	8004708 <HAL_UART_IRQHandler+0x518>
 80045d0:	08004941 	.word	0x08004941
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 808e 	beq.w	800470c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8089 	beq.w	800470c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	330c      	adds	r3, #12
 8004600:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800460a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004610:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800461e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004620:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004624:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800462c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1e3      	bne.n	80045fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3314      	adds	r3, #20
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	623b      	str	r3, [r7, #32]
   return(result);
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3314      	adds	r3, #20
 8004652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004656:	633a      	str	r2, [r7, #48]	@ 0x30
 8004658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800465c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e3      	bne.n	8004632 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	60fb      	str	r3, [r7, #12]
   return(result);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0310 	bic.w	r3, r3, #16
 800468e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800469c:	61fa      	str	r2, [r7, #28]
 800469e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	69b9      	ldr	r1, [r7, #24]
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	617b      	str	r3, [r7, #20]
   return(result);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e3      	bne.n	8004678 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046ba:	4619      	mov	r1, r3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f83d 	bl	800473c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c2:	e023      	b.n	800470c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <HAL_UART_IRQHandler+0x4f4>
 80046d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f943 	bl	8004968 <UART_Transmit_IT>
    return;
 80046e2:	e014      	b.n	800470e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00e      	beq.n	800470e <HAL_UART_IRQHandler+0x51e>
 80046f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f983 	bl	8004a08 <UART_EndTransmit_IT>
    return;
 8004702:	e004      	b.n	800470e <HAL_UART_IRQHandler+0x51e>
    return;
 8004704:	bf00      	nop
 8004706:	e002      	b.n	800470e <HAL_UART_IRQHandler+0x51e>
      return;
 8004708:	bf00      	nop
 800470a:	e000      	b.n	800470e <HAL_UART_IRQHandler+0x51e>
      return;
 800470c:	bf00      	nop
  }
}
 800470e:	37e8      	adds	r7, #232	@ 0xe8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004764:	e03b      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800476c:	d037      	beq.n	80047de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476e:	f7fd f901 	bl	8001974 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	6a3a      	ldr	r2, [r7, #32]
 800477a:	429a      	cmp	r2, r3
 800477c:	d302      	bcc.n	8004784 <UART_WaitOnFlagUntilTimeout+0x30>
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e03a      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d023      	beq.n	80047de <UART_WaitOnFlagUntilTimeout+0x8a>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b80      	cmp	r3, #128	@ 0x80
 800479a:	d020      	beq.n	80047de <UART_WaitOnFlagUntilTimeout+0x8a>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b40      	cmp	r3, #64	@ 0x40
 80047a0:	d01d      	beq.n	80047de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d116      	bne.n	80047de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f857 	bl	800487a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2208      	movs	r2, #8
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e00f      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4013      	ands	r3, r2
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	bf0c      	ite	eq
 80047ee:	2301      	moveq	r3, #1
 80047f0:	2300      	movne	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d0b4      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	4613      	mov	r3, r2
 8004812:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	88fa      	ldrh	r2, [r7, #6]
 800481e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2222      	movs	r2, #34	@ 0x22
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800484a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0220 	orr.w	r2, r2, #32
 800486a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800487a:	b480      	push	{r7}
 800487c:	b095      	sub	sp, #84	@ 0x54
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80048a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e5      	bne.n	8004882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3314      	adds	r3, #20
 80048bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3314      	adds	r3, #20
 80048d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e5      	bne.n	80048b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d119      	bne.n	8004926 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	60bb      	str	r3, [r7, #8]
   return(result);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f023 0310 	bic.w	r3, r3, #16
 8004908:	647b      	str	r3, [r7, #68]	@ 0x44
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004912:	61ba      	str	r2, [r7, #24]
 8004914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6979      	ldr	r1, [r7, #20]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	613b      	str	r3, [r7, #16]
   return(result);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e5      	bne.n	80048f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004934:	bf00      	nop
 8004936:	3754      	adds	r7, #84	@ 0x54
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7ff fee4 	bl	8004728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b21      	cmp	r3, #33	@ 0x21
 800497a:	d13e      	bne.n	80049fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004984:	d114      	bne.n	80049b0 <UART_Transmit_IT+0x48>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d110      	bne.n	80049b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	1c9a      	adds	r2, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	621a      	str	r2, [r3, #32]
 80049ae:	e008      	b.n	80049c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	1c59      	adds	r1, r3, #1
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6211      	str	r1, [r2, #32]
 80049ba:	781a      	ldrb	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4619      	mov	r1, r3
 80049d0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10f      	bne.n	80049f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e000      	b.n	80049fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
  }
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fe73 	bl	8004714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08c      	sub	sp, #48	@ 0x30
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b22      	cmp	r3, #34	@ 0x22
 8004a4a:	f040 80ae 	bne.w	8004baa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a56:	d117      	bne.n	8004a88 <UART_Receive_IT+0x50>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d113      	bne.n	8004a88 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a86:	e026      	b.n	8004ad6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9a:	d007      	beq.n	8004aac <UART_Receive_IT+0x74>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <UART_Receive_IT+0x82>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e008      	b.n	8004acc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d15d      	bne.n	8004ba6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0220 	bic.w	r2, r2, #32
 8004af8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d135      	bne.n	8004b9c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	613b      	str	r3, [r7, #16]
   return(result);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f023 0310 	bic.w	r3, r3, #16
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	330c      	adds	r3, #12
 8004b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b56:	623a      	str	r2, [r7, #32]
 8004b58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	69f9      	ldr	r1, [r7, #28]
 8004b5c:	6a3a      	ldr	r2, [r7, #32]
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e5      	bne.n	8004b36 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d10a      	bne.n	8004b8e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b92:	4619      	mov	r1, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fdd1 	bl	800473c <HAL_UARTEx_RxEventCallback>
 8004b9a:	e002      	b.n	8004ba2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fc fd41 	bl	8001624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e002      	b.n	8004bac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e000      	b.n	8004bac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004baa:	2302      	movs	r3, #2
  }
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3730      	adds	r7, #48	@ 0x30
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb8:	b0c0      	sub	sp, #256	@ 0x100
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd0:	68d9      	ldr	r1, [r3, #12]
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	ea40 0301 	orr.w	r3, r0, r1
 8004bdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c0c:	f021 010c 	bic.w	r1, r1, #12
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2e:	6999      	ldr	r1, [r3, #24]
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	ea40 0301 	orr.w	r3, r0, r1
 8004c3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b8f      	ldr	r3, [pc, #572]	@ (8004e80 <UART_SetConfig+0x2cc>)
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d005      	beq.n	8004c54 <UART_SetConfig+0xa0>
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8004e84 <UART_SetConfig+0x2d0>)
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d104      	bne.n	8004c5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c54:	f7fd fe44 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8004c58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c5c:	e003      	b.n	8004c66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c5e:	f7fd fe2b 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8004c62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c70:	f040 810c 	bne.w	8004e8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	1891      	adds	r1, r2, r2
 8004c8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c8e:	415b      	adcs	r3, r3
 8004c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c96:	4621      	mov	r1, r4
 8004c98:	eb12 0801 	adds.w	r8, r2, r1
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	eb43 0901 	adc.w	r9, r3, r1
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cb6:	4690      	mov	r8, r2
 8004cb8:	4699      	mov	r9, r3
 8004cba:	4623      	mov	r3, r4
 8004cbc:	eb18 0303 	adds.w	r3, r8, r3
 8004cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	eb49 0303 	adc.w	r3, r9, r3
 8004cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	18db      	adds	r3, r3, r3
 8004ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ce8:	4613      	mov	r3, r2
 8004cea:	eb42 0303 	adc.w	r3, r2, r3
 8004cee:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cf8:	f7fb feb0 	bl	8000a5c <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4b61      	ldr	r3, [pc, #388]	@ (8004e88 <UART_SetConfig+0x2d4>)
 8004d02:	fba3 2302 	umull	r2, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	011c      	lsls	r4, r3, #4
 8004d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	1891      	adds	r1, r2, r2
 8004d22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d24:	415b      	adcs	r3, r3
 8004d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d32:	4649      	mov	r1, r9
 8004d34:	eb43 0b01 	adc.w	fp, r3, r1
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d4c:	4692      	mov	sl, r2
 8004d4e:	469b      	mov	fp, r3
 8004d50:	4643      	mov	r3, r8
 8004d52:	eb1a 0303 	adds.w	r3, sl, r3
 8004d56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	18db      	adds	r3, r3, r3
 8004d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d7e:	4613      	mov	r3, r2
 8004d80:	eb42 0303 	adc.w	r3, r2, r3
 8004d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d8e:	f7fb fe65 	bl	8000a5c <__aeabi_uldivmod>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	4b3b      	ldr	r3, [pc, #236]	@ (8004e88 <UART_SetConfig+0x2d4>)
 8004d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2264      	movs	r2, #100	@ 0x64
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	1acb      	subs	r3, r1, r3
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dae:	4b36      	ldr	r3, [pc, #216]	@ (8004e88 <UART_SetConfig+0x2d4>)
 8004db0:	fba3 2302 	umull	r2, r3, r3, r2
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004dbc:	441c      	add	r4, r3
 8004dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004dd0:	4642      	mov	r2, r8
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	1891      	adds	r1, r2, r2
 8004dd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dd8:	415b      	adcs	r3, r3
 8004dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004de0:	4641      	mov	r1, r8
 8004de2:	1851      	adds	r1, r2, r1
 8004de4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004de6:	4649      	mov	r1, r9
 8004de8:	414b      	adcs	r3, r1
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004df8:	4659      	mov	r1, fp
 8004dfa:	00cb      	lsls	r3, r1, #3
 8004dfc:	4651      	mov	r1, sl
 8004dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e02:	4651      	mov	r1, sl
 8004e04:	00ca      	lsls	r2, r1, #3
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e14:	464b      	mov	r3, r9
 8004e16:	460a      	mov	r2, r1
 8004e18:	eb42 0303 	adc.w	r3, r2, r3
 8004e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e34:	460b      	mov	r3, r1
 8004e36:	18db      	adds	r3, r3, r3
 8004e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	eb42 0303 	adc.w	r3, r2, r3
 8004e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e4a:	f7fb fe07 	bl	8000a5c <__aeabi_uldivmod>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <UART_SetConfig+0x2d4>)
 8004e54:	fba3 1302 	umull	r1, r3, r3, r2
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	2164      	movs	r1, #100	@ 0x64
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	3332      	adds	r3, #50	@ 0x32
 8004e66:	4a08      	ldr	r2, [pc, #32]	@ (8004e88 <UART_SetConfig+0x2d4>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	f003 0207 	and.w	r2, r3, #7
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4422      	add	r2, r4
 8004e7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e7c:	e106      	b.n	800508c <UART_SetConfig+0x4d8>
 8004e7e:	bf00      	nop
 8004e80:	40011000 	.word	0x40011000
 8004e84:	40011400 	.word	0x40011400
 8004e88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	1891      	adds	r1, r2, r2
 8004ea4:	6239      	str	r1, [r7, #32]
 8004ea6:	415b      	adcs	r3, r3
 8004ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eae:	4641      	mov	r1, r8
 8004eb0:	1854      	adds	r4, r2, r1
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	eb43 0501 	adc.w	r5, r3, r1
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	00eb      	lsls	r3, r5, #3
 8004ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ec6:	00e2      	lsls	r2, r4, #3
 8004ec8:	4614      	mov	r4, r2
 8004eca:	461d      	mov	r5, r3
 8004ecc:	4643      	mov	r3, r8
 8004ece:	18e3      	adds	r3, r4, r3
 8004ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	eb45 0303 	adc.w	r3, r5, r3
 8004eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004efa:	4629      	mov	r1, r5
 8004efc:	008b      	lsls	r3, r1, #2
 8004efe:	4621      	mov	r1, r4
 8004f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f04:	4621      	mov	r1, r4
 8004f06:	008a      	lsls	r2, r1, #2
 8004f08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f0c:	f7fb fda6 	bl	8000a5c <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4b60      	ldr	r3, [pc, #384]	@ (8005098 <UART_SetConfig+0x4e4>)
 8004f16:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	011c      	lsls	r4, r3, #4
 8004f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f30:	4642      	mov	r2, r8
 8004f32:	464b      	mov	r3, r9
 8004f34:	1891      	adds	r1, r2, r2
 8004f36:	61b9      	str	r1, [r7, #24]
 8004f38:	415b      	adcs	r3, r3
 8004f3a:	61fb      	str	r3, [r7, #28]
 8004f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f40:	4641      	mov	r1, r8
 8004f42:	1851      	adds	r1, r2, r1
 8004f44:	6139      	str	r1, [r7, #16]
 8004f46:	4649      	mov	r1, r9
 8004f48:	414b      	adcs	r3, r1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f58:	4659      	mov	r1, fp
 8004f5a:	00cb      	lsls	r3, r1, #3
 8004f5c:	4651      	mov	r1, sl
 8004f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f62:	4651      	mov	r1, sl
 8004f64:	00ca      	lsls	r2, r1, #3
 8004f66:	4610      	mov	r0, r2
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	189b      	adds	r3, r3, r2
 8004f70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f74:	464b      	mov	r3, r9
 8004f76:	460a      	mov	r2, r1
 8004f78:	eb42 0303 	adc.w	r3, r2, r3
 8004f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f98:	4649      	mov	r1, r9
 8004f9a:	008b      	lsls	r3, r1, #2
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa2:	4641      	mov	r1, r8
 8004fa4:	008a      	lsls	r2, r1, #2
 8004fa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004faa:	f7fb fd57 	bl	8000a5c <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4b38      	ldr	r3, [pc, #224]	@ (8005098 <UART_SetConfig+0x4e4>)
 8004fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2264      	movs	r2, #100	@ 0x64
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	1acb      	subs	r3, r1, r3
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	3332      	adds	r3, #50	@ 0x32
 8004fc8:	4a33      	ldr	r2, [pc, #204]	@ (8005098 <UART_SetConfig+0x4e4>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fd4:	441c      	add	r4, r3
 8004fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fda:	2200      	movs	r2, #0
 8004fdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fde:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fe0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	1891      	adds	r1, r2, r2
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	415b      	adcs	r3, r3
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	1851      	adds	r1, r2, r1
 8004ff8:	6039      	str	r1, [r7, #0]
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	414b      	adcs	r3, r1
 8004ffe:	607b      	str	r3, [r7, #4]
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800500c:	4659      	mov	r1, fp
 800500e:	00cb      	lsls	r3, r1, #3
 8005010:	4651      	mov	r1, sl
 8005012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005016:	4651      	mov	r1, sl
 8005018:	00ca      	lsls	r2, r1, #3
 800501a:	4610      	mov	r0, r2
 800501c:	4619      	mov	r1, r3
 800501e:	4603      	mov	r3, r0
 8005020:	4642      	mov	r2, r8
 8005022:	189b      	adds	r3, r3, r2
 8005024:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005026:	464b      	mov	r3, r9
 8005028:	460a      	mov	r2, r1
 800502a:	eb42 0303 	adc.w	r3, r2, r3
 800502e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	663b      	str	r3, [r7, #96]	@ 0x60
 800503a:	667a      	str	r2, [r7, #100]	@ 0x64
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005048:	4649      	mov	r1, r9
 800504a:	008b      	lsls	r3, r1, #2
 800504c:	4641      	mov	r1, r8
 800504e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005052:	4641      	mov	r1, r8
 8005054:	008a      	lsls	r2, r1, #2
 8005056:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800505a:	f7fb fcff 	bl	8000a5c <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <UART_SetConfig+0x4e4>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	@ 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	3332      	adds	r3, #50	@ 0x32
 8005076:	4a08      	ldr	r2, [pc, #32]	@ (8005098 <UART_SetConfig+0x4e4>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	f003 020f 	and.w	r2, r3, #15
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4422      	add	r2, r4
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005092:	46bd      	mov	sp, r7
 8005094:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005098:	51eb851f 	.word	0x51eb851f

0800509c <std>:
 800509c:	2300      	movs	r3, #0
 800509e:	b510      	push	{r4, lr}
 80050a0:	4604      	mov	r4, r0
 80050a2:	e9c0 3300 	strd	r3, r3, [r0]
 80050a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050aa:	6083      	str	r3, [r0, #8]
 80050ac:	8181      	strh	r1, [r0, #12]
 80050ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80050b0:	81c2      	strh	r2, [r0, #14]
 80050b2:	6183      	str	r3, [r0, #24]
 80050b4:	4619      	mov	r1, r3
 80050b6:	2208      	movs	r2, #8
 80050b8:	305c      	adds	r0, #92	@ 0x5c
 80050ba:	f000 f8c3 	bl	8005244 <memset>
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <std+0x58>)
 80050c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <std+0x5c>)
 80050c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050c6:	4b0d      	ldr	r3, [pc, #52]	@ (80050fc <std+0x60>)
 80050c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005100 <std+0x64>)
 80050cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80050ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005104 <std+0x68>)
 80050d0:	6224      	str	r4, [r4, #32]
 80050d2:	429c      	cmp	r4, r3
 80050d4:	d006      	beq.n	80050e4 <std+0x48>
 80050d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050da:	4294      	cmp	r4, r2
 80050dc:	d002      	beq.n	80050e4 <std+0x48>
 80050de:	33d0      	adds	r3, #208	@ 0xd0
 80050e0:	429c      	cmp	r4, r3
 80050e2:	d105      	bne.n	80050f0 <std+0x54>
 80050e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ec:	f000 b8dc 	b.w	80052a8 <__retarget_lock_init_recursive>
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop
 80050f4:	08005b01 	.word	0x08005b01
 80050f8:	08005b23 	.word	0x08005b23
 80050fc:	08005b5b 	.word	0x08005b5b
 8005100:	08005b7f 	.word	0x08005b7f
 8005104:	20000228 	.word	0x20000228

08005108 <stdio_exit_handler>:
 8005108:	4a02      	ldr	r2, [pc, #8]	@ (8005114 <stdio_exit_handler+0xc>)
 800510a:	4903      	ldr	r1, [pc, #12]	@ (8005118 <stdio_exit_handler+0x10>)
 800510c:	4803      	ldr	r0, [pc, #12]	@ (800511c <stdio_exit_handler+0x14>)
 800510e:	f000 b869 	b.w	80051e4 <_fwalk_sglue>
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c
 8005118:	08005a99 	.word	0x08005a99
 800511c:	2000001c 	.word	0x2000001c

08005120 <cleanup_stdio>:
 8005120:	6841      	ldr	r1, [r0, #4]
 8005122:	4b0c      	ldr	r3, [pc, #48]	@ (8005154 <cleanup_stdio+0x34>)
 8005124:	4299      	cmp	r1, r3
 8005126:	b510      	push	{r4, lr}
 8005128:	4604      	mov	r4, r0
 800512a:	d001      	beq.n	8005130 <cleanup_stdio+0x10>
 800512c:	f000 fcb4 	bl	8005a98 <_fflush_r>
 8005130:	68a1      	ldr	r1, [r4, #8]
 8005132:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <cleanup_stdio+0x38>)
 8005134:	4299      	cmp	r1, r3
 8005136:	d002      	beq.n	800513e <cleanup_stdio+0x1e>
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fcad 	bl	8005a98 <_fflush_r>
 800513e:	68e1      	ldr	r1, [r4, #12]
 8005140:	4b06      	ldr	r3, [pc, #24]	@ (800515c <cleanup_stdio+0x3c>)
 8005142:	4299      	cmp	r1, r3
 8005144:	d004      	beq.n	8005150 <cleanup_stdio+0x30>
 8005146:	4620      	mov	r0, r4
 8005148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800514c:	f000 bca4 	b.w	8005a98 <_fflush_r>
 8005150:	bd10      	pop	{r4, pc}
 8005152:	bf00      	nop
 8005154:	20000228 	.word	0x20000228
 8005158:	20000290 	.word	0x20000290
 800515c:	200002f8 	.word	0x200002f8

08005160 <global_stdio_init.part.0>:
 8005160:	b510      	push	{r4, lr}
 8005162:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <global_stdio_init.part.0+0x30>)
 8005164:	4c0b      	ldr	r4, [pc, #44]	@ (8005194 <global_stdio_init.part.0+0x34>)
 8005166:	4a0c      	ldr	r2, [pc, #48]	@ (8005198 <global_stdio_init.part.0+0x38>)
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	4620      	mov	r0, r4
 800516c:	2200      	movs	r2, #0
 800516e:	2104      	movs	r1, #4
 8005170:	f7ff ff94 	bl	800509c <std>
 8005174:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005178:	2201      	movs	r2, #1
 800517a:	2109      	movs	r1, #9
 800517c:	f7ff ff8e 	bl	800509c <std>
 8005180:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005184:	2202      	movs	r2, #2
 8005186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800518a:	2112      	movs	r1, #18
 800518c:	f7ff bf86 	b.w	800509c <std>
 8005190:	20000360 	.word	0x20000360
 8005194:	20000228 	.word	0x20000228
 8005198:	08005109 	.word	0x08005109

0800519c <__sfp_lock_acquire>:
 800519c:	4801      	ldr	r0, [pc, #4]	@ (80051a4 <__sfp_lock_acquire+0x8>)
 800519e:	f000 b884 	b.w	80052aa <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	20000365 	.word	0x20000365

080051a8 <__sfp_lock_release>:
 80051a8:	4801      	ldr	r0, [pc, #4]	@ (80051b0 <__sfp_lock_release+0x8>)
 80051aa:	f000 b87f 	b.w	80052ac <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	20000365 	.word	0x20000365

080051b4 <__sinit>:
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4604      	mov	r4, r0
 80051b8:	f7ff fff0 	bl	800519c <__sfp_lock_acquire>
 80051bc:	6a23      	ldr	r3, [r4, #32]
 80051be:	b11b      	cbz	r3, 80051c8 <__sinit+0x14>
 80051c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c4:	f7ff bff0 	b.w	80051a8 <__sfp_lock_release>
 80051c8:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <__sinit+0x28>)
 80051ca:	6223      	str	r3, [r4, #32]
 80051cc:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <__sinit+0x2c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f5      	bne.n	80051c0 <__sinit+0xc>
 80051d4:	f7ff ffc4 	bl	8005160 <global_stdio_init.part.0>
 80051d8:	e7f2      	b.n	80051c0 <__sinit+0xc>
 80051da:	bf00      	nop
 80051dc:	08005121 	.word	0x08005121
 80051e0:	20000360 	.word	0x20000360

080051e4 <_fwalk_sglue>:
 80051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e8:	4607      	mov	r7, r0
 80051ea:	4688      	mov	r8, r1
 80051ec:	4614      	mov	r4, r2
 80051ee:	2600      	movs	r6, #0
 80051f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051f4:	f1b9 0901 	subs.w	r9, r9, #1
 80051f8:	d505      	bpl.n	8005206 <_fwalk_sglue+0x22>
 80051fa:	6824      	ldr	r4, [r4, #0]
 80051fc:	2c00      	cmp	r4, #0
 80051fe:	d1f7      	bne.n	80051f0 <_fwalk_sglue+0xc>
 8005200:	4630      	mov	r0, r6
 8005202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d907      	bls.n	800521c <_fwalk_sglue+0x38>
 800520c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005210:	3301      	adds	r3, #1
 8005212:	d003      	beq.n	800521c <_fwalk_sglue+0x38>
 8005214:	4629      	mov	r1, r5
 8005216:	4638      	mov	r0, r7
 8005218:	47c0      	blx	r8
 800521a:	4306      	orrs	r6, r0
 800521c:	3568      	adds	r5, #104	@ 0x68
 800521e:	e7e9      	b.n	80051f4 <_fwalk_sglue+0x10>

08005220 <iprintf>:
 8005220:	b40f      	push	{r0, r1, r2, r3}
 8005222:	b507      	push	{r0, r1, r2, lr}
 8005224:	4906      	ldr	r1, [pc, #24]	@ (8005240 <iprintf+0x20>)
 8005226:	ab04      	add	r3, sp, #16
 8005228:	6808      	ldr	r0, [r1, #0]
 800522a:	f853 2b04 	ldr.w	r2, [r3], #4
 800522e:	6881      	ldr	r1, [r0, #8]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	f000 f865 	bl	8005300 <_vfiprintf_r>
 8005236:	b003      	add	sp, #12
 8005238:	f85d eb04 	ldr.w	lr, [sp], #4
 800523c:	b004      	add	sp, #16
 800523e:	4770      	bx	lr
 8005240:	20000018 	.word	0x20000018

08005244 <memset>:
 8005244:	4402      	add	r2, r0
 8005246:	4603      	mov	r3, r0
 8005248:	4293      	cmp	r3, r2
 800524a:	d100      	bne.n	800524e <memset+0xa>
 800524c:	4770      	bx	lr
 800524e:	f803 1b01 	strb.w	r1, [r3], #1
 8005252:	e7f9      	b.n	8005248 <memset+0x4>

08005254 <__errno>:
 8005254:	4b01      	ldr	r3, [pc, #4]	@ (800525c <__errno+0x8>)
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	20000018 	.word	0x20000018

08005260 <__libc_init_array>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	4d0d      	ldr	r5, [pc, #52]	@ (8005298 <__libc_init_array+0x38>)
 8005264:	4c0d      	ldr	r4, [pc, #52]	@ (800529c <__libc_init_array+0x3c>)
 8005266:	1b64      	subs	r4, r4, r5
 8005268:	10a4      	asrs	r4, r4, #2
 800526a:	2600      	movs	r6, #0
 800526c:	42a6      	cmp	r6, r4
 800526e:	d109      	bne.n	8005284 <__libc_init_array+0x24>
 8005270:	4d0b      	ldr	r5, [pc, #44]	@ (80052a0 <__libc_init_array+0x40>)
 8005272:	4c0c      	ldr	r4, [pc, #48]	@ (80052a4 <__libc_init_array+0x44>)
 8005274:	f000 fe40 	bl	8005ef8 <_init>
 8005278:	1b64      	subs	r4, r4, r5
 800527a:	10a4      	asrs	r4, r4, #2
 800527c:	2600      	movs	r6, #0
 800527e:	42a6      	cmp	r6, r4
 8005280:	d105      	bne.n	800528e <__libc_init_array+0x2e>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	f855 3b04 	ldr.w	r3, [r5], #4
 8005288:	4798      	blx	r3
 800528a:	3601      	adds	r6, #1
 800528c:	e7ee      	b.n	800526c <__libc_init_array+0xc>
 800528e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005292:	4798      	blx	r3
 8005294:	3601      	adds	r6, #1
 8005296:	e7f2      	b.n	800527e <__libc_init_array+0x1e>
 8005298:	08005f74 	.word	0x08005f74
 800529c:	08005f74 	.word	0x08005f74
 80052a0:	08005f74 	.word	0x08005f74
 80052a4:	08005f78 	.word	0x08005f78

080052a8 <__retarget_lock_init_recursive>:
 80052a8:	4770      	bx	lr

080052aa <__retarget_lock_acquire_recursive>:
 80052aa:	4770      	bx	lr

080052ac <__retarget_lock_release_recursive>:
 80052ac:	4770      	bx	lr

080052ae <__sfputc_r>:
 80052ae:	6893      	ldr	r3, [r2, #8]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	b410      	push	{r4}
 80052b6:	6093      	str	r3, [r2, #8]
 80052b8:	da08      	bge.n	80052cc <__sfputc_r+0x1e>
 80052ba:	6994      	ldr	r4, [r2, #24]
 80052bc:	42a3      	cmp	r3, r4
 80052be:	db01      	blt.n	80052c4 <__sfputc_r+0x16>
 80052c0:	290a      	cmp	r1, #10
 80052c2:	d103      	bne.n	80052cc <__sfputc_r+0x1e>
 80052c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052c8:	f000 bc5d 	b.w	8005b86 <__swbuf_r>
 80052cc:	6813      	ldr	r3, [r2, #0]
 80052ce:	1c58      	adds	r0, r3, #1
 80052d0:	6010      	str	r0, [r2, #0]
 80052d2:	7019      	strb	r1, [r3, #0]
 80052d4:	4608      	mov	r0, r1
 80052d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052da:	4770      	bx	lr

080052dc <__sfputs_r>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	4606      	mov	r6, r0
 80052e0:	460f      	mov	r7, r1
 80052e2:	4614      	mov	r4, r2
 80052e4:	18d5      	adds	r5, r2, r3
 80052e6:	42ac      	cmp	r4, r5
 80052e8:	d101      	bne.n	80052ee <__sfputs_r+0x12>
 80052ea:	2000      	movs	r0, #0
 80052ec:	e007      	b.n	80052fe <__sfputs_r+0x22>
 80052ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f2:	463a      	mov	r2, r7
 80052f4:	4630      	mov	r0, r6
 80052f6:	f7ff ffda 	bl	80052ae <__sfputc_r>
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	d1f3      	bne.n	80052e6 <__sfputs_r+0xa>
 80052fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005300 <_vfiprintf_r>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	460d      	mov	r5, r1
 8005306:	b09d      	sub	sp, #116	@ 0x74
 8005308:	4614      	mov	r4, r2
 800530a:	4698      	mov	r8, r3
 800530c:	4606      	mov	r6, r0
 800530e:	b118      	cbz	r0, 8005318 <_vfiprintf_r+0x18>
 8005310:	6a03      	ldr	r3, [r0, #32]
 8005312:	b90b      	cbnz	r3, 8005318 <_vfiprintf_r+0x18>
 8005314:	f7ff ff4e 	bl	80051b4 <__sinit>
 8005318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800531a:	07d9      	lsls	r1, r3, #31
 800531c:	d405      	bmi.n	800532a <_vfiprintf_r+0x2a>
 800531e:	89ab      	ldrh	r3, [r5, #12]
 8005320:	059a      	lsls	r2, r3, #22
 8005322:	d402      	bmi.n	800532a <_vfiprintf_r+0x2a>
 8005324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005326:	f7ff ffc0 	bl	80052aa <__retarget_lock_acquire_recursive>
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	071b      	lsls	r3, r3, #28
 800532e:	d501      	bpl.n	8005334 <_vfiprintf_r+0x34>
 8005330:	692b      	ldr	r3, [r5, #16]
 8005332:	b99b      	cbnz	r3, 800535c <_vfiprintf_r+0x5c>
 8005334:	4629      	mov	r1, r5
 8005336:	4630      	mov	r0, r6
 8005338:	f000 fc64 	bl	8005c04 <__swsetup_r>
 800533c:	b170      	cbz	r0, 800535c <_vfiprintf_r+0x5c>
 800533e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005340:	07dc      	lsls	r4, r3, #31
 8005342:	d504      	bpl.n	800534e <_vfiprintf_r+0x4e>
 8005344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005348:	b01d      	add	sp, #116	@ 0x74
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	89ab      	ldrh	r3, [r5, #12]
 8005350:	0598      	lsls	r0, r3, #22
 8005352:	d4f7      	bmi.n	8005344 <_vfiprintf_r+0x44>
 8005354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005356:	f7ff ffa9 	bl	80052ac <__retarget_lock_release_recursive>
 800535a:	e7f3      	b.n	8005344 <_vfiprintf_r+0x44>
 800535c:	2300      	movs	r3, #0
 800535e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005360:	2320      	movs	r3, #32
 8005362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005366:	f8cd 800c 	str.w	r8, [sp, #12]
 800536a:	2330      	movs	r3, #48	@ 0x30
 800536c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800551c <_vfiprintf_r+0x21c>
 8005370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005374:	f04f 0901 	mov.w	r9, #1
 8005378:	4623      	mov	r3, r4
 800537a:	469a      	mov	sl, r3
 800537c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005380:	b10a      	cbz	r2, 8005386 <_vfiprintf_r+0x86>
 8005382:	2a25      	cmp	r2, #37	@ 0x25
 8005384:	d1f9      	bne.n	800537a <_vfiprintf_r+0x7a>
 8005386:	ebba 0b04 	subs.w	fp, sl, r4
 800538a:	d00b      	beq.n	80053a4 <_vfiprintf_r+0xa4>
 800538c:	465b      	mov	r3, fp
 800538e:	4622      	mov	r2, r4
 8005390:	4629      	mov	r1, r5
 8005392:	4630      	mov	r0, r6
 8005394:	f7ff ffa2 	bl	80052dc <__sfputs_r>
 8005398:	3001      	adds	r0, #1
 800539a:	f000 80a7 	beq.w	80054ec <_vfiprintf_r+0x1ec>
 800539e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053a0:	445a      	add	r2, fp
 80053a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80053a4:	f89a 3000 	ldrb.w	r3, [sl]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 809f 	beq.w	80054ec <_vfiprintf_r+0x1ec>
 80053ae:	2300      	movs	r3, #0
 80053b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053b8:	f10a 0a01 	add.w	sl, sl, #1
 80053bc:	9304      	str	r3, [sp, #16]
 80053be:	9307      	str	r3, [sp, #28]
 80053c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80053c6:	4654      	mov	r4, sl
 80053c8:	2205      	movs	r2, #5
 80053ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ce:	4853      	ldr	r0, [pc, #332]	@ (800551c <_vfiprintf_r+0x21c>)
 80053d0:	f7fa ff06 	bl	80001e0 <memchr>
 80053d4:	9a04      	ldr	r2, [sp, #16]
 80053d6:	b9d8      	cbnz	r0, 8005410 <_vfiprintf_r+0x110>
 80053d8:	06d1      	lsls	r1, r2, #27
 80053da:	bf44      	itt	mi
 80053dc:	2320      	movmi	r3, #32
 80053de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053e2:	0713      	lsls	r3, r2, #28
 80053e4:	bf44      	itt	mi
 80053e6:	232b      	movmi	r3, #43	@ 0x2b
 80053e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053ec:	f89a 3000 	ldrb.w	r3, [sl]
 80053f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80053f2:	d015      	beq.n	8005420 <_vfiprintf_r+0x120>
 80053f4:	9a07      	ldr	r2, [sp, #28]
 80053f6:	4654      	mov	r4, sl
 80053f8:	2000      	movs	r0, #0
 80053fa:	f04f 0c0a 	mov.w	ip, #10
 80053fe:	4621      	mov	r1, r4
 8005400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005404:	3b30      	subs	r3, #48	@ 0x30
 8005406:	2b09      	cmp	r3, #9
 8005408:	d94b      	bls.n	80054a2 <_vfiprintf_r+0x1a2>
 800540a:	b1b0      	cbz	r0, 800543a <_vfiprintf_r+0x13a>
 800540c:	9207      	str	r2, [sp, #28]
 800540e:	e014      	b.n	800543a <_vfiprintf_r+0x13a>
 8005410:	eba0 0308 	sub.w	r3, r0, r8
 8005414:	fa09 f303 	lsl.w	r3, r9, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	9304      	str	r3, [sp, #16]
 800541c:	46a2      	mov	sl, r4
 800541e:	e7d2      	b.n	80053c6 <_vfiprintf_r+0xc6>
 8005420:	9b03      	ldr	r3, [sp, #12]
 8005422:	1d19      	adds	r1, r3, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	9103      	str	r1, [sp, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	bfbb      	ittet	lt
 800542c:	425b      	neglt	r3, r3
 800542e:	f042 0202 	orrlt.w	r2, r2, #2
 8005432:	9307      	strge	r3, [sp, #28]
 8005434:	9307      	strlt	r3, [sp, #28]
 8005436:	bfb8      	it	lt
 8005438:	9204      	strlt	r2, [sp, #16]
 800543a:	7823      	ldrb	r3, [r4, #0]
 800543c:	2b2e      	cmp	r3, #46	@ 0x2e
 800543e:	d10a      	bne.n	8005456 <_vfiprintf_r+0x156>
 8005440:	7863      	ldrb	r3, [r4, #1]
 8005442:	2b2a      	cmp	r3, #42	@ 0x2a
 8005444:	d132      	bne.n	80054ac <_vfiprintf_r+0x1ac>
 8005446:	9b03      	ldr	r3, [sp, #12]
 8005448:	1d1a      	adds	r2, r3, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	9203      	str	r2, [sp, #12]
 800544e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005452:	3402      	adds	r4, #2
 8005454:	9305      	str	r3, [sp, #20]
 8005456:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800552c <_vfiprintf_r+0x22c>
 800545a:	7821      	ldrb	r1, [r4, #0]
 800545c:	2203      	movs	r2, #3
 800545e:	4650      	mov	r0, sl
 8005460:	f7fa febe 	bl	80001e0 <memchr>
 8005464:	b138      	cbz	r0, 8005476 <_vfiprintf_r+0x176>
 8005466:	9b04      	ldr	r3, [sp, #16]
 8005468:	eba0 000a 	sub.w	r0, r0, sl
 800546c:	2240      	movs	r2, #64	@ 0x40
 800546e:	4082      	lsls	r2, r0
 8005470:	4313      	orrs	r3, r2
 8005472:	3401      	adds	r4, #1
 8005474:	9304      	str	r3, [sp, #16]
 8005476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547a:	4829      	ldr	r0, [pc, #164]	@ (8005520 <_vfiprintf_r+0x220>)
 800547c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005480:	2206      	movs	r2, #6
 8005482:	f7fa fead 	bl	80001e0 <memchr>
 8005486:	2800      	cmp	r0, #0
 8005488:	d03f      	beq.n	800550a <_vfiprintf_r+0x20a>
 800548a:	4b26      	ldr	r3, [pc, #152]	@ (8005524 <_vfiprintf_r+0x224>)
 800548c:	bb1b      	cbnz	r3, 80054d6 <_vfiprintf_r+0x1d6>
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	3307      	adds	r3, #7
 8005492:	f023 0307 	bic.w	r3, r3, #7
 8005496:	3308      	adds	r3, #8
 8005498:	9303      	str	r3, [sp, #12]
 800549a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800549c:	443b      	add	r3, r7
 800549e:	9309      	str	r3, [sp, #36]	@ 0x24
 80054a0:	e76a      	b.n	8005378 <_vfiprintf_r+0x78>
 80054a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80054a6:	460c      	mov	r4, r1
 80054a8:	2001      	movs	r0, #1
 80054aa:	e7a8      	b.n	80053fe <_vfiprintf_r+0xfe>
 80054ac:	2300      	movs	r3, #0
 80054ae:	3401      	adds	r4, #1
 80054b0:	9305      	str	r3, [sp, #20]
 80054b2:	4619      	mov	r1, r3
 80054b4:	f04f 0c0a 	mov.w	ip, #10
 80054b8:	4620      	mov	r0, r4
 80054ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054be:	3a30      	subs	r2, #48	@ 0x30
 80054c0:	2a09      	cmp	r2, #9
 80054c2:	d903      	bls.n	80054cc <_vfiprintf_r+0x1cc>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0c6      	beq.n	8005456 <_vfiprintf_r+0x156>
 80054c8:	9105      	str	r1, [sp, #20]
 80054ca:	e7c4      	b.n	8005456 <_vfiprintf_r+0x156>
 80054cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80054d0:	4604      	mov	r4, r0
 80054d2:	2301      	movs	r3, #1
 80054d4:	e7f0      	b.n	80054b8 <_vfiprintf_r+0x1b8>
 80054d6:	ab03      	add	r3, sp, #12
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	462a      	mov	r2, r5
 80054dc:	4b12      	ldr	r3, [pc, #72]	@ (8005528 <_vfiprintf_r+0x228>)
 80054de:	a904      	add	r1, sp, #16
 80054e0:	4630      	mov	r0, r6
 80054e2:	f3af 8000 	nop.w
 80054e6:	4607      	mov	r7, r0
 80054e8:	1c78      	adds	r0, r7, #1
 80054ea:	d1d6      	bne.n	800549a <_vfiprintf_r+0x19a>
 80054ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054ee:	07d9      	lsls	r1, r3, #31
 80054f0:	d405      	bmi.n	80054fe <_vfiprintf_r+0x1fe>
 80054f2:	89ab      	ldrh	r3, [r5, #12]
 80054f4:	059a      	lsls	r2, r3, #22
 80054f6:	d402      	bmi.n	80054fe <_vfiprintf_r+0x1fe>
 80054f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054fa:	f7ff fed7 	bl	80052ac <__retarget_lock_release_recursive>
 80054fe:	89ab      	ldrh	r3, [r5, #12]
 8005500:	065b      	lsls	r3, r3, #25
 8005502:	f53f af1f 	bmi.w	8005344 <_vfiprintf_r+0x44>
 8005506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005508:	e71e      	b.n	8005348 <_vfiprintf_r+0x48>
 800550a:	ab03      	add	r3, sp, #12
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	462a      	mov	r2, r5
 8005510:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <_vfiprintf_r+0x228>)
 8005512:	a904      	add	r1, sp, #16
 8005514:	4630      	mov	r0, r6
 8005516:	f000 f91b 	bl	8005750 <_printf_i>
 800551a:	e7e4      	b.n	80054e6 <_vfiprintf_r+0x1e6>
 800551c:	08005f38 	.word	0x08005f38
 8005520:	08005f42 	.word	0x08005f42
 8005524:	00000000 	.word	0x00000000
 8005528:	080052dd 	.word	0x080052dd
 800552c:	08005f3e 	.word	0x08005f3e

08005530 <sbrk_aligned>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0f      	ldr	r6, [pc, #60]	@ (8005570 <sbrk_aligned+0x40>)
 8005534:	460c      	mov	r4, r1
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	4605      	mov	r5, r0
 800553a:	b911      	cbnz	r1, 8005542 <sbrk_aligned+0x12>
 800553c:	f000 fc70 	bl	8005e20 <_sbrk_r>
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 fc6b 	bl	8005e20 <_sbrk_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d103      	bne.n	8005556 <sbrk_aligned+0x26>
 800554e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005552:	4620      	mov	r0, r4
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	1cc4      	adds	r4, r0, #3
 8005558:	f024 0403 	bic.w	r4, r4, #3
 800555c:	42a0      	cmp	r0, r4
 800555e:	d0f8      	beq.n	8005552 <sbrk_aligned+0x22>
 8005560:	1a21      	subs	r1, r4, r0
 8005562:	4628      	mov	r0, r5
 8005564:	f000 fc5c 	bl	8005e20 <_sbrk_r>
 8005568:	3001      	adds	r0, #1
 800556a:	d1f2      	bne.n	8005552 <sbrk_aligned+0x22>
 800556c:	e7ef      	b.n	800554e <sbrk_aligned+0x1e>
 800556e:	bf00      	nop
 8005570:	20000368 	.word	0x20000368

08005574 <_malloc_r>:
 8005574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005578:	1ccd      	adds	r5, r1, #3
 800557a:	f025 0503 	bic.w	r5, r5, #3
 800557e:	3508      	adds	r5, #8
 8005580:	2d0c      	cmp	r5, #12
 8005582:	bf38      	it	cc
 8005584:	250c      	movcc	r5, #12
 8005586:	2d00      	cmp	r5, #0
 8005588:	4606      	mov	r6, r0
 800558a:	db01      	blt.n	8005590 <_malloc_r+0x1c>
 800558c:	42a9      	cmp	r1, r5
 800558e:	d904      	bls.n	800559a <_malloc_r+0x26>
 8005590:	230c      	movs	r3, #12
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	2000      	movs	r0, #0
 8005596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800559a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005670 <_malloc_r+0xfc>
 800559e:	f000 faa3 	bl	8005ae8 <__malloc_lock>
 80055a2:	f8d8 3000 	ldr.w	r3, [r8]
 80055a6:	461c      	mov	r4, r3
 80055a8:	bb44      	cbnz	r4, 80055fc <_malloc_r+0x88>
 80055aa:	4629      	mov	r1, r5
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff ffbf 	bl	8005530 <sbrk_aligned>
 80055b2:	1c43      	adds	r3, r0, #1
 80055b4:	4604      	mov	r4, r0
 80055b6:	d158      	bne.n	800566a <_malloc_r+0xf6>
 80055b8:	f8d8 4000 	ldr.w	r4, [r8]
 80055bc:	4627      	mov	r7, r4
 80055be:	2f00      	cmp	r7, #0
 80055c0:	d143      	bne.n	800564a <_malloc_r+0xd6>
 80055c2:	2c00      	cmp	r4, #0
 80055c4:	d04b      	beq.n	800565e <_malloc_r+0xea>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	4639      	mov	r1, r7
 80055ca:	4630      	mov	r0, r6
 80055cc:	eb04 0903 	add.w	r9, r4, r3
 80055d0:	f000 fc26 	bl	8005e20 <_sbrk_r>
 80055d4:	4581      	cmp	r9, r0
 80055d6:	d142      	bne.n	800565e <_malloc_r+0xea>
 80055d8:	6821      	ldr	r1, [r4, #0]
 80055da:	1a6d      	subs	r5, r5, r1
 80055dc:	4629      	mov	r1, r5
 80055de:	4630      	mov	r0, r6
 80055e0:	f7ff ffa6 	bl	8005530 <sbrk_aligned>
 80055e4:	3001      	adds	r0, #1
 80055e6:	d03a      	beq.n	800565e <_malloc_r+0xea>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	442b      	add	r3, r5
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	f8d8 3000 	ldr.w	r3, [r8]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	bb62      	cbnz	r2, 8005650 <_malloc_r+0xdc>
 80055f6:	f8c8 7000 	str.w	r7, [r8]
 80055fa:	e00f      	b.n	800561c <_malloc_r+0xa8>
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	1b52      	subs	r2, r2, r5
 8005600:	d420      	bmi.n	8005644 <_malloc_r+0xd0>
 8005602:	2a0b      	cmp	r2, #11
 8005604:	d917      	bls.n	8005636 <_malloc_r+0xc2>
 8005606:	1961      	adds	r1, r4, r5
 8005608:	42a3      	cmp	r3, r4
 800560a:	6025      	str	r5, [r4, #0]
 800560c:	bf18      	it	ne
 800560e:	6059      	strne	r1, [r3, #4]
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	bf08      	it	eq
 8005614:	f8c8 1000 	streq.w	r1, [r8]
 8005618:	5162      	str	r2, [r4, r5]
 800561a:	604b      	str	r3, [r1, #4]
 800561c:	4630      	mov	r0, r6
 800561e:	f000 fa69 	bl	8005af4 <__malloc_unlock>
 8005622:	f104 000b 	add.w	r0, r4, #11
 8005626:	1d23      	adds	r3, r4, #4
 8005628:	f020 0007 	bic.w	r0, r0, #7
 800562c:	1ac2      	subs	r2, r0, r3
 800562e:	bf1c      	itt	ne
 8005630:	1a1b      	subne	r3, r3, r0
 8005632:	50a3      	strne	r3, [r4, r2]
 8005634:	e7af      	b.n	8005596 <_malloc_r+0x22>
 8005636:	6862      	ldr	r2, [r4, #4]
 8005638:	42a3      	cmp	r3, r4
 800563a:	bf0c      	ite	eq
 800563c:	f8c8 2000 	streq.w	r2, [r8]
 8005640:	605a      	strne	r2, [r3, #4]
 8005642:	e7eb      	b.n	800561c <_malloc_r+0xa8>
 8005644:	4623      	mov	r3, r4
 8005646:	6864      	ldr	r4, [r4, #4]
 8005648:	e7ae      	b.n	80055a8 <_malloc_r+0x34>
 800564a:	463c      	mov	r4, r7
 800564c:	687f      	ldr	r7, [r7, #4]
 800564e:	e7b6      	b.n	80055be <_malloc_r+0x4a>
 8005650:	461a      	mov	r2, r3
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	42a3      	cmp	r3, r4
 8005656:	d1fb      	bne.n	8005650 <_malloc_r+0xdc>
 8005658:	2300      	movs	r3, #0
 800565a:	6053      	str	r3, [r2, #4]
 800565c:	e7de      	b.n	800561c <_malloc_r+0xa8>
 800565e:	230c      	movs	r3, #12
 8005660:	6033      	str	r3, [r6, #0]
 8005662:	4630      	mov	r0, r6
 8005664:	f000 fa46 	bl	8005af4 <__malloc_unlock>
 8005668:	e794      	b.n	8005594 <_malloc_r+0x20>
 800566a:	6005      	str	r5, [r0, #0]
 800566c:	e7d6      	b.n	800561c <_malloc_r+0xa8>
 800566e:	bf00      	nop
 8005670:	2000036c 	.word	0x2000036c

08005674 <_printf_common>:
 8005674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	4616      	mov	r6, r2
 800567a:	4698      	mov	r8, r3
 800567c:	688a      	ldr	r2, [r1, #8]
 800567e:	690b      	ldr	r3, [r1, #16]
 8005680:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005684:	4293      	cmp	r3, r2
 8005686:	bfb8      	it	lt
 8005688:	4613      	movlt	r3, r2
 800568a:	6033      	str	r3, [r6, #0]
 800568c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005690:	4607      	mov	r7, r0
 8005692:	460c      	mov	r4, r1
 8005694:	b10a      	cbz	r2, 800569a <_printf_common+0x26>
 8005696:	3301      	adds	r3, #1
 8005698:	6033      	str	r3, [r6, #0]
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	0699      	lsls	r1, r3, #26
 800569e:	bf42      	ittt	mi
 80056a0:	6833      	ldrmi	r3, [r6, #0]
 80056a2:	3302      	addmi	r3, #2
 80056a4:	6033      	strmi	r3, [r6, #0]
 80056a6:	6825      	ldr	r5, [r4, #0]
 80056a8:	f015 0506 	ands.w	r5, r5, #6
 80056ac:	d106      	bne.n	80056bc <_printf_common+0x48>
 80056ae:	f104 0a19 	add.w	sl, r4, #25
 80056b2:	68e3      	ldr	r3, [r4, #12]
 80056b4:	6832      	ldr	r2, [r6, #0]
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	42ab      	cmp	r3, r5
 80056ba:	dc26      	bgt.n	800570a <_printf_common+0x96>
 80056bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056c0:	6822      	ldr	r2, [r4, #0]
 80056c2:	3b00      	subs	r3, #0
 80056c4:	bf18      	it	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	0692      	lsls	r2, r2, #26
 80056ca:	d42b      	bmi.n	8005724 <_printf_common+0xb0>
 80056cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056d0:	4641      	mov	r1, r8
 80056d2:	4638      	mov	r0, r7
 80056d4:	47c8      	blx	r9
 80056d6:	3001      	adds	r0, #1
 80056d8:	d01e      	beq.n	8005718 <_printf_common+0xa4>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	6922      	ldr	r2, [r4, #16]
 80056de:	f003 0306 	and.w	r3, r3, #6
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	bf02      	ittt	eq
 80056e6:	68e5      	ldreq	r5, [r4, #12]
 80056e8:	6833      	ldreq	r3, [r6, #0]
 80056ea:	1aed      	subeq	r5, r5, r3
 80056ec:	68a3      	ldr	r3, [r4, #8]
 80056ee:	bf0c      	ite	eq
 80056f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f4:	2500      	movne	r5, #0
 80056f6:	4293      	cmp	r3, r2
 80056f8:	bfc4      	itt	gt
 80056fa:	1a9b      	subgt	r3, r3, r2
 80056fc:	18ed      	addgt	r5, r5, r3
 80056fe:	2600      	movs	r6, #0
 8005700:	341a      	adds	r4, #26
 8005702:	42b5      	cmp	r5, r6
 8005704:	d11a      	bne.n	800573c <_printf_common+0xc8>
 8005706:	2000      	movs	r0, #0
 8005708:	e008      	b.n	800571c <_printf_common+0xa8>
 800570a:	2301      	movs	r3, #1
 800570c:	4652      	mov	r2, sl
 800570e:	4641      	mov	r1, r8
 8005710:	4638      	mov	r0, r7
 8005712:	47c8      	blx	r9
 8005714:	3001      	adds	r0, #1
 8005716:	d103      	bne.n	8005720 <_printf_common+0xac>
 8005718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005720:	3501      	adds	r5, #1
 8005722:	e7c6      	b.n	80056b2 <_printf_common+0x3e>
 8005724:	18e1      	adds	r1, r4, r3
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	2030      	movs	r0, #48	@ 0x30
 800572a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800572e:	4422      	add	r2, r4
 8005730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005738:	3302      	adds	r3, #2
 800573a:	e7c7      	b.n	80056cc <_printf_common+0x58>
 800573c:	2301      	movs	r3, #1
 800573e:	4622      	mov	r2, r4
 8005740:	4641      	mov	r1, r8
 8005742:	4638      	mov	r0, r7
 8005744:	47c8      	blx	r9
 8005746:	3001      	adds	r0, #1
 8005748:	d0e6      	beq.n	8005718 <_printf_common+0xa4>
 800574a:	3601      	adds	r6, #1
 800574c:	e7d9      	b.n	8005702 <_printf_common+0x8e>
	...

08005750 <_printf_i>:
 8005750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	7e0f      	ldrb	r7, [r1, #24]
 8005756:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005758:	2f78      	cmp	r7, #120	@ 0x78
 800575a:	4691      	mov	r9, r2
 800575c:	4680      	mov	r8, r0
 800575e:	460c      	mov	r4, r1
 8005760:	469a      	mov	sl, r3
 8005762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005766:	d807      	bhi.n	8005778 <_printf_i+0x28>
 8005768:	2f62      	cmp	r7, #98	@ 0x62
 800576a:	d80a      	bhi.n	8005782 <_printf_i+0x32>
 800576c:	2f00      	cmp	r7, #0
 800576e:	f000 80d2 	beq.w	8005916 <_printf_i+0x1c6>
 8005772:	2f58      	cmp	r7, #88	@ 0x58
 8005774:	f000 80b9 	beq.w	80058ea <_printf_i+0x19a>
 8005778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800577c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005780:	e03a      	b.n	80057f8 <_printf_i+0xa8>
 8005782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005786:	2b15      	cmp	r3, #21
 8005788:	d8f6      	bhi.n	8005778 <_printf_i+0x28>
 800578a:	a101      	add	r1, pc, #4	@ (adr r1, 8005790 <_printf_i+0x40>)
 800578c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005790:	080057e9 	.word	0x080057e9
 8005794:	080057fd 	.word	0x080057fd
 8005798:	08005779 	.word	0x08005779
 800579c:	08005779 	.word	0x08005779
 80057a0:	08005779 	.word	0x08005779
 80057a4:	08005779 	.word	0x08005779
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	08005779 	.word	0x08005779
 80057b0:	08005779 	.word	0x08005779
 80057b4:	08005779 	.word	0x08005779
 80057b8:	08005779 	.word	0x08005779
 80057bc:	080058fd 	.word	0x080058fd
 80057c0:	08005827 	.word	0x08005827
 80057c4:	080058b7 	.word	0x080058b7
 80057c8:	08005779 	.word	0x08005779
 80057cc:	08005779 	.word	0x08005779
 80057d0:	0800591f 	.word	0x0800591f
 80057d4:	08005779 	.word	0x08005779
 80057d8:	08005827 	.word	0x08005827
 80057dc:	08005779 	.word	0x08005779
 80057e0:	08005779 	.word	0x08005779
 80057e4:	080058bf 	.word	0x080058bf
 80057e8:	6833      	ldr	r3, [r6, #0]
 80057ea:	1d1a      	adds	r2, r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6032      	str	r2, [r6, #0]
 80057f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057f8:	2301      	movs	r3, #1
 80057fa:	e09d      	b.n	8005938 <_printf_i+0x1e8>
 80057fc:	6833      	ldr	r3, [r6, #0]
 80057fe:	6820      	ldr	r0, [r4, #0]
 8005800:	1d19      	adds	r1, r3, #4
 8005802:	6031      	str	r1, [r6, #0]
 8005804:	0606      	lsls	r6, r0, #24
 8005806:	d501      	bpl.n	800580c <_printf_i+0xbc>
 8005808:	681d      	ldr	r5, [r3, #0]
 800580a:	e003      	b.n	8005814 <_printf_i+0xc4>
 800580c:	0645      	lsls	r5, r0, #25
 800580e:	d5fb      	bpl.n	8005808 <_printf_i+0xb8>
 8005810:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005814:	2d00      	cmp	r5, #0
 8005816:	da03      	bge.n	8005820 <_printf_i+0xd0>
 8005818:	232d      	movs	r3, #45	@ 0x2d
 800581a:	426d      	negs	r5, r5
 800581c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005820:	4859      	ldr	r0, [pc, #356]	@ (8005988 <_printf_i+0x238>)
 8005822:	230a      	movs	r3, #10
 8005824:	e011      	b.n	800584a <_printf_i+0xfa>
 8005826:	6821      	ldr	r1, [r4, #0]
 8005828:	6833      	ldr	r3, [r6, #0]
 800582a:	0608      	lsls	r0, r1, #24
 800582c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005830:	d402      	bmi.n	8005838 <_printf_i+0xe8>
 8005832:	0649      	lsls	r1, r1, #25
 8005834:	bf48      	it	mi
 8005836:	b2ad      	uxthmi	r5, r5
 8005838:	2f6f      	cmp	r7, #111	@ 0x6f
 800583a:	4853      	ldr	r0, [pc, #332]	@ (8005988 <_printf_i+0x238>)
 800583c:	6033      	str	r3, [r6, #0]
 800583e:	bf14      	ite	ne
 8005840:	230a      	movne	r3, #10
 8005842:	2308      	moveq	r3, #8
 8005844:	2100      	movs	r1, #0
 8005846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800584a:	6866      	ldr	r6, [r4, #4]
 800584c:	60a6      	str	r6, [r4, #8]
 800584e:	2e00      	cmp	r6, #0
 8005850:	bfa2      	ittt	ge
 8005852:	6821      	ldrge	r1, [r4, #0]
 8005854:	f021 0104 	bicge.w	r1, r1, #4
 8005858:	6021      	strge	r1, [r4, #0]
 800585a:	b90d      	cbnz	r5, 8005860 <_printf_i+0x110>
 800585c:	2e00      	cmp	r6, #0
 800585e:	d04b      	beq.n	80058f8 <_printf_i+0x1a8>
 8005860:	4616      	mov	r6, r2
 8005862:	fbb5 f1f3 	udiv	r1, r5, r3
 8005866:	fb03 5711 	mls	r7, r3, r1, r5
 800586a:	5dc7      	ldrb	r7, [r0, r7]
 800586c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005870:	462f      	mov	r7, r5
 8005872:	42bb      	cmp	r3, r7
 8005874:	460d      	mov	r5, r1
 8005876:	d9f4      	bls.n	8005862 <_printf_i+0x112>
 8005878:	2b08      	cmp	r3, #8
 800587a:	d10b      	bne.n	8005894 <_printf_i+0x144>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	07df      	lsls	r7, r3, #31
 8005880:	d508      	bpl.n	8005894 <_printf_i+0x144>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	6861      	ldr	r1, [r4, #4]
 8005886:	4299      	cmp	r1, r3
 8005888:	bfde      	ittt	le
 800588a:	2330      	movle	r3, #48	@ 0x30
 800588c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005890:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005894:	1b92      	subs	r2, r2, r6
 8005896:	6122      	str	r2, [r4, #16]
 8005898:	f8cd a000 	str.w	sl, [sp]
 800589c:	464b      	mov	r3, r9
 800589e:	aa03      	add	r2, sp, #12
 80058a0:	4621      	mov	r1, r4
 80058a2:	4640      	mov	r0, r8
 80058a4:	f7ff fee6 	bl	8005674 <_printf_common>
 80058a8:	3001      	adds	r0, #1
 80058aa:	d14a      	bne.n	8005942 <_printf_i+0x1f2>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058b0:	b004      	add	sp, #16
 80058b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	f043 0320 	orr.w	r3, r3, #32
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	4833      	ldr	r0, [pc, #204]	@ (800598c <_printf_i+0x23c>)
 80058c0:	2778      	movs	r7, #120	@ 0x78
 80058c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	6831      	ldr	r1, [r6, #0]
 80058ca:	061f      	lsls	r7, r3, #24
 80058cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80058d0:	d402      	bmi.n	80058d8 <_printf_i+0x188>
 80058d2:	065f      	lsls	r7, r3, #25
 80058d4:	bf48      	it	mi
 80058d6:	b2ad      	uxthmi	r5, r5
 80058d8:	6031      	str	r1, [r6, #0]
 80058da:	07d9      	lsls	r1, r3, #31
 80058dc:	bf44      	itt	mi
 80058de:	f043 0320 	orrmi.w	r3, r3, #32
 80058e2:	6023      	strmi	r3, [r4, #0]
 80058e4:	b11d      	cbz	r5, 80058ee <_printf_i+0x19e>
 80058e6:	2310      	movs	r3, #16
 80058e8:	e7ac      	b.n	8005844 <_printf_i+0xf4>
 80058ea:	4827      	ldr	r0, [pc, #156]	@ (8005988 <_printf_i+0x238>)
 80058ec:	e7e9      	b.n	80058c2 <_printf_i+0x172>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	f023 0320 	bic.w	r3, r3, #32
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	e7f6      	b.n	80058e6 <_printf_i+0x196>
 80058f8:	4616      	mov	r6, r2
 80058fa:	e7bd      	b.n	8005878 <_printf_i+0x128>
 80058fc:	6833      	ldr	r3, [r6, #0]
 80058fe:	6825      	ldr	r5, [r4, #0]
 8005900:	6961      	ldr	r1, [r4, #20]
 8005902:	1d18      	adds	r0, r3, #4
 8005904:	6030      	str	r0, [r6, #0]
 8005906:	062e      	lsls	r6, r5, #24
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	d501      	bpl.n	8005910 <_printf_i+0x1c0>
 800590c:	6019      	str	r1, [r3, #0]
 800590e:	e002      	b.n	8005916 <_printf_i+0x1c6>
 8005910:	0668      	lsls	r0, r5, #25
 8005912:	d5fb      	bpl.n	800590c <_printf_i+0x1bc>
 8005914:	8019      	strh	r1, [r3, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	4616      	mov	r6, r2
 800591c:	e7bc      	b.n	8005898 <_printf_i+0x148>
 800591e:	6833      	ldr	r3, [r6, #0]
 8005920:	1d1a      	adds	r2, r3, #4
 8005922:	6032      	str	r2, [r6, #0]
 8005924:	681e      	ldr	r6, [r3, #0]
 8005926:	6862      	ldr	r2, [r4, #4]
 8005928:	2100      	movs	r1, #0
 800592a:	4630      	mov	r0, r6
 800592c:	f7fa fc58 	bl	80001e0 <memchr>
 8005930:	b108      	cbz	r0, 8005936 <_printf_i+0x1e6>
 8005932:	1b80      	subs	r0, r0, r6
 8005934:	6060      	str	r0, [r4, #4]
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	2300      	movs	r3, #0
 800593c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005940:	e7aa      	b.n	8005898 <_printf_i+0x148>
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	4632      	mov	r2, r6
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	47d0      	blx	sl
 800594c:	3001      	adds	r0, #1
 800594e:	d0ad      	beq.n	80058ac <_printf_i+0x15c>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	079b      	lsls	r3, r3, #30
 8005954:	d413      	bmi.n	800597e <_printf_i+0x22e>
 8005956:	68e0      	ldr	r0, [r4, #12]
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	4298      	cmp	r0, r3
 800595c:	bfb8      	it	lt
 800595e:	4618      	movlt	r0, r3
 8005960:	e7a6      	b.n	80058b0 <_printf_i+0x160>
 8005962:	2301      	movs	r3, #1
 8005964:	4632      	mov	r2, r6
 8005966:	4649      	mov	r1, r9
 8005968:	4640      	mov	r0, r8
 800596a:	47d0      	blx	sl
 800596c:	3001      	adds	r0, #1
 800596e:	d09d      	beq.n	80058ac <_printf_i+0x15c>
 8005970:	3501      	adds	r5, #1
 8005972:	68e3      	ldr	r3, [r4, #12]
 8005974:	9903      	ldr	r1, [sp, #12]
 8005976:	1a5b      	subs	r3, r3, r1
 8005978:	42ab      	cmp	r3, r5
 800597a:	dcf2      	bgt.n	8005962 <_printf_i+0x212>
 800597c:	e7eb      	b.n	8005956 <_printf_i+0x206>
 800597e:	2500      	movs	r5, #0
 8005980:	f104 0619 	add.w	r6, r4, #25
 8005984:	e7f5      	b.n	8005972 <_printf_i+0x222>
 8005986:	bf00      	nop
 8005988:	08005f49 	.word	0x08005f49
 800598c:	08005f5a 	.word	0x08005f5a

08005990 <__sflush_r>:
 8005990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005998:	0716      	lsls	r6, r2, #28
 800599a:	4605      	mov	r5, r0
 800599c:	460c      	mov	r4, r1
 800599e:	d454      	bmi.n	8005a4a <__sflush_r+0xba>
 80059a0:	684b      	ldr	r3, [r1, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	dc02      	bgt.n	80059ac <__sflush_r+0x1c>
 80059a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	dd48      	ble.n	8005a3e <__sflush_r+0xae>
 80059ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059ae:	2e00      	cmp	r6, #0
 80059b0:	d045      	beq.n	8005a3e <__sflush_r+0xae>
 80059b2:	2300      	movs	r3, #0
 80059b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059b8:	682f      	ldr	r7, [r5, #0]
 80059ba:	6a21      	ldr	r1, [r4, #32]
 80059bc:	602b      	str	r3, [r5, #0]
 80059be:	d030      	beq.n	8005a22 <__sflush_r+0x92>
 80059c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	0759      	lsls	r1, r3, #29
 80059c6:	d505      	bpl.n	80059d4 <__sflush_r+0x44>
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	1ad2      	subs	r2, r2, r3
 80059cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059ce:	b10b      	cbz	r3, 80059d4 <__sflush_r+0x44>
 80059d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059d2:	1ad2      	subs	r2, r2, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059d8:	6a21      	ldr	r1, [r4, #32]
 80059da:	4628      	mov	r0, r5
 80059dc:	47b0      	blx	r6
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	d106      	bne.n	80059f2 <__sflush_r+0x62>
 80059e4:	6829      	ldr	r1, [r5, #0]
 80059e6:	291d      	cmp	r1, #29
 80059e8:	d82b      	bhi.n	8005a42 <__sflush_r+0xb2>
 80059ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005a94 <__sflush_r+0x104>)
 80059ec:	410a      	asrs	r2, r1
 80059ee:	07d6      	lsls	r6, r2, #31
 80059f0:	d427      	bmi.n	8005a42 <__sflush_r+0xb2>
 80059f2:	2200      	movs	r2, #0
 80059f4:	6062      	str	r2, [r4, #4]
 80059f6:	04d9      	lsls	r1, r3, #19
 80059f8:	6922      	ldr	r2, [r4, #16]
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	d504      	bpl.n	8005a08 <__sflush_r+0x78>
 80059fe:	1c42      	adds	r2, r0, #1
 8005a00:	d101      	bne.n	8005a06 <__sflush_r+0x76>
 8005a02:	682b      	ldr	r3, [r5, #0]
 8005a04:	b903      	cbnz	r3, 8005a08 <__sflush_r+0x78>
 8005a06:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a0a:	602f      	str	r7, [r5, #0]
 8005a0c:	b1b9      	cbz	r1, 8005a3e <__sflush_r+0xae>
 8005a0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a12:	4299      	cmp	r1, r3
 8005a14:	d002      	beq.n	8005a1c <__sflush_r+0x8c>
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 fa24 	bl	8005e64 <_free_r>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a20:	e00d      	b.n	8005a3e <__sflush_r+0xae>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b0      	blx	r6
 8005a28:	4602      	mov	r2, r0
 8005a2a:	1c50      	adds	r0, r2, #1
 8005a2c:	d1c9      	bne.n	80059c2 <__sflush_r+0x32>
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0c6      	beq.n	80059c2 <__sflush_r+0x32>
 8005a34:	2b1d      	cmp	r3, #29
 8005a36:	d001      	beq.n	8005a3c <__sflush_r+0xac>
 8005a38:	2b16      	cmp	r3, #22
 8005a3a:	d11e      	bne.n	8005a7a <__sflush_r+0xea>
 8005a3c:	602f      	str	r7, [r5, #0]
 8005a3e:	2000      	movs	r0, #0
 8005a40:	e022      	b.n	8005a88 <__sflush_r+0xf8>
 8005a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a46:	b21b      	sxth	r3, r3
 8005a48:	e01b      	b.n	8005a82 <__sflush_r+0xf2>
 8005a4a:	690f      	ldr	r7, [r1, #16]
 8005a4c:	2f00      	cmp	r7, #0
 8005a4e:	d0f6      	beq.n	8005a3e <__sflush_r+0xae>
 8005a50:	0793      	lsls	r3, r2, #30
 8005a52:	680e      	ldr	r6, [r1, #0]
 8005a54:	bf08      	it	eq
 8005a56:	694b      	ldreq	r3, [r1, #20]
 8005a58:	600f      	str	r7, [r1, #0]
 8005a5a:	bf18      	it	ne
 8005a5c:	2300      	movne	r3, #0
 8005a5e:	eba6 0807 	sub.w	r8, r6, r7
 8005a62:	608b      	str	r3, [r1, #8]
 8005a64:	f1b8 0f00 	cmp.w	r8, #0
 8005a68:	dde9      	ble.n	8005a3e <__sflush_r+0xae>
 8005a6a:	6a21      	ldr	r1, [r4, #32]
 8005a6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a6e:	4643      	mov	r3, r8
 8005a70:	463a      	mov	r2, r7
 8005a72:	4628      	mov	r0, r5
 8005a74:	47b0      	blx	r6
 8005a76:	2800      	cmp	r0, #0
 8005a78:	dc08      	bgt.n	8005a8c <__sflush_r+0xfc>
 8005a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a8c:	4407      	add	r7, r0
 8005a8e:	eba8 0800 	sub.w	r8, r8, r0
 8005a92:	e7e7      	b.n	8005a64 <__sflush_r+0xd4>
 8005a94:	dfbffffe 	.word	0xdfbffffe

08005a98 <_fflush_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	690b      	ldr	r3, [r1, #16]
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	b913      	cbnz	r3, 8005aa8 <_fflush_r+0x10>
 8005aa2:	2500      	movs	r5, #0
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	b118      	cbz	r0, 8005ab2 <_fflush_r+0x1a>
 8005aaa:	6a03      	ldr	r3, [r0, #32]
 8005aac:	b90b      	cbnz	r3, 8005ab2 <_fflush_r+0x1a>
 8005aae:	f7ff fb81 	bl	80051b4 <__sinit>
 8005ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f3      	beq.n	8005aa2 <_fflush_r+0xa>
 8005aba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005abc:	07d0      	lsls	r0, r2, #31
 8005abe:	d404      	bmi.n	8005aca <_fflush_r+0x32>
 8005ac0:	0599      	lsls	r1, r3, #22
 8005ac2:	d402      	bmi.n	8005aca <_fflush_r+0x32>
 8005ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ac6:	f7ff fbf0 	bl	80052aa <__retarget_lock_acquire_recursive>
 8005aca:	4628      	mov	r0, r5
 8005acc:	4621      	mov	r1, r4
 8005ace:	f7ff ff5f 	bl	8005990 <__sflush_r>
 8005ad2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ad4:	07da      	lsls	r2, r3, #31
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	d4e4      	bmi.n	8005aa4 <_fflush_r+0xc>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	059b      	lsls	r3, r3, #22
 8005ade:	d4e1      	bmi.n	8005aa4 <_fflush_r+0xc>
 8005ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ae2:	f7ff fbe3 	bl	80052ac <__retarget_lock_release_recursive>
 8005ae6:	e7dd      	b.n	8005aa4 <_fflush_r+0xc>

08005ae8 <__malloc_lock>:
 8005ae8:	4801      	ldr	r0, [pc, #4]	@ (8005af0 <__malloc_lock+0x8>)
 8005aea:	f7ff bbde 	b.w	80052aa <__retarget_lock_acquire_recursive>
 8005aee:	bf00      	nop
 8005af0:	20000364 	.word	0x20000364

08005af4 <__malloc_unlock>:
 8005af4:	4801      	ldr	r0, [pc, #4]	@ (8005afc <__malloc_unlock+0x8>)
 8005af6:	f7ff bbd9 	b.w	80052ac <__retarget_lock_release_recursive>
 8005afa:	bf00      	nop
 8005afc:	20000364 	.word	0x20000364

08005b00 <__sread>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	460c      	mov	r4, r1
 8005b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b08:	f000 f978 	bl	8005dfc <_read_r>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	bfab      	itete	ge
 8005b10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b12:	89a3      	ldrhlt	r3, [r4, #12]
 8005b14:	181b      	addge	r3, r3, r0
 8005b16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b1a:	bfac      	ite	ge
 8005b1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b1e:	81a3      	strhlt	r3, [r4, #12]
 8005b20:	bd10      	pop	{r4, pc}

08005b22 <__swrite>:
 8005b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b26:	461f      	mov	r7, r3
 8005b28:	898b      	ldrh	r3, [r1, #12]
 8005b2a:	05db      	lsls	r3, r3, #23
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	4616      	mov	r6, r2
 8005b32:	d505      	bpl.n	8005b40 <__swrite+0x1e>
 8005b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b38:	2302      	movs	r3, #2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f000 f94c 	bl	8005dd8 <_lseek_r>
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b4a:	81a3      	strh	r3, [r4, #12]
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	463b      	mov	r3, r7
 8005b50:	4628      	mov	r0, r5
 8005b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b56:	f000 b973 	b.w	8005e40 <_write_r>

08005b5a <__sseek>:
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b62:	f000 f939 	bl	8005dd8 <_lseek_r>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	bf15      	itete	ne
 8005b6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b76:	81a3      	strheq	r3, [r4, #12]
 8005b78:	bf18      	it	ne
 8005b7a:	81a3      	strhne	r3, [r4, #12]
 8005b7c:	bd10      	pop	{r4, pc}

08005b7e <__sclose>:
 8005b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b82:	f000 b8f7 	b.w	8005d74 <_close_r>

08005b86 <__swbuf_r>:
 8005b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b88:	460e      	mov	r6, r1
 8005b8a:	4614      	mov	r4, r2
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	b118      	cbz	r0, 8005b98 <__swbuf_r+0x12>
 8005b90:	6a03      	ldr	r3, [r0, #32]
 8005b92:	b90b      	cbnz	r3, 8005b98 <__swbuf_r+0x12>
 8005b94:	f7ff fb0e 	bl	80051b4 <__sinit>
 8005b98:	69a3      	ldr	r3, [r4, #24]
 8005b9a:	60a3      	str	r3, [r4, #8]
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	071a      	lsls	r2, r3, #28
 8005ba0:	d501      	bpl.n	8005ba6 <__swbuf_r+0x20>
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	b943      	cbnz	r3, 8005bb8 <__swbuf_r+0x32>
 8005ba6:	4621      	mov	r1, r4
 8005ba8:	4628      	mov	r0, r5
 8005baa:	f000 f82b 	bl	8005c04 <__swsetup_r>
 8005bae:	b118      	cbz	r0, 8005bb8 <__swbuf_r+0x32>
 8005bb0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	6922      	ldr	r2, [r4, #16]
 8005bbc:	1a98      	subs	r0, r3, r2
 8005bbe:	6963      	ldr	r3, [r4, #20]
 8005bc0:	b2f6      	uxtb	r6, r6
 8005bc2:	4283      	cmp	r3, r0
 8005bc4:	4637      	mov	r7, r6
 8005bc6:	dc05      	bgt.n	8005bd4 <__swbuf_r+0x4e>
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f7ff ff64 	bl	8005a98 <_fflush_r>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d1ed      	bne.n	8005bb0 <__swbuf_r+0x2a>
 8005bd4:	68a3      	ldr	r3, [r4, #8]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	60a3      	str	r3, [r4, #8]
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	6022      	str	r2, [r4, #0]
 8005be0:	701e      	strb	r6, [r3, #0]
 8005be2:	6962      	ldr	r2, [r4, #20]
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d004      	beq.n	8005bf4 <__swbuf_r+0x6e>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	07db      	lsls	r3, r3, #31
 8005bee:	d5e1      	bpl.n	8005bb4 <__swbuf_r+0x2e>
 8005bf0:	2e0a      	cmp	r6, #10
 8005bf2:	d1df      	bne.n	8005bb4 <__swbuf_r+0x2e>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f7ff ff4e 	bl	8005a98 <_fflush_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d0d9      	beq.n	8005bb4 <__swbuf_r+0x2e>
 8005c00:	e7d6      	b.n	8005bb0 <__swbuf_r+0x2a>
	...

08005c04 <__swsetup_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4b29      	ldr	r3, [pc, #164]	@ (8005cac <__swsetup_r+0xa8>)
 8005c08:	4605      	mov	r5, r0
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	b118      	cbz	r0, 8005c18 <__swsetup_r+0x14>
 8005c10:	6a03      	ldr	r3, [r0, #32]
 8005c12:	b90b      	cbnz	r3, 8005c18 <__swsetup_r+0x14>
 8005c14:	f7ff face 	bl	80051b4 <__sinit>
 8005c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1c:	0719      	lsls	r1, r3, #28
 8005c1e:	d422      	bmi.n	8005c66 <__swsetup_r+0x62>
 8005c20:	06da      	lsls	r2, r3, #27
 8005c22:	d407      	bmi.n	8005c34 <__swsetup_r+0x30>
 8005c24:	2209      	movs	r2, #9
 8005c26:	602a      	str	r2, [r5, #0]
 8005c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c2c:	81a3      	strh	r3, [r4, #12]
 8005c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c32:	e033      	b.n	8005c9c <__swsetup_r+0x98>
 8005c34:	0758      	lsls	r0, r3, #29
 8005c36:	d512      	bpl.n	8005c5e <__swsetup_r+0x5a>
 8005c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c3a:	b141      	cbz	r1, 8005c4e <__swsetup_r+0x4a>
 8005c3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c40:	4299      	cmp	r1, r3
 8005c42:	d002      	beq.n	8005c4a <__swsetup_r+0x46>
 8005c44:	4628      	mov	r0, r5
 8005c46:	f000 f90d 	bl	8005e64 <_free_r>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	2300      	movs	r3, #0
 8005c58:	6063      	str	r3, [r4, #4]
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	f043 0308 	orr.w	r3, r3, #8
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	b94b      	cbnz	r3, 8005c7e <__swsetup_r+0x7a>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c74:	d003      	beq.n	8005c7e <__swsetup_r+0x7a>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 f83f 	bl	8005cfc <__smakebuf_r>
 8005c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c82:	f013 0201 	ands.w	r2, r3, #1
 8005c86:	d00a      	beq.n	8005c9e <__swsetup_r+0x9a>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	60a2      	str	r2, [r4, #8]
 8005c8c:	6962      	ldr	r2, [r4, #20]
 8005c8e:	4252      	negs	r2, r2
 8005c90:	61a2      	str	r2, [r4, #24]
 8005c92:	6922      	ldr	r2, [r4, #16]
 8005c94:	b942      	cbnz	r2, 8005ca8 <__swsetup_r+0xa4>
 8005c96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c9a:	d1c5      	bne.n	8005c28 <__swsetup_r+0x24>
 8005c9c:	bd38      	pop	{r3, r4, r5, pc}
 8005c9e:	0799      	lsls	r1, r3, #30
 8005ca0:	bf58      	it	pl
 8005ca2:	6962      	ldrpl	r2, [r4, #20]
 8005ca4:	60a2      	str	r2, [r4, #8]
 8005ca6:	e7f4      	b.n	8005c92 <__swsetup_r+0x8e>
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e7f7      	b.n	8005c9c <__swsetup_r+0x98>
 8005cac:	20000018 	.word	0x20000018

08005cb0 <__swhatbuf_r>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	b096      	sub	sp, #88	@ 0x58
 8005cbc:	4615      	mov	r5, r2
 8005cbe:	461e      	mov	r6, r3
 8005cc0:	da0d      	bge.n	8005cde <__swhatbuf_r+0x2e>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005cc8:	f04f 0100 	mov.w	r1, #0
 8005ccc:	bf14      	ite	ne
 8005cce:	2340      	movne	r3, #64	@ 0x40
 8005cd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	6031      	str	r1, [r6, #0]
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	b016      	add	sp, #88	@ 0x58
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	466a      	mov	r2, sp
 8005ce0:	f000 f858 	bl	8005d94 <_fstat_r>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	dbec      	blt.n	8005cc2 <__swhatbuf_r+0x12>
 8005ce8:	9901      	ldr	r1, [sp, #4]
 8005cea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005cee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cf2:	4259      	negs	r1, r3
 8005cf4:	4159      	adcs	r1, r3
 8005cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cfa:	e7eb      	b.n	8005cd4 <__swhatbuf_r+0x24>

08005cfc <__smakebuf_r>:
 8005cfc:	898b      	ldrh	r3, [r1, #12]
 8005cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d00:	079d      	lsls	r5, r3, #30
 8005d02:	4606      	mov	r6, r0
 8005d04:	460c      	mov	r4, r1
 8005d06:	d507      	bpl.n	8005d18 <__smakebuf_r+0x1c>
 8005d08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	2301      	movs	r3, #1
 8005d12:	6163      	str	r3, [r4, #20]
 8005d14:	b003      	add	sp, #12
 8005d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d18:	ab01      	add	r3, sp, #4
 8005d1a:	466a      	mov	r2, sp
 8005d1c:	f7ff ffc8 	bl	8005cb0 <__swhatbuf_r>
 8005d20:	9f00      	ldr	r7, [sp, #0]
 8005d22:	4605      	mov	r5, r0
 8005d24:	4639      	mov	r1, r7
 8005d26:	4630      	mov	r0, r6
 8005d28:	f7ff fc24 	bl	8005574 <_malloc_r>
 8005d2c:	b948      	cbnz	r0, 8005d42 <__smakebuf_r+0x46>
 8005d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d32:	059a      	lsls	r2, r3, #22
 8005d34:	d4ee      	bmi.n	8005d14 <__smakebuf_r+0x18>
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	f043 0302 	orr.w	r3, r3, #2
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	e7e2      	b.n	8005d08 <__smakebuf_r+0xc>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	6020      	str	r0, [r4, #0]
 8005d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	9b01      	ldr	r3, [sp, #4]
 8005d4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d52:	b15b      	cbz	r3, 8005d6c <__smakebuf_r+0x70>
 8005d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f000 f82d 	bl	8005db8 <_isatty_r>
 8005d5e:	b128      	cbz	r0, 8005d6c <__smakebuf_r+0x70>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	431d      	orrs	r5, r3
 8005d70:	81a5      	strh	r5, [r4, #12]
 8005d72:	e7cf      	b.n	8005d14 <__smakebuf_r+0x18>

08005d74 <_close_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d06      	ldr	r5, [pc, #24]	@ (8005d90 <_close_r+0x1c>)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	f7fb fbbd 	bl	80014fe <_close>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_close_r+0x1a>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_close_r+0x1a>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	20000370 	.word	0x20000370

08005d94 <_fstat_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d07      	ldr	r5, [pc, #28]	@ (8005db4 <_fstat_r+0x20>)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	f7fb fbb8 	bl	8001516 <_fstat>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	d102      	bne.n	8005db0 <_fstat_r+0x1c>
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	b103      	cbz	r3, 8005db0 <_fstat_r+0x1c>
 8005dae:	6023      	str	r3, [r4, #0]
 8005db0:	bd38      	pop	{r3, r4, r5, pc}
 8005db2:	bf00      	nop
 8005db4:	20000370 	.word	0x20000370

08005db8 <_isatty_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d06      	ldr	r5, [pc, #24]	@ (8005dd4 <_isatty_r+0x1c>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fb fbb7 	bl	8001536 <_isatty>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_isatty_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_isatty_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	20000370 	.word	0x20000370

08005dd8 <_lseek_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d07      	ldr	r5, [pc, #28]	@ (8005df8 <_lseek_r+0x20>)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fb fbb0 	bl	800154c <_lseek>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_lseek_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_lseek_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	20000370 	.word	0x20000370

08005dfc <_read_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d07      	ldr	r5, [pc, #28]	@ (8005e1c <_read_r+0x20>)
 8005e00:	4604      	mov	r4, r0
 8005e02:	4608      	mov	r0, r1
 8005e04:	4611      	mov	r1, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f7fb fb5a 	bl	80014c4 <_read>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_read_r+0x1e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_read_r+0x1e>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	20000370 	.word	0x20000370

08005e20 <_sbrk_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d06      	ldr	r5, [pc, #24]	@ (8005e3c <_sbrk_r+0x1c>)
 8005e24:	2300      	movs	r3, #0
 8005e26:	4604      	mov	r4, r0
 8005e28:	4608      	mov	r0, r1
 8005e2a:	602b      	str	r3, [r5, #0]
 8005e2c:	f7fb fb9c 	bl	8001568 <_sbrk>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_sbrk_r+0x1a>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_sbrk_r+0x1a>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20000370 	.word	0x20000370

08005e40 <_write_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d07      	ldr	r5, [pc, #28]	@ (8005e60 <_write_r+0x20>)
 8005e44:	4604      	mov	r4, r0
 8005e46:	4608      	mov	r0, r1
 8005e48:	4611      	mov	r1, r2
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	602a      	str	r2, [r5, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7fb fbd2 	bl	80015f8 <_write>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_write_r+0x1e>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_write_r+0x1e>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	20000370 	.word	0x20000370

08005e64 <_free_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4605      	mov	r5, r0
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	d041      	beq.n	8005ef0 <_free_r+0x8c>
 8005e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e70:	1f0c      	subs	r4, r1, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bfb8      	it	lt
 8005e76:	18e4      	addlt	r4, r4, r3
 8005e78:	f7ff fe36 	bl	8005ae8 <__malloc_lock>
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef4 <_free_r+0x90>)
 8005e7e:	6813      	ldr	r3, [r2, #0]
 8005e80:	b933      	cbnz	r3, 8005e90 <_free_r+0x2c>
 8005e82:	6063      	str	r3, [r4, #4]
 8005e84:	6014      	str	r4, [r2, #0]
 8005e86:	4628      	mov	r0, r5
 8005e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e8c:	f7ff be32 	b.w	8005af4 <__malloc_unlock>
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d908      	bls.n	8005ea6 <_free_r+0x42>
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	1821      	adds	r1, r4, r0
 8005e98:	428b      	cmp	r3, r1
 8005e9a:	bf01      	itttt	eq
 8005e9c:	6819      	ldreq	r1, [r3, #0]
 8005e9e:	685b      	ldreq	r3, [r3, #4]
 8005ea0:	1809      	addeq	r1, r1, r0
 8005ea2:	6021      	streq	r1, [r4, #0]
 8005ea4:	e7ed      	b.n	8005e82 <_free_r+0x1e>
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	b10b      	cbz	r3, 8005eb0 <_free_r+0x4c>
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	d9fa      	bls.n	8005ea6 <_free_r+0x42>
 8005eb0:	6811      	ldr	r1, [r2, #0]
 8005eb2:	1850      	adds	r0, r2, r1
 8005eb4:	42a0      	cmp	r0, r4
 8005eb6:	d10b      	bne.n	8005ed0 <_free_r+0x6c>
 8005eb8:	6820      	ldr	r0, [r4, #0]
 8005eba:	4401      	add	r1, r0
 8005ebc:	1850      	adds	r0, r2, r1
 8005ebe:	4283      	cmp	r3, r0
 8005ec0:	6011      	str	r1, [r2, #0]
 8005ec2:	d1e0      	bne.n	8005e86 <_free_r+0x22>
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	6053      	str	r3, [r2, #4]
 8005eca:	4408      	add	r0, r1
 8005ecc:	6010      	str	r0, [r2, #0]
 8005ece:	e7da      	b.n	8005e86 <_free_r+0x22>
 8005ed0:	d902      	bls.n	8005ed8 <_free_r+0x74>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	602b      	str	r3, [r5, #0]
 8005ed6:	e7d6      	b.n	8005e86 <_free_r+0x22>
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	1821      	adds	r1, r4, r0
 8005edc:	428b      	cmp	r3, r1
 8005ede:	bf04      	itt	eq
 8005ee0:	6819      	ldreq	r1, [r3, #0]
 8005ee2:	685b      	ldreq	r3, [r3, #4]
 8005ee4:	6063      	str	r3, [r4, #4]
 8005ee6:	bf04      	itt	eq
 8005ee8:	1809      	addeq	r1, r1, r0
 8005eea:	6021      	streq	r1, [r4, #0]
 8005eec:	6054      	str	r4, [r2, #4]
 8005eee:	e7ca      	b.n	8005e86 <_free_r+0x22>
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
 8005ef2:	bf00      	nop
 8005ef4:	2000036c 	.word	0x2000036c

08005ef8 <_init>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr

08005f04 <_fini>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	bf00      	nop
 8005f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0a:	bc08      	pop	{r3}
 8005f0c:	469e      	mov	lr, r3
 8005f0e:	4770      	bx	lr
