
stm32f411_sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009080  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08009220  08009220  0000a220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097cc  080097cc  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  080097cc  080097cc  0000a7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d4  080097d4  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d4  080097d4  0000a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097d8  080097d8  0000a7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080097dc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006be4  20000080  0800985c  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006c64  0800985c  0000bc64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010068  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4d  00000000  00000000  0001b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aac  00000000  00000000  0001eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fc2  00000000  00000000  0001f61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014792  00000000  00000000  000385de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b3e8  00000000  00000000  0004cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8158  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000421c  00000000  00000000  000d819c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000dc3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009208 	.word	0x08009208

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08009208 	.word	0x08009208

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <getDir>:
	TCHAR filename[_MAX_LFN];//_MAX_LFN];
	DWORD size;
	BYTE attribute;
} lfFileInfo;

int getDir(char *path, lfFileInfo *answer) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b0d0      	sub	sp, #320	@ 0x140
 8000584:	af00      	add	r7, sp, #0
 8000586:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800058a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800058e:	6018      	str	r0, [r3, #0]
 8000590:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000594:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000598:	6019      	str	r1, [r3, #0]
	FATFS *fatFs;
	DIR *directoryO;
	FILINFO *fileInfo;
	volatile FRESULT resultF;
	TCHAR lfname[_MAX_LFN];//_MAX_LFN];
	int countFiles = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	char str[13];
	uint32_t freeclusters, freesectors, totalsectors;

	fatFs = malloc(sizeof(FATFS));
 80005a0:	f44f 700e 	mov.w	r0, #568	@ 0x238
 80005a4:	f007 fc5e 	bl	8007e64 <malloc>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	if(fatFs == NULL) while(1);
 80005ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <getDir+0x3a>
 80005b6:	bf00      	nop
 80005b8:	e7fd      	b.n	80005b6 <getDir+0x36>
	directoryO = malloc(sizeof(DIR));
 80005ba:	2034      	movs	r0, #52	@ 0x34
 80005bc:	f007 fc52 	bl	8007e64 <malloc>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	if(directoryO == NULL) while(1);
 80005c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <getDir+0x52>
 80005ce:	bf00      	nop
 80005d0:	e7fd      	b.n	80005ce <getDir+0x4e>
	fileInfo = malloc(sizeof(FILINFO));
 80005d2:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80005d6:	f007 fc45 	bl	8007e64 <malloc>
 80005da:	4603      	mov	r3, r0
 80005dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	if(fileInfo == NULL) while(1);
 80005e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d101      	bne.n	80005ec <getDir+0x6c>
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <getDir+0x68>

	/* Mount sdcard. */
	resultF = f_mount(fatFs, "", 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	4990      	ldr	r1, [pc, #576]	@ (8000830 <getDir+0x2b0>)
 80005f0:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80005f4:	f006 fb78 	bl	8006ce8 <f_mount>
 80005f8:	4603      	mov	r3, r0
 80005fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

	if (resultF == FR_OK) {
 80005fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	f040 810c 	bne.w	8000822 <getDir+0x2a2>
		/* read volume label. */
		resultF = f_getlabel("", str, 0);
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	2200      	movs	r2, #0
 8000610:	4619      	mov	r1, r3
 8000612:	4887      	ldr	r0, [pc, #540]	@ (8000830 <getDir+0x2b0>)
 8000614:	f007 fa4f 	bl	8007ab6 <f_getlabel>
 8000618:	4603      	mov	r3, r0
 800061a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

		if (resultF != FR_OK) {
 800061e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
		}

		/* Read directory contents. */
		resultF = f_opendir(directoryO, path);      // open 'root' directory.
 8000622:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000626:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800062a:	6819      	ldr	r1, [r3, #0]
 800062c:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8000630:	f007 f8b6 	bl	80077a0 <f_opendir>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
		if (resultF != 0) {
 800063a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
		}

		// long file name
		while (1) {
			//fileInfo->fname = lfname;
			strcpy(fileInfo->fname, lfname);
 800063e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000642:	3316      	adds	r3, #22
 8000644:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000648:	4611      	mov	r1, r2
 800064a:	4618      	mov	r0, r3
 800064c:	f007 feb5 	bl	80083ba <strcpy>
			fileInfo->fsize = _MAX_LFN - 1;
 8000650:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000654:	22fe      	movs	r2, #254	@ 0xfe
 8000656:	601a      	str	r2, [r3, #0]
			resultF = f_readdir(directoryO, fileInfo);
 8000658:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800065c:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8000660:	f007 f937 	bl	80078d2 <f_readdir>
 8000664:	4603      	mov	r3, r0
 8000666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
			if (resultF != 0) {
 800066a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
			}

			if (fileInfo->fname[0] == 0) {           // end of directory?
 800066e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000672:	7d9b      	ldrb	r3, [r3, #22]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d070      	beq.n	800075a <getDir+0x1da>
				break;
			}

			strncpy(answer[countFiles].filename,
 8000678:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800067c:	4613      	mov	r3, r2
 800067e:	015b      	lsls	r3, r3, #5
 8000680:	4413      	add	r3, r2
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	461a      	mov	r2, r3
 8000686:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800068a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4413      	add	r3, r2
 8000692:	4618      	mov	r0, r3
			        fileInfo->fname[0] ? fileInfo->fname : fileInfo->fname, _MAX_LFN - 1);
 8000694:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000698:	3316      	adds	r3, #22
			strncpy(answer[countFiles].filename,
 800069a:	22fe      	movs	r2, #254	@ 0xfe
 800069c:	4619      	mov	r1, r3
 800069e:	f007 fe33 	bl	8008308 <strncpy>
			answer[countFiles].size = fileInfo->fsize;
 80006a2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80006a6:	4613      	mov	r3, r2
 80006a8:	015b      	lsls	r3, r3, #5
 80006aa:	4413      	add	r3, r2
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	461a      	mov	r2, r3
 80006b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
			answer[countFiles].attribute = fileInfo->fattrib;
 80006c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80006ca:	4613      	mov	r3, r2
 80006cc:	015b      	lsls	r3, r3, #5
 80006ce:	4413      	add	r3, r2
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	461a      	mov	r2, r3
 80006d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80006e4:	7a12      	ldrb	r2, [r2, #8]
 80006e6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104

			countFiles++;
 80006ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80006ee:	3301      	adds	r3, #1
 80006f0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
			if (fileInfo->fattrib & AM_DIR) {        // is it a directory?
 80006f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80006f8:	7a1b      	ldrb	r3, [r3, #8]
 80006fa:	f003 0310 	and.w	r3, r3, #16
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d19d      	bne.n	800063e <getDir+0xbe>
			} else {                                  // it is a file.
				char size[5];
				if (fileInfo->fsize > 1048575) {
 8000702:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800070c:	d30a      	bcc.n	8000724 <getDir+0x1a4>
					sprintf(size, "%3ldM", fileInfo->fsize / 1048576);
 800070e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	0d1a      	lsrs	r2, r3, #20
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4946      	ldr	r1, [pc, #280]	@ (8000834 <getDir+0x2b4>)
 800071c:	4618      	mov	r0, r3
 800071e:	f007 fc5f 	bl	8007fe0 <siprintf>
 8000722:	e78c      	b.n	800063e <getDir+0xbe>
				} else if (fileInfo->fsize > 1023) {
 8000724:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800072e:	d30a      	bcc.n	8000746 <getDir+0x1c6>
					sprintf(size, "%3ldK", fileInfo->fsize / 1024);
 8000730:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	0a9a      	lsrs	r2, r3, #10
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	493e      	ldr	r1, [pc, #248]	@ (8000838 <getDir+0x2b8>)
 800073e:	4618      	mov	r0, r3
 8000740:	f007 fc4e 	bl	8007fe0 <siprintf>
 8000744:	e77b      	b.n	800063e <getDir+0xbe>
				} else {
					sprintf(size, "%3ld ", fileInfo->fsize);
 8000746:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	493a      	ldr	r1, [pc, #232]	@ (800083c <getDir+0x2bc>)
 8000752:	4618      	mov	r0, r3
 8000754:	f007 fc44 	bl	8007fe0 <siprintf>
			strcpy(fileInfo->fname, lfname);
 8000758:	e771      	b.n	800063e <getDir+0xbe>
				break;
 800075a:	bf00      	nop
				}
			}
		}

		/* get volume bytes info. */
		resultF = f_getfree("", &freeclusters, fatFs);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000764:	4619      	mov	r1, r3
 8000766:	4832      	ldr	r0, [pc, #200]	@ (8000830 <getDir+0x2b0>)
 8000768:	f007 f8f0 	bl	800794c <f_getfree>
 800076c:	4603      	mov	r3, r0
 800076e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

		if (resultF != FR_OK) {
 8000772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
		}

		totalsectors = (fatFs->n_fatent - 2) * fatFs->csize;
 8000776:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	3b02      	subs	r3, #2
 800077e:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000782:	8952      	ldrh	r2, [r2, #10]
 8000784:	fb02 f303 	mul.w	r3, r2, r3
 8000788:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		freesectors = freeclusters * fatFs->csize;
 800078c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000790:	895b      	ldrh	r3, [r3, #10]
 8000792:	461a      	mov	r2, r3
 8000794:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000798:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	fb02 f303 	mul.w	r3, r2, r3
 80007a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

		itoa(totalsectors, str, 10);
 80007a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80007aa:	f107 0118 	add.w	r1, r7, #24
 80007ae:	220a      	movs	r2, #10
 80007b0:	4618      	mov	r0, r3
 80007b2:	f007 fb55 	bl	8007e60 <itoa>
		itoa(freesectors, str, 10);
 80007b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007ba:	f107 0118 	add.w	r1, r7, #24
 80007be:	220a      	movs	r2, #10
 80007c0:	4618      	mov	r0, r3
 80007c2:	f007 fb4d 	bl	8007e60 <itoa>
		itoa((totalsectors / 2), str, 10);
 80007c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80007ca:	085b      	lsrs	r3, r3, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	220a      	movs	r2, #10
 80007d4:	4619      	mov	r1, r3
 80007d6:	f007 fb43 	bl	8007e60 <itoa>
		itoa((freesectors / 2), str, 10);
 80007da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007de:	085b      	lsrs	r3, r3, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	220a      	movs	r2, #10
 80007e8:	4619      	mov	r1, r3
 80007ea:	f007 fb39 	bl	8007e60 <itoa>

		f_closedir(directoryO);
 80007ee:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80007f2:	f007 f848 	bl	8007886 <f_closedir>

		// unmount
		resultF = f_mount(NULL, "", 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	490d      	ldr	r1, [pc, #52]	@ (8000830 <getDir+0x2b0>)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f006 fa74 	bl	8006ce8 <f_mount>
 8000800:	4603      	mov	r3, r0
 8000802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
		free(fatFs);
 8000806:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800080a:	f007 fb33 	bl	8007e74 <free>
		free(directoryO);
 800080e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8000812:	f007 fb2f 	bl	8007e74 <free>
		free(fileInfo);
 8000816:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800081a:	f007 fb2b 	bl	8007e74 <free>
		if (resultF != FR_OK) {
 800081e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
		}
	}
	return countFiles;
 8000822:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 8000826:	4618      	mov	r0, r3
 8000828:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	08009220 	.word	0x08009220
 8000834:	08009224 	.word	0x08009224
 8000838:	0800922c 	.word	0x0800922c
 800083c:	08009234 	.word	0x08009234

08000840 <app>:

void app() {
 8000840:	b580      	push	{r7, lr}
 8000842:	b0e8      	sub	sp, #416	@ 0x1a0
 8000844:	af00      	add	r7, sp, #0
	// uart 초기화
	initUart(&huart2);
 8000846:	48a6      	ldr	r0, [pc, #664]	@ (8000ae0 <app+0x2a0>)
 8000848:	f001 f962 	bl	8001b10 <initUart>

	// 경로내의 파일 목록 읽기 예제
	int countFiles;
	static lfFileInfo list[100];	// 디렉토리당 최대 파일의 개수
	// 구조체 초기화
	for (int i = 0; i < 6; i++) {
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000852:	e00e      	b.n	8000872 <app+0x32>
		list[i].filename[0] = 0;
 8000854:	49a3      	ldr	r1, [pc, #652]	@ (8000ae4 <app+0x2a4>)
 8000856:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800085a:	4613      	mov	r3, r2
 800085c:	015b      	lsls	r3, r3, #5
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++) {
 8000868:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800086c:	3301      	adds	r3, #1
 800086e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000872:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000876:	2b05      	cmp	r3, #5
 8000878:	ddec      	ble.n	8000854 <app+0x14>
	}
	// 파일 목록 가져오기
	countFiles = getDir("/", list);
 800087a:	499a      	ldr	r1, [pc, #616]	@ (8000ae4 <app+0x2a4>)
 800087c:	489a      	ldr	r0, [pc, #616]	@ (8000ae8 <app+0x2a8>)
 800087e:	f7ff fe7f 	bl	8000580 <getDir>
 8000882:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
	char tmp[20];
	char str[_MAX_LFN];
	// 가져온 파일 목록 인쇄
	for (int i = 0; i < countFiles; i++) {
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800088c:	e0a7      	b.n	80009de <app+0x19e>
		if (list[i].filename[0] != 0) { // 파일 이름이 있는 경우
 800088e:	4995      	ldr	r1, [pc, #596]	@ (8000ae4 <app+0x2a4>)
 8000890:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000894:	4613      	mov	r3, r2
 8000896:	015b      	lsls	r3, r3, #5
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	440b      	add	r3, r1
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 8097 	beq.w	80009d4 <app+0x194>
			char sizeString[5];
			// convert size
			if (list[i].size > 1048575) {
 80008a6:	498f      	ldr	r1, [pc, #572]	@ (8000ae4 <app+0x2a4>)
 80008a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80008ac:	4613      	mov	r3, r2
 80008ae:	015b      	lsls	r3, r3, #5
 80008b0:	4413      	add	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80008c0:	d311      	bcc.n	80008e6 <app+0xa6>
				printf(sizeString, "%3dM", list[i].size / 1048576);
 80008c2:	4988      	ldr	r1, [pc, #544]	@ (8000ae4 <app+0x2a4>)
 80008c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80008c8:	4613      	mov	r3, r2
 80008ca:	015b      	lsls	r3, r3, #5
 80008cc:	4413      	add	r3, r2
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	440b      	add	r3, r1
 80008d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	0d1a      	lsrs	r2, r3, #20
 80008da:	463b      	mov	r3, r7
 80008dc:	4983      	ldr	r1, [pc, #524]	@ (8000aec <app+0x2ac>)
 80008de:	4618      	mov	r0, r3
 80008e0:	f007 fca2 	bl	8008228 <iprintf>
 80008e4:	e02f      	b.n	8000946 <app+0x106>
			} else if (list[i].size > 1023) {
 80008e6:	497f      	ldr	r1, [pc, #508]	@ (8000ae4 <app+0x2a4>)
 80008e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80008ec:	4613      	mov	r3, r2
 80008ee:	015b      	lsls	r3, r3, #5
 80008f0:	4413      	add	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	440b      	add	r3, r1
 80008f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000900:	d311      	bcc.n	8000926 <app+0xe6>
				printf(sizeString, "%3dK", list[i].size / 1024);
 8000902:	4978      	ldr	r1, [pc, #480]	@ (8000ae4 <app+0x2a4>)
 8000904:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000908:	4613      	mov	r3, r2
 800090a:	015b      	lsls	r3, r3, #5
 800090c:	4413      	add	r3, r2
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	440b      	add	r3, r1
 8000912:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	0a9a      	lsrs	r2, r3, #10
 800091a:	463b      	mov	r3, r7
 800091c:	4974      	ldr	r1, [pc, #464]	@ (8000af0 <app+0x2b0>)
 800091e:	4618      	mov	r0, r3
 8000920:	f007 fc82 	bl	8008228 <iprintf>
 8000924:	e00f      	b.n	8000946 <app+0x106>
			} else {
				printf(sizeString, "%3d ", list[i].size);
 8000926:	496f      	ldr	r1, [pc, #444]	@ (8000ae4 <app+0x2a4>)
 8000928:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800092c:	4613      	mov	r3, r2
 800092e:	015b      	lsls	r3, r3, #5
 8000930:	4413      	add	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	440b      	add	r3, r1
 8000936:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	463b      	mov	r3, r7
 800093e:	496d      	ldr	r1, [pc, #436]	@ (8000af4 <app+0x2b4>)
 8000940:	4618      	mov	r0, r3
 8000942:	f007 fc71 	bl	8008228 <iprintf>
			}
			// convert string
			if (list[i].attribute & AM_DIR) {
 8000946:	4967      	ldr	r1, [pc, #412]	@ (8000ae4 <app+0x2a4>)
 8000948:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800094c:	4613      	mov	r3, r2
 800094e:	015b      	lsls	r3, r3, #5
 8000950:	4413      	add	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	440b      	add	r3, r1
 8000956:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	2b00      	cmp	r3, #0
 8000962:	d019      	beq.n	8000998 <app+0x158>
				strcpy(tmp, list[i].filename);
 8000964:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000968:	4613      	mov	r3, r2
 800096a:	015b      	lsls	r3, r3, #5
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4a5c      	ldr	r2, [pc, #368]	@ (8000ae4 <app+0x2a4>)
 8000972:	441a      	add	r2, r3
 8000974:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f007 fd1d 	bl	80083ba <strcpy>
				tmp[17] = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f887 3185 	strb.w	r3, [r7, #389]	@ 0x185
				printf(str, " <%s>", tmp);
 8000986:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 800098a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800098e:	495a      	ldr	r1, [pc, #360]	@ (8000af8 <app+0x2b8>)
 8000990:	4618      	mov	r0, r3
 8000992:	f007 fc49 	bl	8008228 <iprintf>
 8000996:	e018      	b.n	80009ca <app+0x18a>
			} else {
				strcpy(tmp, list[i].filename);
 8000998:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800099c:	4613      	mov	r3, r2
 800099e:	015b      	lsls	r3, r3, #5
 80009a0:	4413      	add	r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	4a4f      	ldr	r2, [pc, #316]	@ (8000ae4 <app+0x2a4>)
 80009a6:	441a      	add	r2, r3
 80009a8:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fd03 	bl	80083ba <strcpy>
				tmp[15] = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 3183 	strb.w	r3, [r7, #387]	@ 0x183
				printf(str, "%-16s-%s", tmp, sizeString);
 80009ba:	463b      	mov	r3, r7
 80009bc:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 80009c0:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80009c4:	494d      	ldr	r1, [pc, #308]	@ (8000afc <app+0x2bc>)
 80009c6:	f007 fc2f 	bl	8008228 <iprintf>
			}
			printf(str);
 80009ca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80009ce:	4618      	mov	r0, r3
 80009d0:	f007 fc2a 	bl	8008228 <iprintf>
	for (int i = 0; i < countFiles; i++) {
 80009d4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80009d8:	3301      	adds	r3, #1
 80009da:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80009de:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80009e2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80009e6:	429a      	cmp	r2, r3
 80009e8:	f6ff af51 	blt.w	800088e <app+0x4e>
		}
	}

	// 파일 읽기 및 쓰기 예제
	char message[100] = {0,};
 80009ec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80009f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2260      	movs	r2, #96	@ 0x60
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 fc95 	bl	800832e <memset>
	unsigned int	writeSize;
	unsigned int	readSize;
	// 메모리 할당
	fatfs = malloc(sizeof(FATFS));
 8000a04:	f44f 700e 	mov.w	r0, #568	@ 0x238
 8000a08:	f007 fa2c 	bl	8007e64 <malloc>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
	file = malloc(sizeof(FIL));
 8000a12:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8000a16:	f007 fa25 	bl	8007e64 <malloc>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	// 디스크 마운트
	f_mount(fatfs, "0:", 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	4937      	ldr	r1, [pc, #220]	@ (8000b00 <app+0x2c0>)
 8000a24:	f8d7 0190 	ldr.w	r0, [r7, #400]	@ 0x190
 8000a28:	f006 f95e 	bl	8006ce8 <f_mount>
	// 파일 읽기
	fresult = f_open(file, "message.txt", FA_READ);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4935      	ldr	r1, [pc, #212]	@ (8000b04 <app+0x2c4>)
 8000a30:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8000a34:	f006 f99e 	bl	8006d74 <f_open>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
	if(fresult) printf("fail open message.txt\n");
 8000a3e:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <app+0x20c>
 8000a46:	4830      	ldr	r0, [pc, #192]	@ (8000b08 <app+0x2c8>)
 8000a48:	f007 fc56 	bl	80082f8 <puts>
	fresult = f_read(file, message, 100, &readSize);
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	f107 0110 	add.w	r1, r7, #16
 8000a54:	2264      	movs	r2, #100	@ 0x64
 8000a56:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8000a5a:	f006 fb45 	bl	80070e8 <f_read>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
	if(fresult) printf("fail read\n");
 8000a64:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <app+0x232>
 8000a6c:	4827      	ldr	r0, [pc, #156]	@ (8000b0c <app+0x2cc>)
 8000a6e:	f007 fc43 	bl	80082f8 <puts>
	f_close(file);
 8000a72:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8000a76:	f006 fe69 	bl	800774c <f_close>
	// 파일 쓰기
	fresult = f_open(file, "message2.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000a7a:	220a      	movs	r2, #10
 8000a7c:	4924      	ldr	r1, [pc, #144]	@ (8000b10 <app+0x2d0>)
 8000a7e:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8000a82:	f006 f977 	bl	8006d74 <f_open>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
	if(fresult) printf("fail open message2.txt\n");
 8000a8c:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <app+0x25a>
 8000a94:	481f      	ldr	r0, [pc, #124]	@ (8000b14 <app+0x2d4>)
 8000a96:	f007 fc2f 	bl	80082f8 <puts>
	fresult = f_write(file, message, strlen(message), &writeSize);
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fb9e 	bl	80001e0 <strlen>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	f107 0110 	add.w	r1, r7, #16
 8000aae:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8000ab2:	f006 fc58 	bl	8007366 <f_write>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
	if(fresult) printf("fail write\n");
 8000abc:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <app+0x28a>
 8000ac4:	4814      	ldr	r0, [pc, #80]	@ (8000b18 <app+0x2d8>)
 8000ac6:	f007 fc17 	bl	80082f8 <puts>
	f_close(file);
 8000aca:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8000ace:	f006 fe3d 	bl	800774c <f_close>
	// 디스크 언마운트
	f_unmount("0:");
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	490a      	ldr	r1, [pc, #40]	@ (8000b00 <app+0x2c0>)
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f006 f906 	bl	8006ce8 <f_mount>
	while(1) {
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <app+0x29c>
 8000ae0:	20006818 	.word	0x20006818
 8000ae4:	2000009c 	.word	0x2000009c
 8000ae8:	0800923c 	.word	0x0800923c
 8000aec:	08009240 	.word	0x08009240
 8000af0:	08009248 	.word	0x08009248
 8000af4:	08009250 	.word	0x08009250
 8000af8:	08009258 	.word	0x08009258
 8000afc:	08009260 	.word	0x08009260
 8000b00:	0800926c 	.word	0x0800926c
 8000b04:	08009270 	.word	0x08009270
 8000b08:	0800927c 	.word	0x0800927c
 8000b0c:	08009294 	.word	0x08009294
 8000b10:	080092a0 	.word	0x080092a0
 8000b14:	080092b0 	.word	0x080092b0
 8000b18:	080092c8 	.word	0x080092c8

08000b1c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <SELECT+0x14>)
 8000b26:	f001 fbcd 	bl	80022c4 <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020000 	.word	0x40020000

08000b34 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <DESELECT+0x14>)
 8000b3e:	f001 fbc1 	bl	80022c4 <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020000 	.word	0x40020000

08000b4c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000b56:	bf00      	nop
 8000b58:	4808      	ldr	r0, [pc, #32]	@ (8000b7c <SPI_TxByte+0x30>)
 8000b5a:	f002 fb9b 	bl	8003294 <HAL_SPI_GetState>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d1f9      	bne.n	8000b58 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000b64:	1df9      	adds	r1, r7, #7
 8000b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <SPI_TxByte+0x30>)
 8000b6e:	f002 f8a4 	bl	8002cba <HAL_SPI_Transmit>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200067c0 	.word	0x200067c0

08000b80 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000b86:	23ff      	movs	r3, #255	@ 0xff
 8000b88:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000b8e:	bf00      	nop
 8000b90:	4809      	ldr	r0, [pc, #36]	@ (8000bb8 <SPI_RxByte+0x38>)
 8000b92:	f002 fb7f 	bl	8003294 <HAL_SPI_GetState>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d1f9      	bne.n	8000b90 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000b9c:	1dba      	adds	r2, r7, #6
 8000b9e:	1df9      	adds	r1, r7, #7
 8000ba0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	4803      	ldr	r0, [pc, #12]	@ (8000bb8 <SPI_RxByte+0x38>)
 8000baa:	f002 f9ca 	bl	8002f42 <HAL_SPI_TransmitReceive>

  return data;
 8000bae:	79bb      	ldrb	r3, [r7, #6]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200067c0 	.word	0x200067c0

08000bbc <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000bc4:	f7ff ffdc 	bl	8000b80 <SPI_RxByte>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	701a      	strb	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <SD_ReadyWait+0x34>)
 8000be0:	2232      	movs	r2, #50	@ 0x32
 8000be2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000be4:	f7ff ffcc 	bl	8000b80 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000be8:	f7ff ffca 	bl	8000b80 <SPI_RxByte>
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2bff      	cmp	r3, #255	@ 0xff
 8000bf4:	d004      	beq.n	8000c00 <SD_ReadyWait+0x28>
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <SD_ReadyWait+0x34>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1f3      	bne.n	8000be8 <SD_ReadyWait+0x10>

  return res;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20006866 	.word	0x20006866

08000c10 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000c16:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000c1a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000c1c:	f7ff ff8a 	bl	8000b34 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	e005      	b.n	8000c32 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c26:	20ff      	movs	r0, #255	@ 0xff
 8000c28:	f7ff ff90 	bl	8000b4c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	2b09      	cmp	r3, #9
 8000c36:	ddf6      	ble.n	8000c26 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000c38:	f7ff ff70 	bl	8000b1c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000c3c:	2340      	movs	r3, #64	@ 0x40
 8000c3e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000c50:	2395      	movs	r3, #149	@ 0x95
 8000c52:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e009      	b.n	8000c6e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000c5a:	1d3a      	adds	r2, r7, #4
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff72 	bl	8000b4c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	ddf2      	ble.n	8000c5a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000c74:	e002      	b.n	8000c7c <SD_PowerOn+0x6c>
  {
    Count--;
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000c7c:	f7ff ff80 	bl	8000b80 <SPI_RxByte>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d002      	beq.n	8000c8c <SD_PowerOn+0x7c>
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1f4      	bne.n	8000c76 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000c8c:	f7ff ff52 	bl	8000b34 <DESELECT>
  SPI_TxByte(0XFF);
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	f7ff ff5b 	bl	8000b4c <SPI_TxByte>

  PowerFlag = 1;
 8000c96:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <SD_PowerOn+0x94>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200067bd 	.word	0x200067bd

08000ca8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <SD_PowerOff+0x14>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	200067bd 	.word	0x200067bd

08000cc0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <SD_CheckPower+0x14>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200067bd 	.word	0x200067bd

08000cd8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <SD_RxDataBlock+0x68>)
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000ce8:	f7ff ff4a 	bl	8000b80 <SPI_RxByte>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2bff      	cmp	r3, #255	@ 0xff
 8000cf4:	d104      	bne.n	8000d00 <SD_RxDataBlock+0x28>
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <SD_RxDataBlock+0x68>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f3      	bne.n	8000ce8 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d04:	d001      	beq.n	8000d0a <SD_RxDataBlock+0x32>
    return FALSE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e016      	b.n	8000d38 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	1c5a      	adds	r2, r3, #1
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff53 	bl	8000bbc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff4d 	bl	8000bbc <SPI_RxBytePtr>
  } while(btr -= 2);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	3b02      	subs	r3, #2
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1ed      	bne.n	8000d0a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000d2e:	f7ff ff27 	bl	8000b80 <SPI_RxByte>
  SPI_RxByte();
 8000d32:	f7ff ff25 	bl	8000b80 <SPI_RxByte>

  return TRUE;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20006865 	.word	0x20006865

08000d44 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000d54:	f7ff ff40 	bl	8000bd8 <SD_ReadyWait>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2bff      	cmp	r3, #255	@ 0xff
 8000d5c:	d001      	beq.n	8000d62 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e040      	b.n	8000de4 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fef1 	bl	8000b4c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	2bfd      	cmp	r3, #253	@ 0xfd
 8000d6e:	d031      	beq.n	8000dd4 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fee5 	bl	8000b4c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fede 	bl	8000b4c <SPI_TxByte>
    } while (--wc);
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	73bb      	strb	r3, [r7, #14]
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1eb      	bne.n	8000d74 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000d9c:	f7ff fef0 	bl	8000b80 <SPI_RxByte>
    SPI_RxByte();
 8000da0:	f7ff feee 	bl	8000b80 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000da4:	e00b      	b.n	8000dbe <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000da6:	f7ff feeb 	bl	8000b80 <SPI_RxByte>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	f003 031f 	and.w	r3, r3, #31
 8000db4:	2b05      	cmp	r3, #5
 8000db6:	d006      	beq.n	8000dc6 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000db8:	7b7b      	ldrb	r3, [r7, #13]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000dbe:	7b7b      	ldrb	r3, [r7, #13]
 8000dc0:	2b40      	cmp	r3, #64	@ 0x40
 8000dc2:	d9f0      	bls.n	8000da6 <SD_TxDataBlock+0x62>
 8000dc4:	e000      	b.n	8000dc8 <SD_TxDataBlock+0x84>
        break;
 8000dc6:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000dc8:	bf00      	nop
 8000dca:	f7ff fed9 	bl	8000b80 <SPI_RxByte>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0fa      	beq.n	8000dca <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	d101      	bne.n	8000de2 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000df8:	f7ff feee 	bl	8000bd8 <SD_ReadyWait>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2bff      	cmp	r3, #255	@ 0xff
 8000e00:	d001      	beq.n	8000e06 <SD_SendCmd+0x1a>
    return 0xFF;
 8000e02:	23ff      	movs	r3, #255	@ 0xff
 8000e04:	e040      	b.n	8000e88 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fe9f 	bl	8000b4c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	0e1b      	lsrs	r3, r3, #24
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe99 	bl	8000b4c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	0c1b      	lsrs	r3, r3, #16
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fe93 	bl	8000b4c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe8d 	bl	8000b4c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fe88 	bl	8000b4c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b40      	cmp	r3, #64	@ 0x40
 8000e44:	d101      	bne.n	8000e4a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000e46:	2395      	movs	r3, #149	@ 0x95
 8000e48:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b48      	cmp	r3, #72	@ 0x48
 8000e4e:	d101      	bne.n	8000e54 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000e50:	2387      	movs	r3, #135	@ 0x87
 8000e52:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fe78 	bl	8000b4c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b4c      	cmp	r3, #76	@ 0x4c
 8000e60:	d101      	bne.n	8000e66 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000e62:	f7ff fe8d 	bl	8000b80 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000e66:	230a      	movs	r3, #10
 8000e68:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000e6a:	f7ff fe89 	bl	8000b80 <SPI_RxByte>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000e72:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	da05      	bge.n	8000e86 <SD_SendCmd+0x9a>
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	73bb      	strb	r3, [r7, #14]
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f1      	bne.n	8000e6a <SD_SendCmd+0x7e>

  return res;
 8000e86:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e0d5      	b.n	8001050 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000ea4:	4b6c      	ldr	r3, [pc, #432]	@ (8001058 <SD_disk_initialize+0x1c8>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <SD_disk_initialize+0x2a>
    return Stat;
 8000eb2:	4b69      	ldr	r3, [pc, #420]	@ (8001058 <SD_disk_initialize+0x1c8>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	e0ca      	b.n	8001050 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000eba:	f7ff fea9 	bl	8000c10 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000ebe:	f7ff fe2d 	bl	8000b1c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2040      	movs	r0, #64	@ 0x40
 8000eca:	f7ff ff8f 	bl	8000dec <SD_SendCmd>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	f040 80a5 	bne.w	8001020 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000ed6:	4b61      	ldr	r3, [pc, #388]	@ (800105c <SD_disk_initialize+0x1cc>)
 8000ed8:	2264      	movs	r2, #100	@ 0x64
 8000eda:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000edc:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000ee0:	2048      	movs	r0, #72	@ 0x48
 8000ee2:	f7ff ff83 	bl	8000dec <SD_SendCmd>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d158      	bne.n	8000f9e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e00c      	b.n	8000f0c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000ef2:	7bfc      	ldrb	r4, [r7, #15]
 8000ef4:	f7ff fe44 	bl	8000b80 <SPI_RxByte>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	f104 0310 	add.w	r3, r4, #16
 8000f00:	443b      	add	r3, r7
 8000f02:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d9ef      	bls.n	8000ef2 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f12:	7abb      	ldrb	r3, [r7, #10]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	f040 8083 	bne.w	8001020 <SD_disk_initialize+0x190>
 8000f1a:	7afb      	ldrb	r3, [r7, #11]
 8000f1c:	2baa      	cmp	r3, #170	@ 0xaa
 8000f1e:	d17f      	bne.n	8001020 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000f20:	2100      	movs	r1, #0
 8000f22:	2077      	movs	r0, #119	@ 0x77
 8000f24:	f7ff ff62 	bl	8000dec <SD_SendCmd>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d807      	bhi.n	8000f3e <SD_disk_initialize+0xae>
 8000f2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f32:	2069      	movs	r0, #105	@ 0x69
 8000f34:	f7ff ff5a 	bl	8000dec <SD_SendCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d005      	beq.n	8000f4a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000f3e:	4b47      	ldr	r3, [pc, #284]	@ (800105c <SD_disk_initialize+0x1cc>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1eb      	bne.n	8000f20 <SD_disk_initialize+0x90>
 8000f48:	e000      	b.n	8000f4c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000f4a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f4c:	4b43      	ldr	r3, [pc, #268]	@ (800105c <SD_disk_initialize+0x1cc>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d064      	beq.n	8001020 <SD_disk_initialize+0x190>
 8000f56:	2100      	movs	r1, #0
 8000f58:	207a      	movs	r0, #122	@ 0x7a
 8000f5a:	f7ff ff47 	bl	8000dec <SD_SendCmd>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d15d      	bne.n	8001020 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e00c      	b.n	8000f84 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000f6a:	7bfc      	ldrb	r4, [r7, #15]
 8000f6c:	f7ff fe08 	bl	8000b80 <SPI_RxByte>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	f104 0310 	add.w	r3, r4, #16
 8000f78:	443b      	add	r3, r7
 8000f7a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d9ef      	bls.n	8000f6a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000f8a:	7a3b      	ldrb	r3, [r7, #8]
 8000f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SD_disk_initialize+0x108>
 8000f94:	2306      	movs	r3, #6
 8000f96:	e000      	b.n	8000f9a <SD_disk_initialize+0x10a>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	73bb      	strb	r3, [r7, #14]
 8000f9c:	e040      	b.n	8001020 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2077      	movs	r0, #119	@ 0x77
 8000fa2:	f7ff ff23 	bl	8000dec <SD_SendCmd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d808      	bhi.n	8000fbe <SD_disk_initialize+0x12e>
 8000fac:	2100      	movs	r1, #0
 8000fae:	2069      	movs	r0, #105	@ 0x69
 8000fb0:	f7ff ff1c 	bl	8000dec <SD_SendCmd>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d801      	bhi.n	8000fbe <SD_disk_initialize+0x12e>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e000      	b.n	8000fc0 <SD_disk_initialize+0x130>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d10e      	bne.n	8000fe6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2077      	movs	r0, #119	@ 0x77
 8000fcc:	f7ff ff0e 	bl	8000dec <SD_SendCmd>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d80e      	bhi.n	8000ff4 <SD_disk_initialize+0x164>
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2069      	movs	r0, #105	@ 0x69
 8000fda:	f7ff ff07 	bl	8000dec <SD_SendCmd>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d107      	bne.n	8000ff4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000fe4:	e00d      	b.n	8001002 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2041      	movs	r0, #65	@ 0x41
 8000fea:	f7ff feff 	bl	8000dec <SD_SendCmd>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000ff4:	4b19      	ldr	r3, [pc, #100]	@ (800105c <SD_disk_initialize+0x1cc>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1e1      	bne.n	8000fc2 <SD_disk_initialize+0x132>
 8000ffe:	e000      	b.n	8001002 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001000:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <SD_disk_initialize+0x1cc>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <SD_disk_initialize+0x18c>
 800100c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001010:	2050      	movs	r0, #80	@ 0x50
 8001012:	f7ff feeb 	bl	8000dec <SD_SendCmd>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001020:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <SD_disk_initialize+0x1d0>)
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001026:	f7ff fd85 	bl	8000b34 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800102a:	f7ff fda9 	bl	8000b80 <SPI_RxByte>

  if (type)
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d008      	beq.n	8001046 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <SD_disk_initialize+0x1c8>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f023 0301 	bic.w	r3, r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <SD_disk_initialize+0x1c8>)
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e001      	b.n	800104a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001046:	f7ff fe2f 	bl	8000ca8 <SD_PowerOff>
  }

  return Stat;
 800104a:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <SD_disk_initialize+0x1c8>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	20006865 	.word	0x20006865
 8001060:	200067bc 	.word	0x200067bc

08001064 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001074:	2301      	movs	r3, #1
 8001076:	e002      	b.n	800107e <SD_disk_status+0x1a>

  return Stat;
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SD_disk_status+0x28>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000000 	.word	0x20000000

08001090 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <SD_disk_read+0x1c>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <SD_disk_read+0x20>
    return RES_PARERR;
 80010ac:	2304      	movs	r3, #4
 80010ae:	e051      	b.n	8001154 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80010b0:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <SD_disk_read+0xcc>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80010be:	2303      	movs	r3, #3
 80010c0:	e048      	b.n	8001154 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80010c2:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <SD_disk_read+0xd0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	025b      	lsls	r3, r3, #9
 80010d2:	607b      	str	r3, [r7, #4]

  SELECT();
 80010d4:	f7ff fd22 	bl	8000b1c <SELECT>

  if (count == 1)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d111      	bne.n	8001102 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	2051      	movs	r0, #81	@ 0x51
 80010e2:	f7ff fe83 	bl	8000dec <SD_SendCmd>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d129      	bne.n	8001140 <SD_disk_read+0xb0>
 80010ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f7ff fdf1 	bl	8000cd8 <SD_RxDataBlock>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d021      	beq.n	8001140 <SD_disk_read+0xb0>
      count = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	e01e      	b.n	8001140 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	2052      	movs	r0, #82	@ 0x52
 8001106:	f7ff fe71 	bl	8000dec <SD_SendCmd>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d117      	bne.n	8001140 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001110:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001114:	68b8      	ldr	r0, [r7, #8]
 8001116:	f7ff fddf 	bl	8000cd8 <SD_RxDataBlock>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00a      	beq.n	8001136 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001126:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1ed      	bne.n	8001110 <SD_disk_read+0x80>
 8001134:	e000      	b.n	8001138 <SD_disk_read+0xa8>
          break;
 8001136:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001138:	2100      	movs	r1, #0
 800113a:	204c      	movs	r0, #76	@ 0x4c
 800113c:	f7ff fe56 	bl	8000dec <SD_SendCmd>
    }
  }

  DESELECT();
 8001140:	f7ff fcf8 	bl	8000b34 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001144:	f7ff fd1c 	bl	8000b80 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	200067bc 	.word	0x200067bc

08001164 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <SD_disk_write+0x1c>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <SD_disk_write+0x20>
    return RES_PARERR;
 8001180:	2304      	movs	r3, #4
 8001182:	e06b      	b.n	800125c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001184:	4b37      	ldr	r3, [pc, #220]	@ (8001264 <SD_disk_write+0x100>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001192:	2303      	movs	r3, #3
 8001194:	e062      	b.n	800125c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001196:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <SD_disk_write+0x100>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SD_disk_write+0x44>
    return RES_WRPRT;
 80011a4:	2302      	movs	r3, #2
 80011a6:	e059      	b.n	800125c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80011a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <SD_disk_write+0x104>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	607b      	str	r3, [r7, #4]

  SELECT();
 80011ba:	f7ff fcaf 	bl	8000b1c <SELECT>

  if (count == 1)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d110      	bne.n	80011e6 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	2058      	movs	r0, #88	@ 0x58
 80011c8:	f7ff fe10 	bl	8000dec <SD_SendCmd>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d13a      	bne.n	8001248 <SD_disk_write+0xe4>
 80011d2:	21fe      	movs	r1, #254	@ 0xfe
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f7ff fdb5 	bl	8000d44 <SD_TxDataBlock>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d033      	beq.n	8001248 <SD_disk_write+0xe4>
      count = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	e030      	b.n	8001248 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <SD_disk_write+0x104>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80011f2:	2100      	movs	r1, #0
 80011f4:	2077      	movs	r0, #119	@ 0x77
 80011f6:	f7ff fdf9 	bl	8000dec <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	2057      	movs	r0, #87	@ 0x57
 80011fe:	f7ff fdf5 	bl	8000dec <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2059      	movs	r0, #89	@ 0x59
 8001206:	f7ff fdf1 	bl	8000dec <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d11b      	bne.n	8001248 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001210:	21fc      	movs	r1, #252	@ 0xfc
 8001212:	68b8      	ldr	r0, [r7, #8]
 8001214:	f7ff fd96 	bl	8000d44 <SD_TxDataBlock>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00a      	beq.n	8001234 <SD_disk_write+0xd0>
          break;

        buff += 512;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001224:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3b01      	subs	r3, #1
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1ee      	bne.n	8001210 <SD_disk_write+0xac>
 8001232:	e000      	b.n	8001236 <SD_disk_write+0xd2>
          break;
 8001234:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001236:	21fd      	movs	r1, #253	@ 0xfd
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fd83 	bl	8000d44 <SD_TxDataBlock>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <SD_disk_write+0xe4>
      {
        count = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001248:	f7ff fc74 	bl	8000b34 <DESELECT>
  SPI_RxByte();
 800124c:	f7ff fc98 	bl	8000b80 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	200067bc 	.word	0x200067bc

0800126c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b08b      	sub	sp, #44	@ 0x2c
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	603a      	str	r2, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	460b      	mov	r3, r1
 800127a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001286:	2304      	movs	r3, #4
 8001288:	e119      	b.n	80014be <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b05      	cmp	r3, #5
 8001294:	d129      	bne.n	80012ea <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d017      	beq.n	80012ce <SD_disk_ioctl+0x62>
 800129e:	2b02      	cmp	r3, #2
 80012a0:	dc1f      	bgt.n	80012e2 <SD_disk_ioctl+0x76>
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <SD_disk_ioctl+0x40>
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d00b      	beq.n	80012c2 <SD_disk_ioctl+0x56>
 80012aa:	e01a      	b.n	80012e2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80012ac:	f7ff fd08 	bl	8000cc0 <SD_CheckPower>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80012b6:	f7ff fcf7 	bl	8000ca8 <SD_PowerOff>
      res = RES_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80012c0:	e0fb      	b.n	80014ba <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 80012c2:	f7ff fca5 	bl	8000c10 <SD_PowerOn>
      res = RES_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80012cc:	e0f5      	b.n	80014ba <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	1c5c      	adds	r4, r3, #1
 80012d2:	f7ff fcf5 	bl	8000cc0 <SD_CheckPower>
 80012d6:	4603      	mov	r3, r0
 80012d8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80012e0:	e0eb      	b.n	80014ba <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80012e2:	2304      	movs	r3, #4
 80012e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80012e8:	e0e7      	b.n	80014ba <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80012ea:	4b77      	ldr	r3, [pc, #476]	@ (80014c8 <SD_disk_ioctl+0x25c>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e0e0      	b.n	80014be <SD_disk_ioctl+0x252>

    SELECT();
 80012fc:	f7ff fc0e 	bl	8000b1c <SELECT>

    switch (ctrl)
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	2b0d      	cmp	r3, #13
 8001304:	f200 80ca 	bhi.w	800149c <SD_disk_ioctl+0x230>
 8001308:	a201      	add	r2, pc, #4	@ (adr r2, 8001310 <SD_disk_ioctl+0xa4>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001407 	.word	0x08001407
 8001314:	08001349 	.word	0x08001349
 8001318:	080013f7 	.word	0x080013f7
 800131c:	0800149d 	.word	0x0800149d
 8001320:	0800149d 	.word	0x0800149d
 8001324:	0800149d 	.word	0x0800149d
 8001328:	0800149d 	.word	0x0800149d
 800132c:	0800149d 	.word	0x0800149d
 8001330:	0800149d 	.word	0x0800149d
 8001334:	0800149d 	.word	0x0800149d
 8001338:	0800149d 	.word	0x0800149d
 800133c:	08001419 	.word	0x08001419
 8001340:	0800143d 	.word	0x0800143d
 8001344:	08001461 	.word	0x08001461
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001348:	2100      	movs	r1, #0
 800134a:	2049      	movs	r0, #73	@ 0x49
 800134c:	f7ff fd4e 	bl	8000dec <SD_SendCmd>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 80a6 	bne.w	80014a4 <SD_disk_ioctl+0x238>
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2110      	movs	r1, #16
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fcba 	bl	8000cd8 <SD_RxDataBlock>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 809c 	beq.w	80014a4 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 800136c:	7b3b      	ldrb	r3, [r7, #12]
 800136e:	099b      	lsrs	r3, r3, #6
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10d      	bne.n	8001392 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001376:	7d7b      	ldrb	r3, [r7, #21]
 8001378:	461a      	mov	r2, r3
 800137a:	7d3b      	ldrb	r3, [r7, #20]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001388:	8bfb      	ldrh	r3, [r7, #30]
 800138a:	029a      	lsls	r2, r3, #10
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e02d      	b.n	80013ee <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001392:	7c7b      	ldrb	r3, [r7, #17]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	b2da      	uxtb	r2, r3
 800139a:	7dbb      	ldrb	r3, [r7, #22]
 800139c:	09db      	lsrs	r3, r3, #7
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	7d7b      	ldrb	r3, [r7, #21]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f003 0306 	and.w	r3, r3, #6
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	3302      	adds	r3, #2
 80013b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80013ba:	7d3b      	ldrb	r3, [r7, #20]
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	7cfb      	ldrb	r3, [r7, #19]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	7cbb      	ldrb	r3, [r7, #18]
 80013ce:	029b      	lsls	r3, r3, #10
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80013e0:	8bfa      	ldrh	r2, [r7, #30]
 80013e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013e6:	3b09      	subs	r3, #9
 80013e8:	409a      	lsls	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80013f4:	e056      	b.n	80014a4 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001404:	e055      	b.n	80014b2 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001406:	f7ff fbe7 	bl	8000bd8 <SD_ReadyWait>
 800140a:	4603      	mov	r3, r0
 800140c:	2bff      	cmp	r3, #255	@ 0xff
 800140e:	d14b      	bne.n	80014a8 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001416:	e047      	b.n	80014a8 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001418:	2100      	movs	r1, #0
 800141a:	2049      	movs	r0, #73	@ 0x49
 800141c:	f7ff fce6 	bl	8000dec <SD_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d142      	bne.n	80014ac <SD_disk_ioctl+0x240>
 8001426:	2110      	movs	r1, #16
 8001428:	6a38      	ldr	r0, [r7, #32]
 800142a:	f7ff fc55 	bl	8000cd8 <SD_RxDataBlock>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d03b      	beq.n	80014ac <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800143a:	e037      	b.n	80014ac <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800143c:	2100      	movs	r1, #0
 800143e:	204a      	movs	r0, #74	@ 0x4a
 8001440:	f7ff fcd4 	bl	8000dec <SD_SendCmd>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d132      	bne.n	80014b0 <SD_disk_ioctl+0x244>
 800144a:	2110      	movs	r1, #16
 800144c:	6a38      	ldr	r0, [r7, #32]
 800144e:	f7ff fc43 	bl	8000cd8 <SD_RxDataBlock>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d02b      	beq.n	80014b0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800145e:	e027      	b.n	80014b0 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001460:	2100      	movs	r1, #0
 8001462:	207a      	movs	r0, #122	@ 0x7a
 8001464:	f7ff fcc2 	bl	8000dec <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d116      	bne.n	800149c <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 800146e:	2300      	movs	r3, #0
 8001470:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001474:	e00b      	b.n	800148e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001476:	6a3c      	ldr	r4, [r7, #32]
 8001478:	1c63      	adds	r3, r4, #1
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	f7ff fb80 	bl	8000b80 <SPI_RxByte>
 8001480:	4603      	mov	r3, r0
 8001482:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001484:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001488:	3301      	adds	r3, #1
 800148a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800148e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001492:	2b03      	cmp	r3, #3
 8001494:	d9ef      	bls.n	8001476 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 800149c:	2304      	movs	r3, #4
 800149e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014a2:	e006      	b.n	80014b2 <SD_disk_ioctl+0x246>
      break;
 80014a4:	bf00      	nop
 80014a6:	e004      	b.n	80014b2 <SD_disk_ioctl+0x246>
      break;
 80014a8:	bf00      	nop
 80014aa:	e002      	b.n	80014b2 <SD_disk_ioctl+0x246>
      break;
 80014ac:	bf00      	nop
 80014ae:	e000      	b.n	80014b2 <SD_disk_ioctl+0x246>
      break;
 80014b0:	bf00      	nop
    }

    DESELECT();
 80014b2:	f7ff fb3f 	bl	8000b34 <DESELECT>
    SPI_RxByte();
 80014b6:	f7ff fb63 	bl	8000b80 <SPI_RxByte>
  }

  return res;
 80014ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80014be:	4618      	mov	r0, r3
 80014c0:	372c      	adds	r7, #44	@ 0x2c
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d0:	f000 fb5e 	bl	8001b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d4:	f000 f80c 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d8:	f000 f8c8 	bl	800166c <MX_GPIO_Init>
  MX_SPI1_Init();
 80014dc:	f000 f866 	bl	80015ac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80014e0:	f000 f89a 	bl	8001618 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80014e4:	f003 f816 	bl	8004514 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  app();
 80014e8:	f7ff f9aa 	bl	8000840 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <main+0x20>

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	@ 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	2230      	movs	r2, #48	@ 0x30
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 ff15 	bl	800832e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <SystemClock_Config+0xb4>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	4a21      	ldr	r2, [pc, #132]	@ (80015a4 <SystemClock_Config+0xb4>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	@ 0x40
 8001524:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <SystemClock_Config+0xb4>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <SystemClock_Config+0xb8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1b      	ldr	r2, [pc, #108]	@ (80015a8 <SystemClock_Config+0xb8>)
 800153a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <SystemClock_Config+0xb8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001550:	2301      	movs	r3, #1
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001554:	2310      	movs	r3, #16
 8001556:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001558:	2300      	movs	r3, #0
 800155a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fec9 	bl	80022f8 <HAL_RCC_OscConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800156c:	f000 f8b0 	bl	80016d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001570:	230f      	movs	r3, #15
 8001572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f001 f92c 	bl	80027e8 <HAL_RCC_ClockConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001596:	f000 f89b 	bl	80016d0 <Error_Handler>
  }
}
 800159a:	bf00      	nop
 800159c:	3750      	adds	r7, #80	@ 0x50
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000

080015ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015b0:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015b2:	4a18      	ldr	r2, [pc, #96]	@ (8001614 <MX_SPI1_Init+0x68>)
 80015b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015b6:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015e0:	2208      	movs	r2, #8
 80015e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f0:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015f8:	220a      	movs	r2, #10
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	@ (8001610 <MX_SPI1_Init+0x64>)
 80015fe:	f001 fad3 	bl	8002ba8 <HAL_SPI_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001608:	f000 f862 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200067c0 	.word	0x200067c0
 8001614:	40013000 	.word	0x40013000

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001650:	f001 ff0a 	bl	8003468 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f839 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20006818 	.word	0x20006818
 8001668:	40004400 	.word	0x40004400

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	4a0f      	ldr	r2, [pc, #60]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <MX_GPIO_Init+0x5c>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2110      	movs	r1, #16
 80016a0:	480a      	ldr	r0, [pc, #40]	@ (80016cc <MX_GPIO_Init+0x60>)
 80016a2:	f000 fe0f 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80016a6:	2310      	movs	r3, #16
 80016a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4804      	ldr	r0, [pc, #16]	@ (80016cc <MX_GPIO_Init+0x60>)
 80016bc:	f000 fc7e 	bl	8001fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <Error_Handler+0x8>

080016dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <HAL_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001728 <HAL_MspInit+0x4c>)
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <HAL_MspInit+0x4c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_MspInit+0x4c>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_MspInit+0x4c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_MspInit+0x4c>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_SPI_MspInit+0x84>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d12b      	bne.n	80017a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a10      	ldr	r2, [pc, #64]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <HAL_SPI_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001786:	23e0      	movs	r3, #224	@ 0xe0
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001796:	2305      	movs	r3, #5
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <HAL_SPI_MspInit+0x8c>)
 80017a2:	f000 fc0b 	bl	8001fbc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	@ 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40013000 	.word	0x40013000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001850 <HAL_UART_MspInit+0x94>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d133      	bne.n	8001846 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <HAL_UART_MspInit+0x98>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001854 <HAL_UART_MspInit+0x98>)
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_UART_MspInit+0x98>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_UART_MspInit+0x98>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <HAL_UART_MspInit+0x98>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_UART_MspInit+0x98>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001816:	230c      	movs	r3, #12
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001826:	2307      	movs	r3, #7
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4809      	ldr	r0, [pc, #36]	@ (8001858 <HAL_UART_MspInit+0x9c>)
 8001832:	f000 fbc3 	bl	8001fbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	2026      	movs	r0, #38	@ 0x26
 800183c:	f000 faf5 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001840:	2026      	movs	r0, #38	@ 0x26
 8001842:	f000 fb0e 	bl	8001e62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	@ 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40004400 	.word	0x40004400
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <NMI_Handler+0x4>

08001864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <MemManage_Handler+0x4>

08001874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <UsageFault_Handler+0x4>

08001884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b2:	f000 f9bf 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SystickCallback();
 80018b6:	f000 f8cb 	bl	8001a50 <SystickCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <USART2_IRQHandler+0x10>)
 80018c6:	f001 fecf 	bl	8003668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20006818 	.word	0x20006818

080018d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00a      	b.n	80018fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e6:	f3af 8000 	nop.w
 80018ea:	4601      	mov	r1, r0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf0      	blt.n	80018e6 <_read+0x12>
  }

  return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_close>:
  }
  return len;
}

int _close(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001936:	605a      	str	r2, [r3, #4]
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_isatty>:

int _isatty(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f006 fcda 	bl	8008360 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20020000 	.word	0x20020000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	20006860 	.word	0x20006860
 80019e0:	20006c68 	.word	0x20006c68

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <SDTimer_Handler+0x40>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <SDTimer_Handler+0x1c>
    Timer1--;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <SDTimer_Handler+0x40>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <SDTimer_Handler+0x40>)
 8001a22:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <SDTimer_Handler+0x44>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <SDTimer_Handler+0x34>
    Timer2--;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <SDTimer_Handler+0x44>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <SDTimer_Handler+0x44>)
 8001a3a:	701a      	strb	r2, [r3, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20006865 	.word	0x20006865
 8001a4c:	20006866 	.word	0x20006866

08001a50 <SystickCallback>:

void SystickCallback() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	FatFsCnt++;
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <SystickCallback+0x2c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <SystickCallback+0x2c>)
 8001a60:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <SystickCallback+0x2c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d904      	bls.n	8001a76 <SystickCallback+0x26>
	{
		FatFsCnt = 0;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <SystickCallback+0x2c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001a72:	f7ff ffc9 	bl	8001a08 <SDTimer_Handler>
	}
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20006864 	.word	0x20006864

08001a80 <_write>:
char rxChar;
char rxBuffer[rxBufferMax];
uint8_t	rxBufferWriteIndex;
uint8_t rxBufferReadIndex;

int _write(int file, char* p, int len){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, p, len, 10);
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <_write+0x28>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	230a      	movs	r3, #10
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	f001 fd36 	bl	8003508 <HAL_UART_Transmit>
	return len;
 8001a9c:	687b      	ldr	r3, [r7, #4]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20006868 	.word	0x20006868

08001aac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferWriteIndex++] = rxChar;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_UART_RxCpltCallback+0x50>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	b2d1      	uxtb	r1, r2
 8001abc:	4a0f      	ldr	r2, [pc, #60]	@ (8001afc <HAL_UART_RxCpltCallback+0x50>)
 8001abe:	7011      	strb	r1, [r2, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_UART_RxCpltCallback+0x54>)
 8001ac4:	7819      	ldrb	r1, [r3, #0]
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <HAL_UART_RxCpltCallback+0x58>)
 8001ac8:	5499      	strb	r1, [r3, r2]
	rxBufferWriteIndex %= rxBufferMax;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <HAL_UART_RxCpltCallback+0x50>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4a0e      	ldr	r2, [pc, #56]	@ (8001b08 <HAL_UART_RxCpltCallback+0x5c>)
 8001ad0:	fba2 1203 	umull	r1, r2, r2, r3
 8001ad4:	0952      	lsrs	r2, r2, #5
 8001ad6:	2164      	movs	r1, #100	@ 0x64
 8001ad8:	fb01 f202 	mul.w	r2, r1, r2
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_UART_RxCpltCallback+0x50>)
 8001ae2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(myHuart, (uint8_t *)&rxChar,	1);
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_UART_RxCpltCallback+0x60>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4905      	ldr	r1, [pc, #20]	@ (8001b00 <HAL_UART_RxCpltCallback+0x54>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 fd96 	bl	800361e <HAL_UART_Receive_IT>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200068d4 	.word	0x200068d4
 8001b00:	2000686c 	.word	0x2000686c
 8001b04:	20006870 	.word	0x20006870
 8001b08:	51eb851f 	.word	0x51eb851f
 8001b0c:	20006868 	.word	0x20006868

08001b10 <initUart>:

void initUart(UART_HandleTypeDef *inHuart) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 8001b18:	4a06      	ldr	r2, [pc, #24]	@ (8001b34 <initUart+0x24>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, (uint8_t *)&rxChar, 1);
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <initUart+0x24>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4904      	ldr	r1, [pc, #16]	@ (8001b38 <initUart+0x28>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f001 fd79 	bl	800361e <HAL_UART_Receive_IT>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20006868 	.word	0x20006868
 8001b38:	2000686c 	.word	0x2000686c

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b40:	f7ff ff50 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b46:	490d      	ldr	r1, [pc, #52]	@ (8001b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f006 fbff 	bl	800836c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7ff fcad 	bl	80014cc <main>
  bx  lr    
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b80:	080097dc 	.word	0x080097dc
  ldr r2, =_sbss
 8001b84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b88:	20006c64 	.word	0x20006c64

08001b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>
	...

08001b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b94:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <HAL_Init+0x40>)
 8001b9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <HAL_Init+0x40>)
 8001ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <HAL_Init+0x40>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 f92b 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbe:	200f      	movs	r0, #15
 8001bc0:	f000 f808 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc4:	f7ff fd8a 	bl	80016dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f943 	bl	8001e7e <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c10:	f000 f90b 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	2000000c 	.word	0x2000000c
 8001c30:	20000008 	.word	0x20000008

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2000000c 	.word	0x2000000c
 8001c58:	200068d8 	.word	0x200068d8

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	200068d8 	.word	0x200068d8

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	@ (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	@ (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	@ (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	@ 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff29 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff3e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff31 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff feda 	bl	8001c5c <HAL_GetTick>
 8001ea8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e052      	b.n	8001f6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0216 	bic.w	r2, r2, #22
 8001ed6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <HAL_DMA_Abort+0x62>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0208 	bic.w	r2, r2, #8
 8001f06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f18:	e013      	b.n	8001f42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1a:	f7ff fe9f 	bl	8001c5c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d90c      	bls.n	8001f42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2203      	movs	r2, #3
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e015      	b.n	8001f6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e4      	bne.n	8001f1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	223f      	movs	r2, #63	@ 0x3f
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d004      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e00c      	b.n	8001fae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2205      	movs	r2, #5
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e159      	b.n	800228c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f040 8148 	bne.w	8002286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d005      	beq.n	800200e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200a:	2b02      	cmp	r3, #2
 800200c:	d130      	bne.n	8002070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 0201 	and.w	r2, r3, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b03      	cmp	r3, #3
 800207a:	d017      	beq.n	80020ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d123      	bne.n	8002100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	08da      	lsrs	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	08da      	lsrs	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3208      	adds	r2, #8
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0203 	and.w	r2, r3, #3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a2 	beq.w	8002286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b57      	ldr	r3, [pc, #348]	@ (80022a4 <HAL_GPIO_Init+0x2e8>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	4a56      	ldr	r2, [pc, #344]	@ (80022a4 <HAL_GPIO_Init+0x2e8>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002150:	6453      	str	r3, [r2, #68]	@ 0x44
 8002152:	4b54      	ldr	r3, [pc, #336]	@ (80022a4 <HAL_GPIO_Init+0x2e8>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215e:	4a52      	ldr	r2, [pc, #328]	@ (80022a8 <HAL_GPIO_Init+0x2ec>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a49      	ldr	r2, [pc, #292]	@ (80022ac <HAL_GPIO_Init+0x2f0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x202>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a48      	ldr	r2, [pc, #288]	@ (80022b0 <HAL_GPIO_Init+0x2f4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x1fe>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a47      	ldr	r2, [pc, #284]	@ (80022b4 <HAL_GPIO_Init+0x2f8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x1fa>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a46      	ldr	r2, [pc, #280]	@ (80022b8 <HAL_GPIO_Init+0x2fc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x1f6>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a45      	ldr	r2, [pc, #276]	@ (80022bc <HAL_GPIO_Init+0x300>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x1f2>
 80021aa:	2304      	movs	r3, #4
 80021ac:	e008      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x204>
 80021be:	2300      	movs	r3, #0
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d0:	4935      	ldr	r1, [pc, #212]	@ (80022a8 <HAL_GPIO_Init+0x2ec>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b38      	ldr	r3, [pc, #224]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a2f      	ldr	r2, [pc, #188]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b2d      	ldr	r3, [pc, #180]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a24      	ldr	r2, [pc, #144]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002232:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002256:	4a1a      	ldr	r2, [pc, #104]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225c:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002280:	4a0f      	ldr	r2, [pc, #60]	@ (80022c0 <HAL_GPIO_Init+0x304>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3301      	adds	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	f67f aea2 	bls.w	8001fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3724      	adds	r7, #36	@ 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020800 	.word	0x40020800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e267      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d075      	beq.n	8002402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002316:	4b88      	ldr	r3, [pc, #544]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d00c      	beq.n	800233c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b85      	ldr	r3, [pc, #532]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800232a:	2b08      	cmp	r3, #8
 800232c:	d112      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232e:	4b82      	ldr	r3, [pc, #520]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800233a:	d10b      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	4b7e      	ldr	r3, [pc, #504]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d05b      	beq.n	8002400 <HAL_RCC_OscConfig+0x108>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d157      	bne.n	8002400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e242      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x74>
 800235e:	4b76      	ldr	r3, [pc, #472]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xb0>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x98>
 8002376:	4b70      	ldr	r3, [pc, #448]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6f      	ldr	r2, [pc, #444]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b6d      	ldr	r3, [pc, #436]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6c      	ldr	r2, [pc, #432]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xb0>
 8002390:	4b69      	ldr	r3, [pc, #420]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a68      	ldr	r2, [pc, #416]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b66      	ldr	r3, [pc, #408]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a65      	ldr	r2, [pc, #404]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fc54 	bl	8001c5c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fc50 	bl	8001c5c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	@ 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e207      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xc0>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fc40 	bl	8001c5c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fc3c 	bl	8001c5c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	@ 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1f3      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b51      	ldr	r3, [pc, #324]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0xe8>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800240e:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002422:	2b08      	cmp	r3, #8
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002426:	4b44      	ldr	r3, [pc, #272]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x152>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e1c7      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4937      	ldr	r1, [pc, #220]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e03a      	b.n	80024d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002468:	4b34      	ldr	r3, [pc, #208]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7ff fbf5 	bl	8001c5c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002476:	f7ff fbf1 	bl	8001c5c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e1a8      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4925      	ldr	r1, [pc, #148]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024aa:	4b24      	ldr	r3, [pc, #144]	@ (800253c <HAL_RCC_OscConfig+0x244>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7ff fbd4 	bl	8001c5c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7ff fbd0 	bl	8001c5c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e187      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d036      	beq.n	8002550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_RCC_OscConfig+0x248>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff fbb4 	bl	8001c5c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f8:	f7ff fbb0 	bl	8001c5c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e167      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <HAL_RCC_OscConfig+0x240>)
 800250c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x200>
 8002516:	e01b      	b.n	8002550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_OscConfig+0x248>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7ff fb9d 	bl	8001c5c <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	e00e      	b.n	8002544 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7ff fb99 	bl	8001c5c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d907      	bls.n	8002544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e150      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
 8002538:	40023800 	.word	0x40023800
 800253c:	42470000 	.word	0x42470000
 8002540:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	4b88      	ldr	r3, [pc, #544]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ea      	bne.n	8002526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8097 	beq.w	800268c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002562:	4b81      	ldr	r3, [pc, #516]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10f      	bne.n	800258e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b7d      	ldr	r3, [pc, #500]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	4a7c      	ldr	r2, [pc, #496]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	@ 0x40
 800257e:	4b7a      	ldr	r3, [pc, #488]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	4b77      	ldr	r3, [pc, #476]	@ (800276c <HAL_RCC_OscConfig+0x474>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d118      	bne.n	80025cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259a:	4b74      	ldr	r3, [pc, #464]	@ (800276c <HAL_RCC_OscConfig+0x474>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a73      	ldr	r2, [pc, #460]	@ (800276c <HAL_RCC_OscConfig+0x474>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a6:	f7ff fb59 	bl	8001c5c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ae:	f7ff fb55 	bl	8001c5c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e10c      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	4b6a      	ldr	r3, [pc, #424]	@ (800276c <HAL_RCC_OscConfig+0x474>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2ea>
 80025d4:	4b64      	ldr	r3, [pc, #400]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d8:	4a63      	ldr	r2, [pc, #396]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e0:	e01c      	b.n	800261c <HAL_RCC_OscConfig+0x324>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x30c>
 80025ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	@ 0x70
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0x324>
 8002604:	4b58      	ldr	r3, [pc, #352]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a57      	ldr	r2, [pc, #348]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002610:	4b55      	ldr	r3, [pc, #340]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002614:	4a54      	ldr	r2, [pc, #336]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002616:	f023 0304 	bic.w	r3, r3, #4
 800261a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d015      	beq.n	8002650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7ff fb1a 	bl	8001c5c <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7ff fb16 	bl	8001c5c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e0cb      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	4b49      	ldr	r3, [pc, #292]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0ee      	beq.n	800262c <HAL_RCC_OscConfig+0x334>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7ff fb04 	bl	8001c5c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	e00a      	b.n	800266e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7ff fb00 	bl	8001c5c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0b5      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266e:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ee      	bne.n	8002658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002680:	4b39      	ldr	r3, [pc, #228]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	4a38      	ldr	r2, [pc, #224]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800268a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a1 	beq.w	80027d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002696:	4b34      	ldr	r3, [pc, #208]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d05c      	beq.n	800275c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d141      	bne.n	800272e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b31      	ldr	r3, [pc, #196]	@ (8002770 <HAL_RCC_OscConfig+0x478>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fad4 	bl	8001c5c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7ff fad0 	bl	8001c5c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e087      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	4b27      	ldr	r3, [pc, #156]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	3b01      	subs	r3, #1
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	491b      	ldr	r1, [pc, #108]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <HAL_RCC_OscConfig+0x478>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7ff faa9 	bl	8001c5c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7ff faa5 	bl	8001c5c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e05c      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002720:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x416>
 800272c:	e054      	b.n	80027d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <HAL_RCC_OscConfig+0x478>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff fa92 	bl	8001c5c <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7ff fa8e 	bl	8001c5c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e045      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_RCC_OscConfig+0x470>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x444>
 800275a:	e03d      	b.n	80027d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e038      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000
 8002770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002774:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_RCC_OscConfig+0x4ec>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d028      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d121      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d11a      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027a4:	4013      	ands	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d111      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	3b01      	subs	r3, #1
 80027be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800

080027e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0cc      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b68      	ldr	r3, [pc, #416]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d90c      	bls.n	8002824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b65      	ldr	r3, [pc, #404]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b63      	ldr	r3, [pc, #396]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0b8      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800283c:	4b59      	ldr	r3, [pc, #356]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a58      	ldr	r2, [pc, #352]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002854:	4b53      	ldr	r3, [pc, #332]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a52      	ldr	r2, [pc, #328]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800285e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b50      	ldr	r3, [pc, #320]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	494d      	ldr	r1, [pc, #308]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d044      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b47      	ldr	r3, [pc, #284]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d119      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e07f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b3f      	ldr	r3, [pc, #252]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b3b      	ldr	r3, [pc, #236]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e067      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b37      	ldr	r3, [pc, #220]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4934      	ldr	r1, [pc, #208]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7ff f9c0 	bl	8001c5c <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7ff f9bc 	bl	8001c5c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b2b      	ldr	r3, [pc, #172]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b25      	ldr	r3, [pc, #148]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20c      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e032      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4916      	ldr	r1, [pc, #88]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295a:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	490e      	ldr	r1, [pc, #56]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800296e:	f000 f821 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002972:	4602      	mov	r2, r0
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	490a      	ldr	r1, [pc, #40]	@ (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	5ccb      	ldrb	r3, [r1, r3]
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f920 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023c00 	.word	0x40023c00
 80029a4:	40023800 	.word	0x40023800
 80029a8:	0800931c 	.word	0x0800931c
 80029ac:	20000004 	.word	0x20000004
 80029b0:	20000008 	.word	0x20000008

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b8:	b090      	sub	sp, #64	@ 0x40
 80029ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029cc:	4b59      	ldr	r3, [pc, #356]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d00d      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x40>
 80029d8:	2b08      	cmp	r3, #8
 80029da:	f200 80a1 	bhi.w	8002b20 <HAL_RCC_GetSysClockFreq+0x16c>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x34>
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0x3a>
 80029e6:	e09b      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b53      	ldr	r3, [pc, #332]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029ec:	e09b      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ee:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x188>)
 80029f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029f2:	e098      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x180>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d028      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	099b      	lsrs	r3, r3, #6
 8002a10:	2200      	movs	r2, #0
 8002a12:	623b      	str	r3, [r7, #32]
 8002a14:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a20:	fb03 f201 	mul.w	r2, r3, r1
 8002a24:	2300      	movs	r3, #0
 8002a26:	fb00 f303 	mul.w	r3, r0, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a43      	ldr	r2, [pc, #268]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a2e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a34:	460a      	mov	r2, r1
 8002a36:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a3a:	4413      	add	r3, r2
 8002a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a40:	2200      	movs	r2, #0
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	61fa      	str	r2, [r7, #28]
 8002a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a4e:	f7fd fc1f 	bl	8000290 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4613      	mov	r3, r2
 8002a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a5a:	e053      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5c:	4b35      	ldr	r3, [pc, #212]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	2200      	movs	r2, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	617a      	str	r2, [r7, #20]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a6e:	f04f 0b00 	mov.w	fp, #0
 8002a72:	4652      	mov	r2, sl
 8002a74:	465b      	mov	r3, fp
 8002a76:	f04f 0000 	mov.w	r0, #0
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	0159      	lsls	r1, r3, #5
 8002a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a84:	0150      	lsls	r0, r2, #5
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a8e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002aa2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002aa6:	ebb2 0408 	subs.w	r4, r2, r8
 8002aaa:	eb63 0509 	sbc.w	r5, r3, r9
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	00eb      	lsls	r3, r5, #3
 8002ab8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002abc:	00e2      	lsls	r2, r4, #3
 8002abe:	4614      	mov	r4, r2
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	eb14 030a 	adds.w	r3, r4, sl
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	eb45 030b 	adc.w	r3, r5, fp
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ada:	4629      	mov	r1, r5
 8002adc:	028b      	lsls	r3, r1, #10
 8002ade:	4621      	mov	r1, r4
 8002ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	028a      	lsls	r2, r1, #10
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aee:	2200      	movs	r2, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	60fa      	str	r2, [r7, #12]
 8002af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af8:	f7fd fbca 	bl	8000290 <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4613      	mov	r3, r2
 8002b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b04:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3740      	adds	r7, #64	@ 0x40
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	00f42400 	.word	0x00f42400
 8002b3c:	017d7840 	.word	0x017d7840

08002b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b44:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b5c:	f7ff fff0 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4903      	ldr	r1, [pc, #12]	@ (8002b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	0800932c 	.word	0x0800932c

08002b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b84:	f7ff ffdc 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0b5b      	lsrs	r3, r3, #13
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4903      	ldr	r1, [pc, #12]	@ (8002ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	0800932c 	.word	0x0800932c

08002ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07b      	b.n	8002cb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bca:	d009      	beq.n	8002be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
 8002bd2:	e005      	b.n	8002be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fd96 	bl	800172c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c64:	ea42 0103 	orr.w	r1, r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0104 	and.w	r1, r3, #4
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	f003 0210 	and.w	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b088      	sub	sp, #32
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cca:	f7fe ffc7 	bl	8001c5c <HAL_GetTick>
 8002cce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e12a      	b.n	8002f3a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0x36>
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e122      	b.n	8002f3a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_SPI_Transmit+0x48>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e11b      	b.n	8002f3a <HAL_SPI_Transmit+0x280>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d50:	d10f      	bne.n	8002d72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7c:	2b40      	cmp	r3, #64	@ 0x40
 8002d7e:	d007      	beq.n	8002d90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d98:	d152      	bne.n	8002e40 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_SPI_Transmit+0xee>
 8002da2:	8b7b      	ldrh	r3, [r7, #26]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d145      	bne.n	8002e34 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	881a      	ldrh	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	1c9a      	adds	r2, r3, #2
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dcc:	e032      	b.n	8002e34 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d112      	bne.n	8002e02 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	881a      	ldrh	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	1c9a      	adds	r2, r3, #2
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e00:	e018      	b.n	8002e34 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e02:	f7fe ff2b 	bl	8001c5c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d803      	bhi.n	8002e1a <HAL_SPI_Transmit+0x160>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e18:	d102      	bne.n	8002e20 <HAL_SPI_Transmit+0x166>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e082      	b.n	8002f3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1c7      	bne.n	8002dce <HAL_SPI_Transmit+0x114>
 8002e3e:	e053      	b.n	8002ee8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_SPI_Transmit+0x194>
 8002e48:	8b7b      	ldrh	r3, [r7, #26]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d147      	bne.n	8002ede <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e74:	e033      	b.n	8002ede <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d113      	bne.n	8002eac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	7812      	ldrb	r2, [r2, #0]
 8002e90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002eaa:	e018      	b.n	8002ede <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eac:	f7fe fed6 	bl	8001c5c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d803      	bhi.n	8002ec4 <HAL_SPI_Transmit+0x20a>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ec2:	d102      	bne.n	8002eca <HAL_SPI_Transmit+0x210>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e02d      	b.n	8002f3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1c6      	bne.n	8002e76 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa67 	bl	80033c0 <SPI_EndRxTxTransaction>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b08a      	sub	sp, #40	@ 0x28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f50:	2301      	movs	r3, #1
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f54:	f7fe fe82 	bl	8001c5c <HAL_GetTick>
 8002f58:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f60:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f68:	887b      	ldrh	r3, [r7, #2]
 8002f6a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f6c:	7ffb      	ldrb	r3, [r7, #31]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d00c      	beq.n	8002f8c <HAL_SPI_TransmitReceive+0x4a>
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f78:	d106      	bne.n	8002f88 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_TransmitReceive+0x46>
 8002f82:	7ffb      	ldrb	r3, [r7, #31]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d001      	beq.n	8002f8c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e17f      	b.n	800328c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_SPI_TransmitReceive+0x5c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_SPI_TransmitReceive+0x5c>
 8002f98:	887b      	ldrh	r3, [r7, #2]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e174      	b.n	800328c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_SPI_TransmitReceive+0x6e>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e16d      	b.n	800328c <HAL_SPI_TransmitReceive+0x34a>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d003      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2205      	movs	r2, #5
 8002fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	887a      	ldrh	r2, [r7, #2]
 8002fe2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300c:	2b40      	cmp	r3, #64	@ 0x40
 800300e:	d007      	beq.n	8003020 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003028:	d17e      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_SPI_TransmitReceive+0xf6>
 8003032:	8afb      	ldrh	r3, [r7, #22]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d16c      	bne.n	8003112 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	881a      	ldrh	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	1c9a      	adds	r2, r3, #2
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800305c:	e059      	b.n	8003112 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d11b      	bne.n	80030a4 <HAL_SPI_TransmitReceive+0x162>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_SPI_TransmitReceive+0x162>
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	2b01      	cmp	r3, #1
 800307a:	d113      	bne.n	80030a4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	881a      	ldrh	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	1c9a      	adds	r2, r3, #2
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d119      	bne.n	80030e6 <HAL_SPI_TransmitReceive+0x1a4>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d014      	beq.n	80030e6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	b292      	uxth	r2, r2
 80030c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	1c9a      	adds	r2, r3, #2
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030e2:	2301      	movs	r3, #1
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030e6:	f7fe fdb9 	bl	8001c5c <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d80d      	bhi.n	8003112 <HAL_SPI_TransmitReceive+0x1d0>
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030fc:	d009      	beq.n	8003112 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0bc      	b.n	800328c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1a0      	bne.n	800305e <HAL_SPI_TransmitReceive+0x11c>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d19b      	bne.n	800305e <HAL_SPI_TransmitReceive+0x11c>
 8003126:	e082      	b.n	800322e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_SPI_TransmitReceive+0x1f4>
 8003130:	8afb      	ldrh	r3, [r7, #22]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d171      	bne.n	800321a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	330c      	adds	r3, #12
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800315c:	e05d      	b.n	800321a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b02      	cmp	r3, #2
 800316a:	d11c      	bne.n	80031a6 <HAL_SPI_TransmitReceive+0x264>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d017      	beq.n	80031a6 <HAL_SPI_TransmitReceive+0x264>
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	2b01      	cmp	r3, #1
 800317a:	d114      	bne.n	80031a6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	7812      	ldrb	r2, [r2, #0]
 8003188:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d119      	bne.n	80031e8 <HAL_SPI_TransmitReceive+0x2a6>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d014      	beq.n	80031e8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031e4:	2301      	movs	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031e8:	f7fe fd38 	bl	8001c5c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d803      	bhi.n	8003200 <HAL_SPI_TransmitReceive+0x2be>
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031fe:	d102      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x2c4>
 8003200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e038      	b.n	800328c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d19c      	bne.n	800315e <HAL_SPI_TransmitReceive+0x21c>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d197      	bne.n	800315e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800322e:	6a3a      	ldr	r2, [r7, #32]
 8003230:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f8c4 	bl	80033c0 <SPI_EndRxTxTransaction>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e01d      	b.n	800328c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800328a:	2300      	movs	r3, #0
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	3728      	adds	r7, #40	@ 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032a2:	b2db      	uxtb	r3, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c0:	f7fe fccc 	bl	8001c5c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	4413      	add	r3, r2
 80032ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032d0:	f7fe fcc4 	bl	8001c5c <HAL_GetTick>
 80032d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032d6:	4b39      	ldr	r3, [pc, #228]	@ (80033bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	015b      	lsls	r3, r3, #5
 80032dc:	0d1b      	lsrs	r3, r3, #20
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e6:	e054      	b.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ee:	d050      	beq.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f0:	f7fe fcb4 	bl	8001c5c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d902      	bls.n	8003306 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d13d      	bne.n	8003382 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003314:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800331e:	d111      	bne.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003328:	d004      	beq.n	8003334 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003332:	d107      	bne.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003342:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800334c:	d10f      	bne.n	800336e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800336c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e017      	b.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3b01      	subs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d19b      	bne.n	80032e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000004 	.word	0x20000004

080033c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2201      	movs	r2, #1
 80033d4:	2102      	movs	r1, #2
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff ff6a 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e032      	b.n	8003458 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <SPI_EndRxTxTransaction+0xa0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <SPI_EndRxTxTransaction+0xa4>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	0d5b      	lsrs	r3, r3, #21
 80033fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003410:	d112      	bne.n	8003438 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2200      	movs	r2, #0
 800341a:	2180      	movs	r1, #128	@ 0x80
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ff47 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d016      	beq.n	8003456 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e00f      	b.n	8003458 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3b01      	subs	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344e:	2b80      	cmp	r3, #128	@ 0x80
 8003450:	d0f2      	beq.n	8003438 <SPI_EndRxTxTransaction+0x78>
 8003452:	e000      	b.n	8003456 <SPI_EndRxTxTransaction+0x96>
        break;
 8003454:	bf00      	nop
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000004 	.word	0x20000004
 8003464:	165e9f81 	.word	0x165e9f81

08003468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e042      	b.n	8003500 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe f994 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	@ 0x24
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fdbd 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b20      	cmp	r3, #32
 8003526:	d175      	bne.n	8003614 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_UART_Transmit+0x2c>
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e06e      	b.n	8003616 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2221      	movs	r2, #33	@ 0x21
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003546:	f7fe fb89 	bl	8001c5c <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003560:	d108      	bne.n	8003574 <HAL_UART_Transmit+0x6c>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	e003      	b.n	800357c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800357c:	e02e      	b.n	80035dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	2180      	movs	r1, #128	@ 0x80
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fb1f 	bl	8003bcc <UART_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e03a      	b.n	8003616 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	3302      	adds	r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e007      	b.n	80035ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3301      	adds	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1cb      	bne.n	800357e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2140      	movs	r1, #64	@ 0x40
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 faeb 	bl	8003bcc <UART_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e006      	b.n	8003616 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	4613      	mov	r3, r2
 800362a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b20      	cmp	r3, #32
 8003636:	d112      	bne.n	800365e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_UART_Receive_IT+0x26>
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e00b      	b.n	8003660 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	461a      	mov	r2, r3
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fb12 	bl	8003c7e <UART_Start_Receive_IT>
 800365a:	4603      	mov	r3, r0
 800365c:	e000      	b.n	8003660 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
  }
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b0ba      	sub	sp, #232	@ 0xe8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10f      	bne.n	80036ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_UART_IRQHandler+0x66>
 80036ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fbf2 	bl	8003eb0 <UART_Receive_IT>
      return;
 80036cc:	e25b      	b.n	8003b86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80de 	beq.w	8003894 <HAL_UART_IRQHandler+0x22c>
 80036d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80d1 	beq.w	8003894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_UART_IRQHandler+0xae>
 80036fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_UART_IRQHandler+0xd2>
 8003722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	f043 0202 	orr.w	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_UART_IRQHandler+0xf6>
 8003746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d011      	beq.n	800378e <HAL_UART_IRQHandler+0x126>
 800376a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f043 0208 	orr.w	r2, r3, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 81f2 	beq.w	8003b7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_UART_IRQHandler+0x14e>
 80037a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fb7d 	bl	8003eb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c0:	2b40      	cmp	r3, #64	@ 0x40
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <HAL_UART_IRQHandler+0x17a>
 80037da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d04f      	beq.n	8003882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa85 	bl	8003cf2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f2:	2b40      	cmp	r3, #64	@ 0x40
 80037f4:	d141      	bne.n	800387a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3314      	adds	r3, #20
 80037fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800380c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003810:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3314      	adds	r3, #20
 800381e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003822:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003826:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800382e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800383a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1d9      	bne.n	80037f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d013      	beq.n	8003872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a48 <HAL_UART_IRQHandler+0x3e0>)
 8003850:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fb8d 	bl	8001f76 <HAL_DMA_Abort_IT>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d016      	beq.n	8003890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800386c:	4610      	mov	r0, r2
 800386e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	e00e      	b.n	8003890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f994 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	e00a      	b.n	8003890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f990 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	e006      	b.n	8003890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f98c 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800388e:	e175      	b.n	8003b7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	bf00      	nop
    return;
 8003892:	e173      	b.n	8003b7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 814f 	bne.w	8003b3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8148 	beq.w	8003b3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8141 	beq.w	8003b3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038da:	2b40      	cmp	r3, #64	@ 0x40
 80038dc:	f040 80b6 	bne.w	8003a4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8145 	beq.w	8003b80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038fe:	429a      	cmp	r2, r3
 8003900:	f080 813e 	bcs.w	8003b80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800390a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003916:	f000 8088 	beq.w	8003a2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003930:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003946:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800394a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003952:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800395e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1d9      	bne.n	800391a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800398a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800398e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003992:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800399c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e1      	bne.n	8003966 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e3      	bne.n	80039a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	330c      	adds	r3, #12
 80039ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039fa:	f023 0310 	bic.w	r3, r3, #16
 80039fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e3      	bne.n	80039e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fa36 	bl	8001e96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f8b7 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a46:	e09b      	b.n	8003b80 <HAL_UART_IRQHandler+0x518>
 8003a48:	08003db9 	.word	0x08003db9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 808e 	beq.w	8003b84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8089 	beq.w	8003b84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e3      	bne.n	8003a72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3314      	adds	r3, #20
 8003aca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ace:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e3      	bne.n	8003aaa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0310 	bic.w	r3, r3, #16
 8003b06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b14:	61fa      	str	r2, [r7, #28]
 8003b16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	617b      	str	r3, [r7, #20]
   return(result);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e3      	bne.n	8003af0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f83d 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b3a:	e023      	b.n	8003b84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_UART_IRQHandler+0x4f4>
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f943 	bl	8003de0 <UART_Transmit_IT>
    return;
 8003b5a:	e014      	b.n	8003b86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <HAL_UART_IRQHandler+0x51e>
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f983 	bl	8003e80 <UART_EndTransmit_IT>
    return;
 8003b7a:	e004      	b.n	8003b86 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b7c:	bf00      	nop
 8003b7e:	e002      	b.n	8003b86 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b80:	bf00      	nop
 8003b82:	e000      	b.n	8003b86 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b84:	bf00      	nop
  }
}
 8003b86:	37e8      	adds	r7, #232	@ 0xe8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bdc:	e03b      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003be4:	d037      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be6:	f7fe f839 	bl	8001c5c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e03a      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d023      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b80      	cmp	r3, #128	@ 0x80
 8003c12:	d020      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b40      	cmp	r3, #64	@ 0x40
 8003c18:	d01d      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d116      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f857 	bl	8003cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2208      	movs	r2, #8
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e00f      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	bf0c      	ite	eq
 8003c66:	2301      	moveq	r3, #1
 8003c68:	2300      	movne	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d0b4      	beq.n	8003bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2222      	movs	r2, #34	@ 0x22
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cc2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0220 	orr.w	r2, r2, #32
 8003ce2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b095      	sub	sp, #84	@ 0x54
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	330c      	adds	r3, #12
 8003d00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3314      	adds	r3, #20
 8003d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3314      	adds	r3, #20
 8003d4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e5      	bne.n	8003d2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d119      	bne.n	8003d9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f023 0310 	bic.w	r3, r3, #16
 8003d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d8a:	61ba      	str	r2, [r7, #24]
 8003d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	613b      	str	r3, [r7, #16]
   return(result);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e5      	bne.n	8003d6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dac:	bf00      	nop
 8003dae:	3754      	adds	r7, #84	@ 0x54
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff fee4 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b21      	cmp	r3, #33	@ 0x21
 8003df2:	d13e      	bne.n	8003e72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dfc:	d114      	bne.n	8003e28 <UART_Transmit_IT+0x48>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d110      	bne.n	8003e28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	1c9a      	adds	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	621a      	str	r2, [r3, #32]
 8003e26:	e008      	b.n	8003e3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	1c59      	adds	r1, r3, #1
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6211      	str	r1, [r2, #32]
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4619      	mov	r1, r3
 8003e48:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e000      	b.n	8003e74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
  }
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff fe73 	bl	8003b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	@ 0x30
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b22      	cmp	r3, #34	@ 0x22
 8003ec2:	f040 80ae 	bne.w	8004022 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ece:	d117      	bne.n	8003f00 <UART_Receive_IT+0x50>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d113      	bne.n	8003f00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef8:	1c9a      	adds	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003efe:	e026      	b.n	8003f4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f12:	d007      	beq.n	8003f24 <UART_Receive_IT+0x74>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <UART_Receive_IT+0x82>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	e008      	b.n	8003f44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d15d      	bne.n	800401e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0220 	bic.w	r2, r2, #32
 8003f70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d135      	bne.n	8004014 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f023 0310 	bic.w	r3, r3, #16
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fce:	623a      	str	r2, [r7, #32]
 8003fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	69f9      	ldr	r1, [r7, #28]
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d10a      	bne.n	8004006 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fdd1 	bl	8003bb4 <HAL_UARTEx_RxEventCallback>
 8004012:	e002      	b.n	800401a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fd fd49 	bl	8001aac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e002      	b.n	8004024 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3730      	adds	r7, #48	@ 0x30
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004030:	b0c0      	sub	sp, #256	@ 0x100
 8004032:	af00      	add	r7, sp, #0
 8004034:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	68d9      	ldr	r1, [r3, #12]
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	ea40 0301 	orr.w	r3, r0, r1
 8004054:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	431a      	orrs	r2, r3
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	431a      	orrs	r2, r3
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004084:	f021 010c 	bic.w	r1, r1, #12
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004092:	430b      	orrs	r3, r1
 8004094:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	6999      	ldr	r1, [r3, #24]
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	ea40 0301 	orr.w	r3, r0, r1
 80040b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b8f      	ldr	r3, [pc, #572]	@ (80042f8 <UART_SetConfig+0x2cc>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d005      	beq.n	80040cc <UART_SetConfig+0xa0>
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b8d      	ldr	r3, [pc, #564]	@ (80042fc <UART_SetConfig+0x2d0>)
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d104      	bne.n	80040d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7fe fd58 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 80040d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040d4:	e003      	b.n	80040de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040d6:	f7fe fd3f 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 80040da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e8:	f040 810c 	bne.w	8004304 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040fe:	4622      	mov	r2, r4
 8004100:	462b      	mov	r3, r5
 8004102:	1891      	adds	r1, r2, r2
 8004104:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004106:	415b      	adcs	r3, r3
 8004108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800410a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800410e:	4621      	mov	r1, r4
 8004110:	eb12 0801 	adds.w	r8, r2, r1
 8004114:	4629      	mov	r1, r5
 8004116:	eb43 0901 	adc.w	r9, r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412e:	4690      	mov	r8, r2
 8004130:	4699      	mov	r9, r3
 8004132:	4623      	mov	r3, r4
 8004134:	eb18 0303 	adds.w	r3, r8, r3
 8004138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800413c:	462b      	mov	r3, r5
 800413e:	eb49 0303 	adc.w	r3, r9, r3
 8004142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004152:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004156:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800415a:	460b      	mov	r3, r1
 800415c:	18db      	adds	r3, r3, r3
 800415e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004160:	4613      	mov	r3, r2
 8004162:	eb42 0303 	adc.w	r3, r2, r3
 8004166:	657b      	str	r3, [r7, #84]	@ 0x54
 8004168:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800416c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004170:	f7fc f88e 	bl	8000290 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4b61      	ldr	r3, [pc, #388]	@ (8004300 <UART_SetConfig+0x2d4>)
 800417a:	fba3 2302 	umull	r2, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	011c      	lsls	r4, r3, #4
 8004182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800418c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004190:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	1891      	adds	r1, r2, r2
 800419a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800419c:	415b      	adcs	r3, r3
 800419e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041a4:	4641      	mov	r1, r8
 80041a6:	eb12 0a01 	adds.w	sl, r2, r1
 80041aa:	4649      	mov	r1, r9
 80041ac:	eb43 0b01 	adc.w	fp, r3, r1
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c4:	4692      	mov	sl, r2
 80041c6:	469b      	mov	fp, r3
 80041c8:	4643      	mov	r3, r8
 80041ca:	eb1a 0303 	adds.w	r3, sl, r3
 80041ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041d2:	464b      	mov	r3, r9
 80041d4:	eb4b 0303 	adc.w	r3, fp, r3
 80041d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041f0:	460b      	mov	r3, r1
 80041f2:	18db      	adds	r3, r3, r3
 80041f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041f6:	4613      	mov	r3, r2
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004202:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004206:	f7fc f843 	bl	8000290 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4611      	mov	r1, r2
 8004210:	4b3b      	ldr	r3, [pc, #236]	@ (8004300 <UART_SetConfig+0x2d4>)
 8004212:	fba3 2301 	umull	r2, r3, r3, r1
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2264      	movs	r2, #100	@ 0x64
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	1acb      	subs	r3, r1, r3
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004226:	4b36      	ldr	r3, [pc, #216]	@ (8004300 <UART_SetConfig+0x2d4>)
 8004228:	fba3 2302 	umull	r2, r3, r3, r2
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004234:	441c      	add	r4, r3
 8004236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004240:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004244:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004248:	4642      	mov	r2, r8
 800424a:	464b      	mov	r3, r9
 800424c:	1891      	adds	r1, r2, r2
 800424e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004250:	415b      	adcs	r3, r3
 8004252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004258:	4641      	mov	r1, r8
 800425a:	1851      	adds	r1, r2, r1
 800425c:	6339      	str	r1, [r7, #48]	@ 0x30
 800425e:	4649      	mov	r1, r9
 8004260:	414b      	adcs	r3, r1
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004270:	4659      	mov	r1, fp
 8004272:	00cb      	lsls	r3, r1, #3
 8004274:	4651      	mov	r1, sl
 8004276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427a:	4651      	mov	r1, sl
 800427c:	00ca      	lsls	r2, r1, #3
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	4603      	mov	r3, r0
 8004284:	4642      	mov	r2, r8
 8004286:	189b      	adds	r3, r3, r2
 8004288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800428c:	464b      	mov	r3, r9
 800428e:	460a      	mov	r2, r1
 8004290:	eb42 0303 	adc.w	r3, r2, r3
 8004294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042ac:	460b      	mov	r3, r1
 80042ae:	18db      	adds	r3, r3, r3
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042b2:	4613      	mov	r3, r2
 80042b4:	eb42 0303 	adc.w	r3, r2, r3
 80042b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042c2:	f7fb ffe5 	bl	8000290 <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <UART_SetConfig+0x2d4>)
 80042cc:	fba3 1302 	umull	r1, r3, r3, r2
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	2164      	movs	r1, #100	@ 0x64
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	3332      	adds	r3, #50	@ 0x32
 80042de:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <UART_SetConfig+0x2d4>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	f003 0207 	and.w	r2, r3, #7
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4422      	add	r2, r4
 80042f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042f4:	e106      	b.n	8004504 <UART_SetConfig+0x4d8>
 80042f6:	bf00      	nop
 80042f8:	40011000 	.word	0x40011000
 80042fc:	40011400 	.word	0x40011400
 8004300:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004308:	2200      	movs	r2, #0
 800430a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800430e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004312:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004316:	4642      	mov	r2, r8
 8004318:	464b      	mov	r3, r9
 800431a:	1891      	adds	r1, r2, r2
 800431c:	6239      	str	r1, [r7, #32]
 800431e:	415b      	adcs	r3, r3
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
 8004322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004326:	4641      	mov	r1, r8
 8004328:	1854      	adds	r4, r2, r1
 800432a:	4649      	mov	r1, r9
 800432c:	eb43 0501 	adc.w	r5, r3, r1
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	00eb      	lsls	r3, r5, #3
 800433a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433e:	00e2      	lsls	r2, r4, #3
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
 8004344:	4643      	mov	r3, r8
 8004346:	18e3      	adds	r3, r4, r3
 8004348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800434c:	464b      	mov	r3, r9
 800434e:	eb45 0303 	adc.w	r3, r5, r3
 8004352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004362:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004372:	4629      	mov	r1, r5
 8004374:	008b      	lsls	r3, r1, #2
 8004376:	4621      	mov	r1, r4
 8004378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800437c:	4621      	mov	r1, r4
 800437e:	008a      	lsls	r2, r1, #2
 8004380:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004384:	f7fb ff84 	bl	8000290 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4b60      	ldr	r3, [pc, #384]	@ (8004510 <UART_SetConfig+0x4e4>)
 800438e:	fba3 2302 	umull	r2, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	011c      	lsls	r4, r3, #4
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	61b9      	str	r1, [r7, #24]
 80043b0:	415b      	adcs	r3, r3
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b8:	4641      	mov	r1, r8
 80043ba:	1851      	adds	r1, r2, r1
 80043bc:	6139      	str	r1, [r7, #16]
 80043be:	4649      	mov	r1, r9
 80043c0:	414b      	adcs	r3, r1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d0:	4659      	mov	r1, fp
 80043d2:	00cb      	lsls	r3, r1, #3
 80043d4:	4651      	mov	r1, sl
 80043d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043da:	4651      	mov	r1, sl
 80043dc:	00ca      	lsls	r2, r1, #3
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	4642      	mov	r2, r8
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043ec:	464b      	mov	r3, r9
 80043ee:	460a      	mov	r2, r1
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004402:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004410:	4649      	mov	r1, r9
 8004412:	008b      	lsls	r3, r1, #2
 8004414:	4641      	mov	r1, r8
 8004416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800441a:	4641      	mov	r1, r8
 800441c:	008a      	lsls	r2, r1, #2
 800441e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004422:	f7fb ff35 	bl	8000290 <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4611      	mov	r1, r2
 800442c:	4b38      	ldr	r3, [pc, #224]	@ (8004510 <UART_SetConfig+0x4e4>)
 800442e:	fba3 2301 	umull	r2, r3, r3, r1
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2264      	movs	r2, #100	@ 0x64
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	1acb      	subs	r3, r1, r3
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	3332      	adds	r3, #50	@ 0x32
 8004440:	4a33      	ldr	r2, [pc, #204]	@ (8004510 <UART_SetConfig+0x4e4>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800444c:	441c      	add	r4, r3
 800444e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004452:	2200      	movs	r2, #0
 8004454:	673b      	str	r3, [r7, #112]	@ 0x70
 8004456:	677a      	str	r2, [r7, #116]	@ 0x74
 8004458:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	415b      	adcs	r3, r3
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800446c:	4641      	mov	r1, r8
 800446e:	1851      	adds	r1, r2, r1
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	4649      	mov	r1, r9
 8004474:	414b      	adcs	r3, r1
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004484:	4659      	mov	r1, fp
 8004486:	00cb      	lsls	r3, r1, #3
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448e:	4651      	mov	r1, sl
 8004490:	00ca      	lsls	r2, r1, #3
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	4603      	mov	r3, r0
 8004498:	4642      	mov	r2, r8
 800449a:	189b      	adds	r3, r3, r2
 800449c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800449e:	464b      	mov	r3, r9
 80044a0:	460a      	mov	r2, r1
 80044a2:	eb42 0303 	adc.w	r3, r2, r3
 80044a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80044b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044c0:	4649      	mov	r1, r9
 80044c2:	008b      	lsls	r3, r1, #2
 80044c4:	4641      	mov	r1, r8
 80044c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ca:	4641      	mov	r1, r8
 80044cc:	008a      	lsls	r2, r1, #2
 80044ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044d2:	f7fb fedd 	bl	8000290 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <UART_SetConfig+0x4e4>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	@ 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	3332      	adds	r3, #50	@ 0x32
 80044ee:	4a08      	ldr	r2, [pc, #32]	@ (8004510 <UART_SetConfig+0x4e4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 020f 	and.w	r2, r3, #15
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4422      	add	r2, r4
 8004502:	609a      	str	r2, [r3, #8]
}
 8004504:	bf00      	nop
 8004506:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800450a:	46bd      	mov	sp, r7
 800450c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004510:	51eb851f 	.word	0x51eb851f

08004514 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004518:	4904      	ldr	r1, [pc, #16]	@ (800452c <MX_FATFS_Init+0x18>)
 800451a:	4805      	ldr	r0, [pc, #20]	@ (8004530 <MX_FATFS_Init+0x1c>)
 800451c:	f003 fbb2 	bl	8007c84 <FATFS_LinkDriver>
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	4b03      	ldr	r3, [pc, #12]	@ (8004534 <MX_FATFS_Init+0x20>)
 8004526:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004528:	bf00      	nop
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200068e0 	.word	0x200068e0
 8004530:	20000010 	.word	0x20000010
 8004534:	200068dc 	.word	0x200068dc

08004538 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800453c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800453e:	4618      	mov	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fc fc9b 	bl	8000e90 <SD_disk_initialize>
 800455a:	4603      	mov	r3, r0
 800455c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	4603      	mov	r3, r0
 800456e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);;
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fc fd76 	bl	8001064 <SD_disk_status>
 8004578:	4603      	mov	r3, r0
 800457a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	4603      	mov	r3, r0
 8004592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004594:	7bf8      	ldrb	r0, [r7, #15]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	f7fc fd78 	bl	8001090 <SD_disk_read>
 80045a0:	4603      	mov	r3, r0
 80045a2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4603      	mov	r3, r0
 80045ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80045bc:	7bf8      	ldrb	r0, [r7, #15]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	f7fc fdce 	bl	8001164 <SD_disk_write>
 80045c8:	4603      	mov	r3, r0
 80045ca:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	603a      	str	r2, [r7, #0]
 80045de:	71fb      	strb	r3, [r7, #7]
 80045e0:	460b      	mov	r3, r1
 80045e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	79b9      	ldrb	r1, [r7, #6]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fe3e 	bl	800126c <SD_disk_ioctl>
 80045f0:	4603      	mov	r3, r0
 80045f2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	4a08      	ldr	r2, [pc, #32]	@ (800462c <disk_status+0x30>)
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	79fa      	ldrb	r2, [r7, #7]
 8004614:	4905      	ldr	r1, [pc, #20]	@ (800462c <disk_status+0x30>)
 8004616:	440a      	add	r2, r1
 8004618:	7a12      	ldrb	r2, [r2, #8]
 800461a:	4610      	mov	r0, r2
 800461c:	4798      	blx	r3
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20006b0c 	.word	0x20006b0c

08004630 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	4a0e      	ldr	r2, [pc, #56]	@ (800467c <disk_initialize+0x4c>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d114      	bne.n	8004672 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	4a0c      	ldr	r2, [pc, #48]	@ (800467c <disk_initialize+0x4c>)
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	79fa      	ldrb	r2, [r7, #7]
 8004656:	4909      	ldr	r1, [pc, #36]	@ (800467c <disk_initialize+0x4c>)
 8004658:	440a      	add	r2, r1
 800465a:	7a12      	ldrb	r2, [r2, #8]
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3
 8004660:	4603      	mov	r3, r0
 8004662:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	4a03      	ldr	r2, [pc, #12]	@ (800467c <disk_initialize+0x4c>)
 800466e:	2101      	movs	r1, #1
 8004670:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004672:	7bfb      	ldrb	r3, [r7, #15]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20006b0c 	.word	0x20006b0c

08004680 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	4a0a      	ldr	r2, [pc, #40]	@ (80046bc <disk_read+0x3c>)
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	689c      	ldr	r4, [r3, #8]
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	4a07      	ldr	r2, [pc, #28]	@ (80046bc <disk_read+0x3c>)
 80046a0:	4413      	add	r3, r2
 80046a2:	7a18      	ldrb	r0, [r3, #8]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	47a0      	blx	r4
 80046ac:	4603      	mov	r3, r0
 80046ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd90      	pop	{r4, r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20006b0c 	.word	0x20006b0c

080046c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <disk_write+0x3c>)
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68dc      	ldr	r4, [r3, #12]
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	4a07      	ldr	r2, [pc, #28]	@ (80046fc <disk_write+0x3c>)
 80046e0:	4413      	add	r3, r2
 80046e2:	7a18      	ldrb	r0, [r3, #8]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	47a0      	blx	r4
 80046ec:	4603      	mov	r3, r0
 80046ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd90      	pop	{r4, r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20006b0c 	.word	0x20006b0c

08004700 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	603a      	str	r2, [r7, #0]
 800470a:	71fb      	strb	r3, [r7, #7]
 800470c:	460b      	mov	r3, r1
 800470e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	4a09      	ldr	r2, [pc, #36]	@ (8004738 <disk_ioctl+0x38>)
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	79fa      	ldrb	r2, [r7, #7]
 800471e:	4906      	ldr	r1, [pc, #24]	@ (8004738 <disk_ioctl+0x38>)
 8004720:	440a      	add	r2, r1
 8004722:	7a10      	ldrb	r0, [r2, #8]
 8004724:	79b9      	ldrb	r1, [r7, #6]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	4798      	blx	r3
 800472a:	4603      	mov	r3, r0
 800472c:	73fb      	strb	r3, [r7, #15]
  return res;
 800472e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20006b0c 	.word	0x20006b0c

0800473c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3301      	adds	r3, #1
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800474c:	89fb      	ldrh	r3, [r7, #14]
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	b21a      	sxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b21b      	sxth	r3, r3
 8004758:	4313      	orrs	r3, r2
 800475a:	b21b      	sxth	r3, r3
 800475c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800475e:	89fb      	ldrh	r3, [r7, #14]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3303      	adds	r3, #3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	3202      	adds	r2, #2
 8004784:	7812      	ldrb	r2, [r2, #0]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	3201      	adds	r2, #1
 8004792:	7812      	ldrb	r2, [r2, #0]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	7812      	ldrb	r2, [r2, #0]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80047a4:	68fb      	ldr	r3, [r7, #12]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	460b      	mov	r3, r1
 80047bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	887a      	ldrh	r2, [r7, #2]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	0a1b      	lsrs	r3, r3, #8
 80047ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	887a      	ldrh	r2, [r7, #2]
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	0a1b      	lsrs	r3, r3, #8
 8004826:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00d      	beq.n	8004876 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	1c53      	adds	r3, r2, #1
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	1c59      	adds	r1, r3, #1
 8004864:	6179      	str	r1, [r7, #20]
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	607b      	str	r3, [r7, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f1      	bne.n	800485a <mem_cpy+0x1a>
	}
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004882:	b480      	push	{r7}
 8004884:	b087      	sub	sp, #28
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	617a      	str	r2, [r7, #20]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f3      	bne.n	8004892 <mem_set+0x10>
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	@ 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	61fa      	str	r2, [r7, #28]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	61ba      	str	r2, [r7, #24]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	1acb      	subs	r3, r1, r3
 80048e4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <mem_cmp+0x40>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0eb      	beq.n	80048d0 <mem_cmp+0x18>

	return r;
 80048f8:	697b      	ldr	r3, [r7, #20]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3724      	adds	r7, #36	@ 0x24
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004910:	e002      	b.n	8004918 <chk_chr+0x12>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3301      	adds	r3, #1
 8004916:	607b      	str	r3, [r7, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <chk_chr+0x26>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	4293      	cmp	r3, r2
 800492a:	d1f2      	bne.n	8004912 <chk_chr+0xc>
	return *str;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	781b      	ldrb	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e029      	b.n	80049a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004950:	4a27      	ldr	r2, [pc, #156]	@ (80049f0 <chk_lock+0xb4>)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	4413      	add	r3, r2
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01d      	beq.n	800499a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800495e:	4a24      	ldr	r2, [pc, #144]	@ (80049f0 <chk_lock+0xb4>)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	4413      	add	r3, r2
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d116      	bne.n	800499e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004970:	4a1f      	ldr	r2, [pc, #124]	@ (80049f0 <chk_lock+0xb4>)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	4413      	add	r3, r2
 8004978:	3304      	adds	r3, #4
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004980:	429a      	cmp	r2, r3
 8004982:	d10c      	bne.n	800499e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004984:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <chk_lock+0xb4>)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	4413      	add	r3, r2
 800498c:	3308      	adds	r3, #8
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004994:	429a      	cmp	r2, r3
 8004996:	d102      	bne.n	800499e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004998:	e007      	b.n	80049aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800499a:	2301      	movs	r3, #1
 800499c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3301      	adds	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d9d2      	bls.n	8004950 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d109      	bne.n	80049c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <chk_lock+0x80>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d101      	bne.n	80049c0 <chk_lock+0x84>
 80049bc:	2300      	movs	r3, #0
 80049be:	e010      	b.n	80049e2 <chk_lock+0xa6>
 80049c0:	2312      	movs	r3, #18
 80049c2:	e00e      	b.n	80049e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d108      	bne.n	80049dc <chk_lock+0xa0>
 80049ca:	4a09      	ldr	r2, [pc, #36]	@ (80049f0 <chk_lock+0xb4>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	4413      	add	r3, r2
 80049d2:	330c      	adds	r3, #12
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049da:	d101      	bne.n	80049e0 <chk_lock+0xa4>
 80049dc:	2310      	movs	r3, #16
 80049de:	e000      	b.n	80049e2 <chk_lock+0xa6>
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	200068ec 	.word	0x200068ec

080049f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	e002      	b.n	8004a06 <enq_lock+0x12>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3301      	adds	r3, #1
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d806      	bhi.n	8004a1a <enq_lock+0x26>
 8004a0c:	4a09      	ldr	r2, [pc, #36]	@ (8004a34 <enq_lock+0x40>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	4413      	add	r3, r2
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f2      	bne.n	8004a00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	200068ec 	.word	0x200068ec

08004a38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e01f      	b.n	8004a88 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004a48:	4a41      	ldr	r2, [pc, #260]	@ (8004b50 <inc_lock+0x118>)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	4413      	add	r3, r2
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d113      	bne.n	8004a82 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8004b50 <inc_lock+0x118>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	4413      	add	r3, r2
 8004a62:	3304      	adds	r3, #4
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d109      	bne.n	8004a82 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004a6e:	4a38      	ldr	r2, [pc, #224]	@ (8004b50 <inc_lock+0x118>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	4413      	add	r3, r2
 8004a76:	3308      	adds	r3, #8
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d006      	beq.n	8004a90 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3301      	adds	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d9dc      	bls.n	8004a48 <inc_lock+0x10>
 8004a8e:	e000      	b.n	8004a92 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004a90:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d132      	bne.n	8004afe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e002      	b.n	8004aa4 <inc_lock+0x6c>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d806      	bhi.n	8004ab8 <inc_lock+0x80>
 8004aaa:	4a29      	ldr	r2, [pc, #164]	@ (8004b50 <inc_lock+0x118>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	4413      	add	r3, r2
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f2      	bne.n	8004a9e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d101      	bne.n	8004ac2 <inc_lock+0x8a>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e040      	b.n	8004b44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4922      	ldr	r1, [pc, #136]	@ (8004b50 <inc_lock+0x118>)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	440b      	add	r3, r1
 8004ace:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	491e      	ldr	r1, [pc, #120]	@ (8004b50 <inc_lock+0x118>)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	440b      	add	r3, r1
 8004adc:	3304      	adds	r3, #4
 8004ade:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	491a      	ldr	r1, [pc, #104]	@ (8004b50 <inc_lock+0x118>)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	440b      	add	r3, r1
 8004aec:	3308      	adds	r3, #8
 8004aee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004af0:	4a17      	ldr	r2, [pc, #92]	@ (8004b50 <inc_lock+0x118>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	4413      	add	r3, r2
 8004af8:	330c      	adds	r3, #12
 8004afa:	2200      	movs	r2, #0
 8004afc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <inc_lock+0xe0>
 8004b04:	4a12      	ldr	r2, [pc, #72]	@ (8004b50 <inc_lock+0x118>)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	4413      	add	r3, r2
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <inc_lock+0xe0>
 8004b14:	2300      	movs	r3, #0
 8004b16:	e015      	b.n	8004b44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <inc_lock+0xf8>
 8004b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b50 <inc_lock+0x118>)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	4413      	add	r3, r2
 8004b26:	330c      	adds	r3, #12
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	e001      	b.n	8004b34 <inc_lock+0xfc>
 8004b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b34:	4906      	ldr	r1, [pc, #24]	@ (8004b50 <inc_lock+0x118>)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	440b      	add	r3, r1
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	200068ec 	.word	0x200068ec

08004b54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d825      	bhi.n	8004bb4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004b68:	4a17      	ldr	r2, [pc, #92]	@ (8004bc8 <dec_lock+0x74>)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	4413      	add	r3, r2
 8004b70:	330c      	adds	r3, #12
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004b76:	89fb      	ldrh	r3, [r7, #14]
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b7c:	d101      	bne.n	8004b82 <dec_lock+0x2e>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004b82:	89fb      	ldrh	r3, [r7, #14]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <dec_lock+0x3a>
 8004b88:	89fb      	ldrh	r3, [r7, #14]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8004bc8 <dec_lock+0x74>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	4413      	add	r3, r2
 8004b96:	330c      	adds	r3, #12
 8004b98:	89fa      	ldrh	r2, [r7, #14]
 8004b9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004b9c:	89fb      	ldrh	r3, [r7, #14]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d105      	bne.n	8004bae <dec_lock+0x5a>
 8004ba2:	4a09      	ldr	r2, [pc, #36]	@ (8004bc8 <dec_lock+0x74>)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	4413      	add	r3, r2
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	737b      	strb	r3, [r7, #13]
 8004bb2:	e001      	b.n	8004bb8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004bb8:	7b7b      	ldrb	r3, [r7, #13]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	200068ec 	.word	0x200068ec

08004bcc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e010      	b.n	8004bfc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004bda:	4a0d      	ldr	r2, [pc, #52]	@ (8004c10 <clear_lock+0x44>)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	4413      	add	r3, r2
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d105      	bne.n	8004bf6 <clear_lock+0x2a>
 8004bea:	4a09      	ldr	r2, [pc, #36]	@ (8004c10 <clear_lock+0x44>)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	4413      	add	r3, r2
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d9eb      	bls.n	8004bda <clear_lock+0xe>
	}
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	200068ec 	.word	0x200068ec

08004c14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	78db      	ldrb	r3, [r3, #3]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d034      	beq.n	8004c92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7858      	ldrb	r0, [r3, #1]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c38:	2301      	movs	r3, #1
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	f7ff fd40 	bl	80046c0 <disk_write>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
 8004c4a:	e022      	b.n	8004c92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	1ad2      	subs	r2, r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d217      	bcs.n	8004c92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	789b      	ldrb	r3, [r3, #2]
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	e010      	b.n	8004c8c <sync_window+0x78>
					wsect += fs->fsize;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4413      	add	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7858      	ldrb	r0, [r3, #1]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c7e:	2301      	movs	r3, #1
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	f7ff fd1d 	bl	80046c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d8eb      	bhi.n	8004c6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d01b      	beq.n	8004cec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ffad 	bl	8004c14 <sync_window>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d113      	bne.n	8004cec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	7858      	ldrb	r0, [r3, #1]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004cce:	2301      	movs	r3, #1
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	f7ff fcd5 	bl	8004680 <disk_read>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ce0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff87 	bl	8004c14 <sync_window>
 8004d06:	4603      	mov	r3, r0
 8004d08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d158      	bne.n	8004dc2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d148      	bne.n	8004daa <sync_fs+0xb2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	791b      	ldrb	r3, [r3, #4]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d144      	bne.n	8004daa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3338      	adds	r3, #56	@ 0x38
 8004d24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fda9 	bl	8004882 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3338      	adds	r3, #56	@ 0x38
 8004d34:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004d38:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fd38 	bl	80047b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3338      	adds	r3, #56	@ 0x38
 8004d46:	4921      	ldr	r1, [pc, #132]	@ (8004dcc <sync_fs+0xd4>)
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fd4d 	bl	80047e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3338      	adds	r3, #56	@ 0x38
 8004d52:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004d56:	491e      	ldr	r1, [pc, #120]	@ (8004dd0 <sync_fs+0xd8>)
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fd45 	bl	80047e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3338      	adds	r3, #56	@ 0x38
 8004d62:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f7ff fd3b 	bl	80047e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3338      	adds	r3, #56	@ 0x38
 8004d76:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7ff fd31 	bl	80047e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	7858      	ldrb	r0, [r3, #1]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f7ff fc8e 	bl	80046c0 <disk_write>
			fs->fsi_flag = 0;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2200      	movs	r2, #0
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fca4 	bl	8004700 <disk_ioctl>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <sync_fs+0xca>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	41615252 	.word	0x41615252
 8004dd0:	61417272 	.word	0x61417272

08004dd4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	3b02      	subs	r3, #2
 8004de2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	3b02      	subs	r3, #2
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d301      	bcc.n	8004df4 <clust2sect+0x20>
 8004df0:	2300      	movs	r3, #0
 8004df2:	e008      	b.n	8004e06 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	895b      	ldrh	r3, [r3, #10]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	fb03 f202 	mul.w	r2, r3, r2
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	4413      	add	r3, r2
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b086      	sub	sp, #24
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d904      	bls.n	8004e32 <get_fat+0x20>
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004e32:	2301      	movs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e08e      	b.n	8004f56 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e3c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d061      	beq.n	8004f0a <get_fat+0xf8>
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	dc7b      	bgt.n	8004f42 <get_fat+0x130>
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d002      	beq.n	8004e54 <get_fat+0x42>
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d041      	beq.n	8004ed6 <get_fat+0xc4>
 8004e52:	e076      	b.n	8004f42 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	0a5b      	lsrs	r3, r3, #9
 8004e6a:	4413      	add	r3, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6938      	ldr	r0, [r7, #16]
 8004e70:	f7ff ff14 	bl	8004c9c <move_window>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d166      	bne.n	8004f48 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	60fa      	str	r2, [r7, #12]
 8004e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4413      	add	r3, r2
 8004e88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e8c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	0a5b      	lsrs	r3, r3, #9
 8004e96:	4413      	add	r3, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6938      	ldr	r0, [r7, #16]
 8004e9c:	f7ff fefe 	bl	8004c9c <move_window>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d152      	bne.n	8004f4c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <get_fat+0xba>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	e002      	b.n	8004ed2 <get_fat+0xc0>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed2:	617b      	str	r3, [r7, #20]
			break;
 8004ed4:	e03f      	b.n	8004f56 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	0a1b      	lsrs	r3, r3, #8
 8004ede:	4413      	add	r3, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6938      	ldr	r0, [r7, #16]
 8004ee4:	f7ff feda 	bl	8004c9c <move_window>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d130      	bne.n	8004f50 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004efc:	4413      	add	r3, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fc1c 	bl	800473c <ld_word>
 8004f04:	4603      	mov	r3, r0
 8004f06:	617b      	str	r3, [r7, #20]
			break;
 8004f08:	e025      	b.n	8004f56 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	09db      	lsrs	r3, r3, #7
 8004f12:	4413      	add	r3, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	6938      	ldr	r0, [r7, #16]
 8004f18:	f7ff fec0 	bl	8004c9c <move_window>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d118      	bne.n	8004f54 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004f30:	4413      	add	r3, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fc1a 	bl	800476c <ld_dword>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f3e:	617b      	str	r3, [r7, #20]
			break;
 8004f40:	e009      	b.n	8004f56 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004f42:	2301      	movs	r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e006      	b.n	8004f56 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f48:	bf00      	nop
 8004f4a:	e004      	b.n	8004f56 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f4c:	bf00      	nop
 8004f4e:	e002      	b.n	8004f56 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004f50:	bf00      	nop
 8004f52:	e000      	b.n	8004f56 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f54:	bf00      	nop
		}
	}

	return val;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b089      	sub	sp, #36	@ 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	f240 80d9 	bls.w	800512a <put_fat+0x1ca>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	f080 80d3 	bcs.w	800512a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	f000 8096 	beq.w	80050ba <put_fat+0x15a>
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	f300 80cb 	bgt.w	800512a <put_fat+0x1ca>
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d002      	beq.n	8004f9e <put_fat+0x3e>
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d06e      	beq.n	800507a <put_fat+0x11a>
 8004f9c:	e0c5      	b.n	800512a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4413      	add	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	0a5b      	lsrs	r3, r3, #9
 8004fb4:	4413      	add	r3, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff fe6f 	bl	8004c9c <move_window>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004fc2:	7ffb      	ldrb	r3, [r7, #31]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f040 80a9 	bne.w	800511c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	61b9      	str	r1, [r7, #24]
 8004fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fda:	4413      	add	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00d      	beq.n	8005004 <put_fat+0xa4>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	b25a      	sxtb	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	b25b      	sxtb	r3, r3
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	b2db      	uxtb	r3, r3
 8005002:	e001      	b.n	8005008 <put_fat+0xa8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	0a5b      	lsrs	r3, r3, #9
 800501a:	4413      	add	r3, r2
 800501c:	4619      	mov	r1, r3
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff fe3c 	bl	8004c9c <move_window>
 8005024:	4603      	mov	r3, r0
 8005026:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005028:	7ffb      	ldrb	r3, [r7, #31]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d178      	bne.n	8005120 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	4413      	add	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <put_fat+0xf0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	b2db      	uxtb	r3, r3
 800504e:	e00e      	b.n	800506e <put_fat+0x10e>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b25b      	sxtb	r3, r3
 8005056:	f023 030f 	bic.w	r3, r3, #15
 800505a:	b25a      	sxtb	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	b25b      	sxtb	r3, r3
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	b25b      	sxtb	r3, r3
 8005068:	4313      	orrs	r3, r2
 800506a:	b25b      	sxtb	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	70da      	strb	r2, [r3, #3]
			break;
 8005078:	e057      	b.n	800512a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	4413      	add	r3, r2
 8005084:	4619      	mov	r1, r3
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff fe08 	bl	8004c9c <move_window>
 800508c:	4603      	mov	r3, r0
 800508e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005090:	7ffb      	ldrb	r3, [r7, #31]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d146      	bne.n	8005124 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80050a4:	4413      	add	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	b292      	uxth	r2, r2
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fb80 	bl	80047b2 <st_word>
			fs->wflag = 1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	70da      	strb	r2, [r3, #3]
			break;
 80050b8:	e037      	b.n	800512a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	09db      	lsrs	r3, r3, #7
 80050c2:	4413      	add	r3, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff fde8 	bl	8004c9c <move_window>
 80050cc:	4603      	mov	r3, r0
 80050ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050d0:	7ffb      	ldrb	r3, [r7, #31]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d128      	bne.n	8005128 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80050ea:	4413      	add	r3, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fb3d 	bl	800476c <ld_dword>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80050f8:	4323      	orrs	r3, r4
 80050fa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800510a:	4413      	add	r3, r2
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fb6a 	bl	80047e8 <st_dword>
			fs->wflag = 1;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	70da      	strb	r2, [r3, #3]
			break;
 800511a:	e006      	b.n	800512a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800511c:	bf00      	nop
 800511e:	e004      	b.n	800512a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005120:	bf00      	nop
 8005122:	e002      	b.n	800512a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005124:	bf00      	nop
 8005126:	e000      	b.n	800512a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005128:	bf00      	nop
		}
	}
	return res;
 800512a:	7ffb      	ldrb	r3, [r7, #31]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3724      	adds	r7, #36	@ 0x24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}

08005134 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d904      	bls.n	800515a <remove_chain+0x26>
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	d301      	bcc.n	800515e <remove_chain+0x2a>
 800515a:	2302      	movs	r3, #2
 800515c:	e04b      	b.n	80051f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00c      	beq.n	800517e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005164:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	69b8      	ldr	r0, [r7, #24]
 800516c:	f7ff fef8 	bl	8004f60 <put_fat>
 8005170:	4603      	mov	r3, r0
 8005172:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <remove_chain+0x4a>
 800517a:	7ffb      	ldrb	r3, [r7, #31]
 800517c:	e03b      	b.n	80051f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fe46 	bl	8004e12 <get_fat>
 8005186:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d031      	beq.n	80051f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <remove_chain+0x64>
 8005194:	2302      	movs	r3, #2
 8005196:	e02e      	b.n	80051f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800519e:	d101      	bne.n	80051a4 <remove_chain+0x70>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e028      	b.n	80051f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80051a4:	2200      	movs	r2, #0
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	69b8      	ldr	r0, [r7, #24]
 80051aa:	f7ff fed9 	bl	8004f60 <put_fat>
 80051ae:	4603      	mov	r3, r0
 80051b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <remove_chain+0x88>
 80051b8:	7ffb      	ldrb	r3, [r7, #31]
 80051ba:	e01c      	b.n	80051f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	3b02      	subs	r3, #2
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d20b      	bcs.n	80051e2 <remove_chain+0xae>
			fs->free_clst++;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	791b      	ldrb	r3, [r3, #4]
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d3c6      	bcc.n	800517e <remove_chain+0x4a>
 80051f0:	e000      	b.n	80051f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80051f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3720      	adds	r7, #32
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b088      	sub	sp, #32
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10d      	bne.n	8005230 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <create_chain+0x2c>
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	429a      	cmp	r2, r3
 8005228:	d31b      	bcc.n	8005262 <create_chain+0x64>
 800522a:	2301      	movs	r3, #1
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	e018      	b.n	8005262 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fded 	bl	8004e12 <get_fat>
 8005238:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d801      	bhi.n	8005244 <create_chain+0x46>
 8005240:	2301      	movs	r3, #1
 8005242:	e070      	b.n	8005326 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800524a:	d101      	bne.n	8005250 <create_chain+0x52>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	e06a      	b.n	8005326 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	429a      	cmp	r2, r3
 8005258:	d201      	bcs.n	800525e <create_chain+0x60>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	e063      	b.n	8005326 <create_chain+0x128>
		scl = clst;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	3301      	adds	r3, #1
 800526a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	429a      	cmp	r2, r3
 8005274:	d307      	bcc.n	8005286 <create_chain+0x88>
				ncl = 2;
 8005276:	2302      	movs	r3, #2
 8005278:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	429a      	cmp	r2, r3
 8005280:	d901      	bls.n	8005286 <create_chain+0x88>
 8005282:	2300      	movs	r3, #0
 8005284:	e04f      	b.n	8005326 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005286:	69f9      	ldr	r1, [r7, #28]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff fdc2 	bl	8004e12 <get_fat>
 800528e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00e      	beq.n	80052b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d003      	beq.n	80052a4 <create_chain+0xa6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052a2:	d101      	bne.n	80052a8 <create_chain+0xaa>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	e03e      	b.n	8005326 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d1da      	bne.n	8005266 <create_chain+0x68>
 80052b0:	2300      	movs	r3, #0
 80052b2:	e038      	b.n	8005326 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80052b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80052b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052ba:	69f9      	ldr	r1, [r7, #28]
 80052bc:	6938      	ldr	r0, [r7, #16]
 80052be:	f7ff fe4f 	bl	8004f60 <put_fat>
 80052c2:	4603      	mov	r3, r0
 80052c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <create_chain+0xe2>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	6938      	ldr	r0, [r7, #16]
 80052d8:	f7ff fe42 	bl	8004f60 <put_fat>
 80052dc:	4603      	mov	r3, r0
 80052de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d116      	bne.n	8005314 <create_chain+0x116>
		fs->last_clst = ncl;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	3b02      	subs	r3, #2
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d804      	bhi.n	8005304 <create_chain+0x106>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	1e5a      	subs	r2, r3, #1
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	791b      	ldrb	r3, [r3, #4]
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	b2da      	uxtb	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	711a      	strb	r2, [r3, #4]
 8005312:	e007      	b.n	8005324 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d102      	bne.n	8005320 <create_chain+0x122>
 800531a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800531e:	e000      	b.n	8005322 <create_chain+0x124>
 8005320:	2301      	movs	r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005324:	69fb      	ldr	r3, [r7, #28]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800532e:	b480      	push	{r7}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	3304      	adds	r3, #4
 8005344:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	0a5b      	lsrs	r3, r3, #9
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	8952      	ldrh	r2, [r2, #10]
 800534e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005352:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1d1a      	adds	r2, r3, #4
 8005358:	613a      	str	r2, [r7, #16]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <clmt_clust+0x3a>
 8005364:	2300      	movs	r3, #0
 8005366:	e010      	b.n	800538a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	429a      	cmp	r2, r3
 800536e:	d307      	bcc.n	8005380 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3304      	adds	r3, #4
 800537c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800537e:	e7e9      	b.n	8005354 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005380:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
}
 800538a:	4618      	mov	r0, r3
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053ac:	d204      	bcs.n	80053b8 <dir_sdi+0x22>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <dir_sdi+0x26>
		return FR_INT_ERR;
 80053b8:	2302      	movs	r3, #2
 80053ba:	e063      	b.n	8005484 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <dir_sdi+0x46>
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d902      	bls.n	80053dc <dir_sdi+0x46>
		clst = fs->dirbase;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053da:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10c      	bne.n	80053fc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	8912      	ldrh	r2, [r2, #8]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d301      	bcc.n	80053f2 <dir_sdi+0x5c>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e048      	b.n	8005484 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	61da      	str	r2, [r3, #28]
 80053fa:	e029      	b.n	8005450 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	895b      	ldrh	r3, [r3, #10]
 8005400:	025b      	lsls	r3, r3, #9
 8005402:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005404:	e019      	b.n	800543a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6979      	ldr	r1, [r7, #20]
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff fd01 	bl	8004e12 <get_fat>
 8005410:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005418:	d101      	bne.n	800541e <dir_sdi+0x88>
 800541a:	2301      	movs	r3, #1
 800541c:	e032      	b.n	8005484 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d904      	bls.n	800542e <dir_sdi+0x98>
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	429a      	cmp	r2, r3
 800542c:	d301      	bcc.n	8005432 <dir_sdi+0x9c>
 800542e:	2302      	movs	r3, #2
 8005430:	e028      	b.n	8005484 <dir_sdi+0xee>
			ofs -= csz;
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	429a      	cmp	r2, r3
 8005440:	d2e1      	bcs.n	8005406 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005442:	6979      	ldr	r1, [r7, #20]
 8005444:	6938      	ldr	r0, [r7, #16]
 8005446:	f7ff fcc5 	bl	8004dd4 <clust2sect>
 800544a:	4602      	mov	r2, r0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <dir_sdi+0xcc>
 800545e:	2302      	movs	r3, #2
 8005460:	e010      	b.n	8005484 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69da      	ldr	r2, [r3, #28]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	0a5b      	lsrs	r3, r3, #9
 800546a:	441a      	add	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	3320      	adds	r3, #32
 80054a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <dir_next+0x28>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054b2:	d301      	bcc.n	80054b8 <dir_next+0x2c>
 80054b4:	2304      	movs	r3, #4
 80054b6:	e0aa      	b.n	800560e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 8098 	bne.w	80055f4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10b      	bne.n	80054ee <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	8912      	ldrh	r2, [r2, #8]
 80054de:	4293      	cmp	r3, r2
 80054e0:	f0c0 8088 	bcc.w	80055f4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	61da      	str	r2, [r3, #28]
 80054ea:	2304      	movs	r3, #4
 80054ec:	e08f      	b.n	800560e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	0a5b      	lsrs	r3, r3, #9
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	8952      	ldrh	r2, [r2, #10]
 80054f6:	3a01      	subs	r2, #1
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d17a      	bne.n	80055f4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f7ff fc83 	bl	8004e12 <get_fat>
 800550c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d801      	bhi.n	8005518 <dir_next+0x8c>
 8005514:	2302      	movs	r3, #2
 8005516:	e07a      	b.n	800560e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800551e:	d101      	bne.n	8005524 <dir_next+0x98>
 8005520:	2301      	movs	r3, #1
 8005522:	e074      	b.n	800560e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	429a      	cmp	r2, r3
 800552c:	d358      	bcc.n	80055e0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	61da      	str	r2, [r3, #28]
 800553a:	2304      	movs	r3, #4
 800553c:	e067      	b.n	800560e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f7ff fe59 	bl	80051fe <create_chain>
 800554c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <dir_next+0xcc>
 8005554:	2307      	movs	r3, #7
 8005556:	e05a      	b.n	800560e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <dir_next+0xd6>
 800555e:	2302      	movs	r3, #2
 8005560:	e055      	b.n	800560e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005568:	d101      	bne.n	800556e <dir_next+0xe2>
 800556a:	2301      	movs	r3, #1
 800556c:	e04f      	b.n	800560e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7ff fb50 	bl	8004c14 <sync_window>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <dir_next+0xf2>
 800557a:	2301      	movs	r3, #1
 800557c:	e047      	b.n	800560e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3338      	adds	r3, #56	@ 0x38
 8005582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff f97a 	bl	8004882 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f7ff fc1d 	bl	8004dd4 <clust2sect>
 800559a:	4602      	mov	r2, r0
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	635a      	str	r2, [r3, #52]	@ 0x34
 80055a0:	e012      	b.n	80055c8 <dir_next+0x13c>
						fs->wflag = 1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2201      	movs	r2, #1
 80055a6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff fb33 	bl	8004c14 <sync_window>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <dir_next+0x12c>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e02a      	b.n	800560e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	3301      	adds	r3, #1
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	895b      	ldrh	r3, [r3, #10]
 80055cc:	461a      	mov	r2, r3
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d3e6      	bcc.n	80055a2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80055e6:	6979      	ldr	r1, [r7, #20]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff fbf3 	bl	8004dd4 <clust2sect>
 80055ee:	4602      	mov	r2, r0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005606:	441a      	add	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005626:	2100      	movs	r1, #0
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff feb4 	bl	8005396 <dir_sdi>
 800562e:	4603      	mov	r3, r0
 8005630:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d12b      	bne.n	8005690 <dir_alloc+0x7a>
		n = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	4619      	mov	r1, r3
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff fb2a 	bl	8004c9c <move_window>
 8005648:	4603      	mov	r3, r0
 800564a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800564c:	7dfb      	ldrb	r3, [r7, #23]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11d      	bne.n	800568e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2be5      	cmp	r3, #229	@ 0xe5
 800565a:	d004      	beq.n	8005666 <dir_alloc+0x50>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d107      	bne.n	8005676 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	3301      	adds	r3, #1
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d102      	bne.n	800567a <dir_alloc+0x64>
 8005674:	e00c      	b.n	8005690 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800567a:	2101      	movs	r1, #1
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff ff05 	bl	800548c <dir_next>
 8005682:	4603      	mov	r3, r0
 8005684:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0d7      	beq.n	800563c <dir_alloc+0x26>
 800568c:	e000      	b.n	8005690 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800568e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d101      	bne.n	800569a <dir_alloc+0x84>
 8005696:	2307      	movs	r3, #7
 8005698:	75fb      	strb	r3, [r7, #23]
	return res;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	331a      	adds	r3, #26
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff f842 	bl	800473c <ld_word>
 80056b8:	4603      	mov	r3, r0
 80056ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d109      	bne.n	80056d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	3314      	adds	r3, #20
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff f837 	bl	800473c <ld_word>
 80056ce:	4603      	mov	r3, r0
 80056d0:	041b      	lsls	r3, r3, #16
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	331a      	adds	r3, #26
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	b292      	uxth	r2, r2
 80056f6:	4611      	mov	r1, r2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff f85a 	bl	80047b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d109      	bne.n	800571a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f103 0214 	add.w	r2, r3, #20
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	b29b      	uxth	r3, r3
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f7ff f84c 	bl	80047b2 <st_word>
	}
}
 800571a:	bf00      	nop
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	331a      	adds	r3, #26
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff f802 	bl	800473c <ld_word>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <cmp_lfn+0x1e>
 800573e:	2300      	movs	r3, #0
 8005740:	e059      	b.n	80057f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	4613      	mov	r3, r2
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005758:	2301      	movs	r3, #1
 800575a:	81fb      	strh	r3, [r7, #14]
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	e033      	b.n	80057ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005762:	4a27      	ldr	r2, [pc, #156]	@ (8005800 <cmp_lfn+0xdc>)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	4413      	add	r3, r2
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe ffe3 	bl	800473c <ld_word>
 8005776:	4603      	mov	r3, r0
 8005778:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800577a:	89fb      	ldrh	r3, [r7, #14]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01a      	beq.n	80057b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2bfe      	cmp	r3, #254	@ 0xfe
 8005784:	d812      	bhi.n	80057ac <cmp_lfn+0x88>
 8005786:	89bb      	ldrh	r3, [r7, #12]
 8005788:	4618      	mov	r0, r3
 800578a:	f002 fac7 	bl	8007d1c <ff_wtoupper>
 800578e:	4603      	mov	r3, r0
 8005790:	461c      	mov	r4, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	617a      	str	r2, [r7, #20]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	4413      	add	r3, r2
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f002 fabb 	bl	8007d1c <ff_wtoupper>
 80057a6:	4603      	mov	r3, r0
 80057a8:	429c      	cmp	r4, r3
 80057aa:	d001      	beq.n	80057b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80057ac:	2300      	movs	r3, #0
 80057ae:	e022      	b.n	80057f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80057b0:	89bb      	ldrh	r3, [r7, #12]
 80057b2:	81fb      	strh	r3, [r7, #14]
 80057b4:	e006      	b.n	80057c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80057b6:	89bb      	ldrh	r3, [r7, #12]
 80057b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057bc:	4293      	cmp	r3, r2
 80057be:	d001      	beq.n	80057c4 <cmp_lfn+0xa0>
 80057c0:	2300      	movs	r3, #0
 80057c2:	e018      	b.n	80057f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	3301      	adds	r3, #1
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	d9c8      	bls.n	8005762 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00b      	beq.n	80057f4 <cmp_lfn+0xd0>
 80057dc:	89fb      	ldrh	r3, [r7, #14]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <cmp_lfn+0xd0>
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <cmp_lfn+0xd0>
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80057f4:	2301      	movs	r3, #1
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd90      	pop	{r4, r7, pc}
 80057fe:	bf00      	nop
 8005800:	080093b4 	.word	0x080093b4

08005804 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	331a      	adds	r3, #26
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe ff92 	bl	800473c <ld_word>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <pick_lfn+0x1e>
 800581e:	2300      	movs	r3, #0
 8005820:	e04d      	b.n	80058be <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800582a:	1e5a      	subs	r2, r3, #1
 800582c:	4613      	mov	r3, r2
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005838:	2301      	movs	r3, #1
 800583a:	81fb      	strh	r3, [r7, #14]
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	e028      	b.n	8005894 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005842:	4a21      	ldr	r2, [pc, #132]	@ (80058c8 <pick_lfn+0xc4>)
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	4413      	add	r3, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe ff73 	bl	800473c <ld_word>
 8005856:	4603      	mov	r3, r0
 8005858:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800585a:	89fb      	ldrh	r3, [r7, #14]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00f      	beq.n	8005880 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2bfe      	cmp	r3, #254	@ 0xfe
 8005864:	d901      	bls.n	800586a <pick_lfn+0x66>
 8005866:	2300      	movs	r3, #0
 8005868:	e029      	b.n	80058be <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800586a:	89bb      	ldrh	r3, [r7, #12]
 800586c:	81fb      	strh	r3, [r7, #14]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	617a      	str	r2, [r7, #20]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	4413      	add	r3, r2
 800587a:	89fa      	ldrh	r2, [r7, #14]
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	e006      	b.n	800588e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005880:	89bb      	ldrh	r3, [r7, #12]
 8005882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005886:	4293      	cmp	r3, r2
 8005888:	d001      	beq.n	800588e <pick_lfn+0x8a>
 800588a:	2300      	movs	r3, #0
 800588c:	e017      	b.n	80058be <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3301      	adds	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b0c      	cmp	r3, #12
 8005898:	d9d3      	bls.n	8005842 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80058aa:	d901      	bls.n	80058b0 <pick_lfn+0xac>
 80058ac:	2300      	movs	r3, #0
 80058ae:	e006      	b.n	80058be <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4413      	add	r3, r2
 80058b8:	2200      	movs	r2, #0
 80058ba:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80058bc:	2301      	movs	r3, #1
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	080093b4 	.word	0x080093b4

080058cc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4611      	mov	r1, r2
 80058d8:	461a      	mov	r2, r3
 80058da:	460b      	mov	r3, r1
 80058dc:	71fb      	strb	r3, [r7, #7]
 80058de:	4613      	mov	r3, r2
 80058e0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	330d      	adds	r3, #13
 80058e6:	79ba      	ldrb	r2, [r7, #6]
 80058e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	330b      	adds	r3, #11
 80058ee:	220f      	movs	r2, #15
 80058f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	330c      	adds	r3, #12
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	331a      	adds	r3, #26
 80058fe:	2100      	movs	r1, #0
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe ff56 	bl	80047b2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	1e5a      	subs	r2, r3, #1
 800590a:	4613      	mov	r3, r2
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	82fb      	strh	r3, [r7, #22]
 800591a:	2300      	movs	r3, #0
 800591c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800591e:	8afb      	ldrh	r3, [r7, #22]
 8005920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005924:	4293      	cmp	r3, r2
 8005926:	d007      	beq.n	8005938 <put_lfn+0x6c>
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	61fa      	str	r2, [r7, #28]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005938:	4a17      	ldr	r2, [pc, #92]	@ (8005998 <put_lfn+0xcc>)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4413      	add	r3, r2
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	4413      	add	r3, r2
 8005946:	8afa      	ldrh	r2, [r7, #22]
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe ff31 	bl	80047b2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005950:	8afb      	ldrh	r3, [r7, #22]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <put_lfn+0x90>
 8005956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800595a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	3301      	adds	r3, #1
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b0c      	cmp	r3, #12
 8005966:	d9da      	bls.n	800591e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005968:	8afb      	ldrh	r3, [r7, #22]
 800596a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800596e:	4293      	cmp	r3, r2
 8005970:	d006      	beq.n	8005980 <put_lfn+0xb4>
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d103      	bne.n	8005988 <put_lfn+0xbc>
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005986:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	79fa      	ldrb	r2, [r7, #7]
 800598c:	701a      	strb	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	080093b4 	.word	0x080093b4

0800599c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	@ 0x30
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80059aa:	220b      	movs	r2, #11
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7fe ff46 	bl	8004840 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b05      	cmp	r3, #5
 80059b8:	d92b      	bls.n	8005a12 <gen_numname+0x76>
		sr = seq;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80059be:	e022      	b.n	8005a06 <gen_numname+0x6a>
			wc = *lfn++;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	1c9a      	adds	r2, r3, #2
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80059ca:	2300      	movs	r3, #0
 80059cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ce:	e017      	b.n	8005a00 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	005a      	lsls	r2, r3, #1
 80059d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80059de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <gen_numname+0x5e>
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80059f4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80059f8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	3301      	adds	r3, #1
 80059fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	2b0f      	cmp	r3, #15
 8005a04:	d9e4      	bls.n	80059d0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1d8      	bne.n	80059c0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005a12:	2307      	movs	r3, #7
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	3330      	adds	r3, #48	@ 0x30
 8005a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a2a:	2b39      	cmp	r3, #57	@ 0x39
 8005a2c:	d904      	bls.n	8005a38 <gen_numname+0x9c>
 8005a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a32:	3307      	adds	r3, #7
 8005a34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3a:	1e5a      	subs	r2, r3, #1
 8005a3c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a3e:	3330      	adds	r3, #48	@ 0x30
 8005a40:	443b      	add	r3, r7
 8005a42:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005a46:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1df      	bne.n	8005a16 <gen_numname+0x7a>
	ns[i] = '~';
 8005a56:	f107 0214 	add.w	r2, r7, #20
 8005a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5c:	4413      	add	r3, r2
 8005a5e:	227e      	movs	r2, #126	@ 0x7e
 8005a60:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005a62:	2300      	movs	r3, #0
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a66:	e002      	b.n	8005a6e <gen_numname+0xd2>
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d205      	bcs.n	8005a82 <gen_numname+0xe6>
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	4413      	add	r3, r2
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d1f2      	bne.n	8005a68 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a84:	2b07      	cmp	r3, #7
 8005a86:	d807      	bhi.n	8005a98 <gen_numname+0xfc>
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a8e:	3330      	adds	r3, #48	@ 0x30
 8005a90:	443b      	add	r3, r7
 8005a92:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005a96:	e000      	b.n	8005a9a <gen_numname+0xfe>
 8005a98:	2120      	movs	r1, #32
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	460a      	mov	r2, r1
 8005aa6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	2b07      	cmp	r3, #7
 8005aac:	d9e9      	bls.n	8005a82 <gen_numname+0xe6>
}
 8005aae:	bf00      	nop
 8005ab0:	bf00      	nop
 8005ab2:	3730      	adds	r7, #48	@ 0x30
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005ac4:	230b      	movs	r3, #11
 8005ac6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	0852      	lsrs	r2, r2, #1
 8005ace:	01db      	lsls	r3, r3, #7
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	6079      	str	r1, [r7, #4]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	4413      	add	r3, r2
 8005ade:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1ed      	bne.n	8005ac8 <sum_sfn+0x10>
	return sum;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005b04:	2304      	movs	r3, #4
 8005b06:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8005b0e:	23ff      	movs	r3, #255	@ 0xff
 8005b10:	757b      	strb	r3, [r7, #21]
 8005b12:	23ff      	movs	r3, #255	@ 0xff
 8005b14:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8005b16:	e081      	b.n	8005c1c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6938      	ldr	r0, [r7, #16]
 8005b20:	f7ff f8bc 	bl	8004c9c <move_window>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d17c      	bne.n	8005c28 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8005b36:	7dbb      	ldrb	r3, [r7, #22]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	75fb      	strb	r3, [r7, #23]
 8005b40:	e077      	b.n	8005c32 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	330b      	adds	r3, #11
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	7bfa      	ldrb	r2, [r7, #15]
 8005b54:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005b56:	7dbb      	ldrb	r3, [r7, #22]
 8005b58:	2be5      	cmp	r3, #229	@ 0xe5
 8005b5a:	d00e      	beq.n	8005b7a <dir_read+0x80>
 8005b5c:	7dbb      	ldrb	r3, [r7, #22]
 8005b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b60:	d00b      	beq.n	8005b7a <dir_read+0x80>
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	f023 0320 	bic.w	r3, r3, #32
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d002      	beq.n	8005b80 <dir_read+0x86>
				ord = 0xFF;
 8005b7a:	23ff      	movs	r3, #255	@ 0xff
 8005b7c:	757b      	strb	r3, [r7, #21]
 8005b7e:	e044      	b.n	8005c0a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b0f      	cmp	r3, #15
 8005b84:	d12f      	bne.n	8005be6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005b86:	7dbb      	ldrb	r3, [r7, #22]
 8005b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00d      	beq.n	8005bac <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	7b5b      	ldrb	r3, [r3, #13]
 8005b96:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8005b98:	7dbb      	ldrb	r3, [r7, #22]
 8005b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b9e:	75bb      	strb	r3, [r7, #22]
 8005ba0:	7dbb      	ldrb	r3, [r7, #22]
 8005ba2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005bac:	7dba      	ldrb	r2, [r7, #22]
 8005bae:	7d7b      	ldrb	r3, [r7, #21]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d115      	bne.n	8005be0 <dir_read+0xe6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	330d      	adds	r3, #13
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	7d3a      	ldrb	r2, [r7, #20]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d10e      	bne.n	8005be0 <dir_read+0xe6>
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f7ff fe19 	bl	8005804 <pick_lfn>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <dir_read+0xe6>
 8005bd8:	7d7b      	ldrb	r3, [r7, #21]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	e000      	b.n	8005be2 <dir_read+0xe8>
 8005be0:	23ff      	movs	r3, #255	@ 0xff
 8005be2:	757b      	strb	r3, [r7, #21]
 8005be4:	e011      	b.n	8005c0a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005be6:	7d7b      	ldrb	r3, [r7, #21]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d109      	bne.n	8005c00 <dir_read+0x106>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff61 	bl	8005ab8 <sum_sfn>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	7d3b      	ldrb	r3, [r7, #20]
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d015      	beq.n	8005c2c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8005c08:	e010      	b.n	8005c2c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff fc3d 	bl	800548c <dir_next>
 8005c12:	4603      	mov	r3, r0
 8005c14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <dir_read+0x136>
	while (dp->sect) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f47f af79 	bne.w	8005b18 <dir_read+0x1e>
 8005c26:	e004      	b.n	8005c32 <dir_read+0x138>
		if (res != FR_OK) break;
 8005c28:	bf00      	nop
 8005c2a:	e002      	b.n	8005c32 <dir_read+0x138>
					break;
 8005c2c:	bf00      	nop
 8005c2e:	e000      	b.n	8005c32 <dir_read+0x138>
		if (res != FR_OK) break;
 8005c30:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <dir_read+0x144>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	61da      	str	r2, [r3, #28]
	return res;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c56:	2100      	movs	r1, #0
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fb9c 	bl	8005396 <dir_sdi>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <dir_find+0x24>
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	e0a9      	b.n	8005dc0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c6c:	23ff      	movs	r3, #255	@ 0xff
 8005c6e:	753b      	strb	r3, [r7, #20]
 8005c70:	7d3b      	ldrb	r3, [r7, #20]
 8005c72:	757b      	strb	r3, [r7, #21]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c7a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	4619      	mov	r1, r3
 8005c82:	6938      	ldr	r0, [r7, #16]
 8005c84:	f7ff f80a 	bl	8004c9c <move_window>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f040 8090 	bne.w	8005db4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005c9c:	7dbb      	ldrb	r3, [r7, #22]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <dir_find+0x60>
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	75fb      	strb	r3, [r7, #23]
 8005ca6:	e08a      	b.n	8005dbe <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	330b      	adds	r3, #11
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cb4:	73fb      	strb	r3, [r7, #15]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	7bfa      	ldrb	r2, [r7, #15]
 8005cba:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005cbc:	7dbb      	ldrb	r3, [r7, #22]
 8005cbe:	2be5      	cmp	r3, #229	@ 0xe5
 8005cc0:	d007      	beq.n	8005cd2 <dir_find+0x8a>
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <dir_find+0x98>
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b0f      	cmp	r3, #15
 8005cd0:	d006      	beq.n	8005ce0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005cd2:	23ff      	movs	r3, #255	@ 0xff
 8005cd4:	757b      	strb	r3, [r7, #21]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cde:	e05e      	b.n	8005d9e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	2b0f      	cmp	r3, #15
 8005ce4:	d136      	bne.n	8005d54 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d154      	bne.n	8005d9e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005cf4:	7dbb      	ldrb	r3, [r7, #22]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	7b5b      	ldrb	r3, [r3, #13]
 8005d04:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005d06:	7dbb      	ldrb	r3, [r7, #22]
 8005d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d0c:	75bb      	strb	r3, [r7, #22]
 8005d0e:	7dbb      	ldrb	r3, [r7, #22]
 8005d10:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005d1a:	7dba      	ldrb	r2, [r7, #22]
 8005d1c:	7d7b      	ldrb	r3, [r7, #21]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d115      	bne.n	8005d4e <dir_find+0x106>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	330d      	adds	r3, #13
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	7d3a      	ldrb	r2, [r7, #20]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d10e      	bne.n	8005d4e <dir_find+0x106>
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f7ff fcf2 	bl	8005724 <cmp_lfn>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <dir_find+0x106>
 8005d46:	7d7b      	ldrb	r3, [r7, #21]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	e000      	b.n	8005d50 <dir_find+0x108>
 8005d4e:	23ff      	movs	r3, #255	@ 0xff
 8005d50:	757b      	strb	r3, [r7, #21]
 8005d52:	e024      	b.n	8005d9e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005d54:	7d7b      	ldrb	r3, [r7, #21]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <dir_find+0x126>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff feaa 	bl	8005ab8 <sum_sfn>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	7d3b      	ldrb	r3, [r7, #20]
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d024      	beq.n	8005db8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <dir_find+0x14a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a18      	ldr	r0, [r3, #32]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3324      	adds	r3, #36	@ 0x24
 8005d84:	220b      	movs	r2, #11
 8005d86:	4619      	mov	r1, r3
 8005d88:	f7fe fd96 	bl	80048b8 <mem_cmp>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d014      	beq.n	8005dbc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005d92:	23ff      	movs	r3, #255	@ 0xff
 8005d94:	757b      	strb	r3, [r7, #21]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d9c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005d9e:	2100      	movs	r1, #0
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff fb73 	bl	800548c <dir_next>
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f43f af65 	beq.w	8005c7c <dir_find+0x34>
 8005db2:	e004      	b.n	8005dbe <dir_find+0x176>
		if (res != FR_OK) break;
 8005db4:	bf00      	nop
 8005db6:	e002      	b.n	8005dbe <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005db8:	bf00      	nop
 8005dba:	e000      	b.n	8005dbe <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005dbc:	bf00      	nop

	return res;
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	@ 0x30
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ddc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <dir_register+0x20>
 8005de4:	2306      	movs	r3, #6
 8005de6:	e0e0      	b.n	8005faa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005de8:	2300      	movs	r3, #0
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dec:	e002      	b.n	8005df4 <dir_register+0x2c>
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	3301      	adds	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	4413      	add	r3, r2
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f4      	bne.n	8005dee <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005e0a:	f107 030c 	add.w	r3, r7, #12
 8005e0e:	220c      	movs	r2, #12
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe fd15 	bl	8004840 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d032      	beq.n	8005e86 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2240      	movs	r2, #64	@ 0x40
 8005e24:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005e28:	2301      	movs	r3, #1
 8005e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e2c:	e016      	b.n	8005e5c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	f107 010c 	add.w	r1, r7, #12
 8005e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3e:	f7ff fdad 	bl	800599c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff ff00 	bl	8005c48 <dir_find>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	3301      	adds	r3, #1
 8005e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	2b63      	cmp	r3, #99	@ 0x63
 8005e60:	d9e5      	bls.n	8005e2e <dir_register+0x66>
 8005e62:	e000      	b.n	8005e66 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005e64:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	2b64      	cmp	r3, #100	@ 0x64
 8005e6a:	d101      	bne.n	8005e70 <dir_register+0xa8>
 8005e6c:	2307      	movs	r3, #7
 8005e6e:	e09c      	b.n	8005faa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005e70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d002      	beq.n	8005e7e <dir_register+0xb6>
 8005e78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e7c:	e095      	b.n	8005faa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005e7e:	7dfa      	ldrb	r2, [r7, #23]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <dir_register+0xd8>
 8005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e92:	330c      	adds	r3, #12
 8005e94:	4a47      	ldr	r2, [pc, #284]	@ (8005fb4 <dir_register+0x1ec>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	089b      	lsrs	r3, r3, #2
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <dir_register+0xda>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005ea4:	6a39      	ldr	r1, [r7, #32]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fbb5 	bl	8005616 <dir_alloc>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d148      	bne.n	8005f4c <dir_register+0x184>
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	623b      	str	r3, [r7, #32]
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d042      	beq.n	8005f4c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	015b      	lsls	r3, r3, #5
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff fa5f 	bl	8005396 <dir_sdi>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005ede:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d132      	bne.n	8005f4c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3324      	adds	r3, #36	@ 0x24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fde4 	bl	8005ab8 <sum_sfn>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	69f8      	ldr	r0, [r7, #28]
 8005efc:	f7fe fece 	bl	8004c9c <move_window>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005f06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d11d      	bne.n	8005f4a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	68d8      	ldr	r0, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a19      	ldr	r1, [r3, #32]
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	7efb      	ldrb	r3, [r7, #27]
 8005f1c:	f7ff fcd6 	bl	80058cc <put_lfn>
				fs->wflag = 1;
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2201      	movs	r2, #1
 8005f24:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005f26:	2100      	movs	r1, #0
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff faaf 	bl	800548c <dir_next>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005f34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d107      	bne.n	8005f4c <dir_register+0x184>
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	623b      	str	r3, [r7, #32]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1d5      	bne.n	8005ef4 <dir_register+0x12c>
 8005f48:	e000      	b.n	8005f4c <dir_register+0x184>
				if (res != FR_OK) break;
 8005f4a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d128      	bne.n	8005fa6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	69f8      	ldr	r0, [r7, #28]
 8005f5c:	f7fe fe9e 	bl	8004c9c <move_window>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005f66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d11b      	bne.n	8005fa6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	2220      	movs	r2, #32
 8005f74:	2100      	movs	r1, #0
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fc83 	bl	8004882 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a18      	ldr	r0, [r3, #32]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3324      	adds	r3, #36	@ 0x24
 8005f84:	220b      	movs	r2, #11
 8005f86:	4619      	mov	r1, r3
 8005f88:	f7fe fc5a 	bl	8004840 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	330c      	adds	r3, #12
 8005f98:	f002 0218 	and.w	r2, r2, #24
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3730      	adds	r7, #48	@ 0x30
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	4ec4ec4f 	.word	0x4ec4ec4f

08005fb8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 80ca 	beq.w	800616c <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fe0:	d032      	beq.n	8006048 <get_fileinfo+0x90>
			i = j = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8005fea:	e01b      	b.n	8006024 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8005fec:	89fb      	ldrh	r3, [r7, #14]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fe57 	bl	8007ca4 <ff_convert>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8005ffa:	89fb      	ldrh	r3, [r7, #14]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d102      	bne.n	8006006 <get_fileinfo+0x4e>
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
 8006004:	e01a      	b.n	800603c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2bfe      	cmp	r3, #254	@ 0xfe
 800600a:	d902      	bls.n	8006012 <get_fileinfo+0x5a>
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	e014      	b.n	800603c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	61fa      	str	r2, [r7, #28]
 8006018:	89fa      	ldrh	r2, [r7, #14]
 800601a:	b2d1      	uxtb	r1, r2
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	4413      	add	r3, r2
 8006020:	460a      	mov	r2, r1
 8006022:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	1c59      	adds	r1, r3, #1
 800602c:	61b9      	str	r1, [r7, #24]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	81fb      	strh	r3, [r7, #14]
 8006036:	89fb      	ldrh	r3, [r7, #14]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1d7      	bne.n	8005fec <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	3316      	adds	r3, #22
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	3316      	adds	r3, #22
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800605c:	e04d      	b.n	80060fa <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1a      	ldr	r2, [r3, #32]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	1c59      	adds	r1, r3, #1
 8006066:	61f9      	str	r1, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800606e:	7dfb      	ldrb	r3, [r7, #23]
 8006070:	2b20      	cmp	r3, #32
 8006072:	d041      	beq.n	80060f8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	2b05      	cmp	r3, #5
 8006078:	d101      	bne.n	800607e <get_fileinfo+0xc6>
 800607a:	23e5      	movs	r3, #229	@ 0xe5
 800607c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2b09      	cmp	r3, #9
 8006082:	d10f      	bne.n	80060a4 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8006084:	89bb      	ldrh	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d105      	bne.n	8006096 <get_fileinfo+0xde>
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	4413      	add	r3, r2
 8006090:	3316      	adds	r3, #22
 8006092:	222e      	movs	r2, #46	@ 0x2e
 8006094:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	61ba      	str	r2, [r7, #24]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	4413      	add	r3, r2
 80060a0:	222e      	movs	r2, #46	@ 0x2e
 80060a2:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	4413      	add	r3, r2
 80060aa:	3309      	adds	r3, #9
 80060ac:	7dfa      	ldrb	r2, [r7, #23]
 80060ae:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80060b0:	89bb      	ldrh	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d11c      	bne.n	80060f0 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	2b40      	cmp	r3, #64	@ 0x40
 80060ba:	d913      	bls.n	80060e4 <get_fileinfo+0x12c>
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	2b5a      	cmp	r3, #90	@ 0x5a
 80060c0:	d810      	bhi.n	80060e4 <get_fileinfo+0x12c>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	330c      	adds	r3, #12
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d901      	bls.n	80060d6 <get_fileinfo+0x11e>
 80060d2:	2310      	movs	r3, #16
 80060d4:	e000      	b.n	80060d8 <get_fileinfo+0x120>
 80060d6:	2308      	movs	r3, #8
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 80060de:	7dfb      	ldrb	r3, [r7, #23]
 80060e0:	3320      	adds	r3, #32
 80060e2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	4413      	add	r3, r2
 80060ea:	3316      	adds	r3, #22
 80060ec:	7dfa      	ldrb	r2, [r7, #23]
 80060ee:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	3301      	adds	r3, #1
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	e000      	b.n	80060fa <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 80060f8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b0a      	cmp	r3, #10
 80060fe:	d9ae      	bls.n	800605e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006100:	89bb      	ldrh	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10d      	bne.n	8006122 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	4413      	add	r3, r2
 800610c:	3316      	adds	r3, #22
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	330c      	adds	r3, #12
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <get_fileinfo+0x16a>
 800611e:	2300      	movs	r3, #0
 8006120:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	4413      	add	r3, r2
 8006128:	3309      	adds	r3, #9
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	7ada      	ldrb	r2, [r3, #11]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	331c      	adds	r3, #28
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe fb14 	bl	800476c <ld_dword>
 8006144:	4602      	mov	r2, r0
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	3316      	adds	r3, #22
 8006150:	4618      	mov	r0, r3
 8006152:	f7fe fb0b 	bl	800476c <ld_dword>
 8006156:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	b29a      	uxth	r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	80da      	strh	r2, [r3, #6]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	0c1b      	lsrs	r3, r3, #16
 8006164:	b29a      	uxth	r2, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	809a      	strh	r2, [r3, #4]
 800616a:	e000      	b.n	800616e <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800616c:	bf00      	nop
}
 800616e:	3720      	adds	r7, #32
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	@ 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	61ba      	str	r2, [r7, #24]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4413      	add	r3, r2
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80061a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061a4:	2b1f      	cmp	r3, #31
 80061a6:	d940      	bls.n	800622a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80061a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80061ac:	d006      	beq.n	80061bc <create_name+0x48>
 80061ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80061b2:	d110      	bne.n	80061d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80061b4:	e002      	b.n	80061bc <create_name+0x48>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	4413      	add	r3, r2
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80061c6:	d0f6      	beq.n	80061b6 <create_name+0x42>
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	4413      	add	r3, r2
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80061d2:	d0f0      	beq.n	80061b6 <create_name+0x42>
			break;
 80061d4:	e02a      	b.n	800622c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80061da:	d901      	bls.n	80061e0 <create_name+0x6c>
 80061dc:	2306      	movs	r3, #6
 80061de:	e1ca      	b.n	8006576 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 80061e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80061e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061e8:	2101      	movs	r1, #1
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 fd5a 	bl	8007ca4 <ff_convert>
 80061f0:	4603      	mov	r3, r0
 80061f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80061f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <create_name+0x8a>
 80061fa:	2306      	movs	r3, #6
 80061fc:	e1bb      	b.n	8006576 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80061fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006200:	2b7f      	cmp	r3, #127	@ 0x7f
 8006202:	d809      	bhi.n	8006218 <create_name+0xa4>
 8006204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006206:	4619      	mov	r1, r3
 8006208:	489f      	ldr	r0, [pc, #636]	@ (8006488 <create_name+0x314>)
 800620a:	f7fe fb7c 	bl	8004906 <chk_chr>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <create_name+0xa4>
 8006214:	2306      	movs	r3, #6
 8006216:	e1ae      	b.n	8006576 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	617a      	str	r2, [r7, #20]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006226:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006228:	e7b4      	b.n	8006194 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800622a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	441a      	add	r2, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006236:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006238:	2b1f      	cmp	r3, #31
 800623a:	d801      	bhi.n	8006240 <create_name+0xcc>
 800623c:	2304      	movs	r3, #4
 800623e:	e000      	b.n	8006242 <create_name+0xce>
 8006240:	2300      	movs	r3, #0
 8006242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d109      	bne.n	8006260 <create_name+0xec>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006252:	3b01      	subs	r3, #1
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4413      	add	r3, r2
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	2b2e      	cmp	r3, #46	@ 0x2e
 800625e:	d016      	beq.n	800628e <create_name+0x11a>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d14e      	bne.n	8006304 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800626c:	3b01      	subs	r3, #1
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	2b2e      	cmp	r3, #46	@ 0x2e
 8006278:	d144      	bne.n	8006304 <create_name+0x190>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006280:	3b02      	subs	r3, #2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	2b2e      	cmp	r3, #46	@ 0x2e
 800628c:	d13a      	bne.n	8006304 <create_name+0x190>
		lfn[di] = 0;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	2200      	movs	r2, #0
 8006298:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	e00f      	b.n	80062c0 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 80062a0:	6a3a      	ldr	r2, [r7, #32]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d201      	bcs.n	80062ac <create_name+0x138>
 80062a8:	212e      	movs	r1, #46	@ 0x2e
 80062aa:	e000      	b.n	80062ae <create_name+0x13a>
 80062ac:	2120      	movs	r1, #32
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	4413      	add	r3, r2
 80062b4:	3324      	adds	r3, #36	@ 0x24
 80062b6:	460a      	mov	r2, r1
 80062b8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	3301      	adds	r3, #1
 80062be:	623b      	str	r3, [r7, #32]
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b0a      	cmp	r3, #10
 80062c4:	d9ec      	bls.n	80062a0 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 80062c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062ca:	f043 0320 	orr.w	r3, r3, #32
 80062ce:	b2d9      	uxtb	r1, r3
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	4413      	add	r3, r2
 80062d6:	3324      	adds	r3, #36	@ 0x24
 80062d8:	460a      	mov	r2, r1
 80062da:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	e14a      	b.n	8006576 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80062e6:	3b01      	subs	r3, #1
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80062f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d002      	beq.n	80062fe <create_name+0x18a>
 80062f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80062fc:	d106      	bne.n	800630c <create_name+0x198>
		di--;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	3b01      	subs	r3, #1
 8006302:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1ea      	bne.n	80062e0 <create_name+0x16c>
 800630a:	e000      	b.n	800630e <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800630c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	2200      	movs	r2, #0
 8006318:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <create_name+0x1b0>
 8006320:	2306      	movs	r3, #6
 8006322:	e128      	b.n	8006576 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3324      	adds	r3, #36	@ 0x24
 8006328:	220b      	movs	r2, #11
 800632a:	2120      	movs	r1, #32
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe faa8 	bl	8004882 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006332:	2300      	movs	r3, #0
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	e002      	b.n	800633e <create_name+0x1ca>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	3301      	adds	r3, #1
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	2b20      	cmp	r3, #32
 800634a:	d0f5      	beq.n	8006338 <create_name+0x1c4>
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	2b2e      	cmp	r3, #46	@ 0x2e
 8006358:	d0ee      	beq.n	8006338 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <create_name+0x200>
 8006360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006364:	f043 0303 	orr.w	r3, r3, #3
 8006368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800636c:	e002      	b.n	8006374 <create_name+0x200>
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	3b01      	subs	r3, #1
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <create_name+0x21a>
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006380:	3b01      	subs	r3, #1
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	2b2e      	cmp	r3, #46	@ 0x2e
 800638c:	d1ef      	bne.n	800636e <create_name+0x1fa>

	i = b = 0; ni = 8;
 800638e:	2300      	movs	r3, #0
 8006390:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006394:	2300      	movs	r3, #0
 8006396:	623b      	str	r3, [r7, #32]
 8006398:	2308      	movs	r3, #8
 800639a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	61ba      	str	r2, [r7, #24]
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80063ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8097 	beq.w	80064e2 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80063b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d006      	beq.n	80063c8 <create_name+0x254>
 80063ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80063be:	d10a      	bne.n	80063d6 <create_name+0x262>
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d006      	beq.n	80063d6 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 80063c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063cc:	f043 0303 	orr.w	r3, r3, #3
 80063d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063d4:	e084      	b.n	80064e0 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80063d6:	6a3a      	ldr	r2, [r7, #32]
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d203      	bcs.n	80063e6 <create_name+0x272>
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d123      	bne.n	800642e <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2b0b      	cmp	r3, #11
 80063ea:	d106      	bne.n	80063fa <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 80063ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063f0:	f043 0303 	orr.w	r3, r3, #3
 80063f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063f8:	e076      	b.n	80064e8 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d005      	beq.n	800640e <create_name+0x29a>
 8006402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006406:	f043 0303 	orr.w	r3, r3, #3
 800640a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	429a      	cmp	r2, r3
 8006414:	d867      	bhi.n	80064e6 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	2308      	movs	r3, #8
 800641c:	623b      	str	r3, [r7, #32]
 800641e:	230b      	movs	r3, #11
 8006420:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006422:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800642c:	e058      	b.n	80064e0 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800642e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006430:	2b7f      	cmp	r3, #127	@ 0x7f
 8006432:	d914      	bls.n	800645e <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006434:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f001 fc33 	bl	8007ca4 <ff_convert>
 800643e:	4603      	mov	r3, r0
 8006440:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <create_name+0x2de>
 8006448:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800644a:	3b80      	subs	r3, #128	@ 0x80
 800644c:	4a0f      	ldr	r2, [pc, #60]	@ (800648c <create_name+0x318>)
 800644e:	5cd3      	ldrb	r3, [r2, r3]
 8006450:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006456:	f043 0302 	orr.w	r3, r3, #2
 800645a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800645e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <create_name+0x300>
 8006464:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006466:	4619      	mov	r1, r3
 8006468:	4809      	ldr	r0, [pc, #36]	@ (8006490 <create_name+0x31c>)
 800646a:	f7fe fa4c 	bl	8004906 <chk_chr>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00f      	beq.n	8006494 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006474:	235f      	movs	r3, #95	@ 0x5f
 8006476:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800647c:	f043 0303 	orr.w	r3, r3, #3
 8006480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006484:	e022      	b.n	80064cc <create_name+0x358>
 8006486:	bf00      	nop
 8006488:	080092d4 	.word	0x080092d4
 800648c:	08009334 	.word	0x08009334
 8006490:	080092e0 	.word	0x080092e0
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006494:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006496:	2b40      	cmp	r3, #64	@ 0x40
 8006498:	d909      	bls.n	80064ae <create_name+0x33a>
 800649a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800649c:	2b5a      	cmp	r3, #90	@ 0x5a
 800649e:	d806      	bhi.n	80064ae <create_name+0x33a>
					b |= 2;
 80064a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064a4:	f043 0302 	orr.w	r3, r3, #2
 80064a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80064ac:	e00e      	b.n	80064cc <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80064ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064b0:	2b60      	cmp	r3, #96	@ 0x60
 80064b2:	d90b      	bls.n	80064cc <create_name+0x358>
 80064b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064b6:	2b7a      	cmp	r3, #122	@ 0x7a
 80064b8:	d808      	bhi.n	80064cc <create_name+0x358>
						b |= 1; w -= 0x20;
 80064ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80064c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064c8:	3b20      	subs	r3, #32
 80064ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	623a      	str	r2, [r7, #32]
 80064d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80064d4:	b2d1      	uxtb	r1, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	4413      	add	r3, r2
 80064da:	460a      	mov	r2, r1
 80064dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80064e0:	e75c      	b.n	800639c <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 80064e2:	bf00      	nop
 80064e4:	e000      	b.n	80064e8 <create_name+0x374>
			if (si > di) break;			/* No extension */
 80064e6:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064ee:	2be5      	cmp	r3, #229	@ 0xe5
 80064f0:	d103      	bne.n	80064fa <create_name+0x386>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2205      	movs	r2, #5
 80064f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d104      	bne.n	800650a <create_name+0x396>
 8006500:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800650a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800650e:	f003 030c 	and.w	r3, r3, #12
 8006512:	2b0c      	cmp	r3, #12
 8006514:	d005      	beq.n	8006522 <create_name+0x3ae>
 8006516:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	2b03      	cmp	r3, #3
 8006520:	d105      	bne.n	800652e <create_name+0x3ba>
 8006522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006526:	f043 0302 	orr.w	r3, r3, #2
 800652a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800652e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d117      	bne.n	800656a <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800653a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b01      	cmp	r3, #1
 8006544:	d105      	bne.n	8006552 <create_name+0x3de>
 8006546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800654a:	f043 0310 	orr.w	r3, r3, #16
 800654e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006552:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b04      	cmp	r3, #4
 800655c:	d105      	bne.n	800656a <create_name+0x3f6>
 800655e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006562:	f043 0308 	orr.w	r3, r3, #8
 8006566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006570:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8006574:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006576:	4618      	mov	r0, r3
 8006578:	3728      	adds	r7, #40	@ 0x28
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop

08006580 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b2f      	cmp	r3, #47	@ 0x2f
 800659a:	d00b      	beq.n	80065b4 <follow_path+0x34>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80065a2:	d007      	beq.n	80065b4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	699a      	ldr	r2, [r3, #24]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	609a      	str	r2, [r3, #8]
 80065ac:	e00d      	b.n	80065ca <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	3301      	adds	r3, #1
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80065ba:	d0f8      	beq.n	80065ae <follow_path+0x2e>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80065c2:	d0f4      	beq.n	80065ae <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b1f      	cmp	r3, #31
 80065d0:	d80a      	bhi.n	80065e8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2280      	movs	r2, #128	@ 0x80
 80065d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80065da:	2100      	movs	r1, #0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fe feda 	bl	8005396 <dir_sdi>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]
 80065e6:	e056      	b.n	8006696 <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065e8:	463b      	mov	r3, r7
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fdc1 	bl	8006174 <create_name>
 80065f2:	4603      	mov	r3, r0
 80065f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d147      	bne.n	800668c <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fb23 	bl	8005c48 <dir_find>
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800660c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01b      	beq.n	800664c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b04      	cmp	r3, #4
 8006618:	d13a      	bne.n	8006690 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d02c      	beq.n	8006688 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2280      	movs	r2, #128	@ 0x80
 8006632:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800663a:	e029      	b.n	8006690 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d124      	bne.n	8006690 <follow_path+0x110>
 8006646:	2305      	movs	r3, #5
 8006648:	75fb      	strb	r3, [r7, #23]
				break;
 800664a:	e021      	b.n	8006690 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	d11e      	bne.n	8006694 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	799b      	ldrb	r3, [r3, #6]
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8006662:	2305      	movs	r3, #5
 8006664:	75fb      	strb	r3, [r7, #23]
 8006666:	e016      	b.n	8006696 <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006676:	4413      	add	r3, r2
 8006678:	4619      	mov	r1, r3
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff f812 	bl	80056a4 <ld_clust>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	609a      	str	r2, [r3, #8]
 8006686:	e7af      	b.n	80065e8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8006688:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800668a:	e7ad      	b.n	80065e8 <follow_path+0x68>
			if (res != FR_OK) break;
 800668c:	bf00      	nop
 800668e:	e002      	b.n	8006696 <follow_path+0x116>
				break;
 8006690:	bf00      	nop
 8006692:	e000      	b.n	8006696 <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006694:	bf00      	nop
			}
		}
	}

	return res;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066ac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d031      	beq.n	800671a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e002      	b.n	80066c4 <get_ldnumber+0x24>
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	3301      	adds	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b1f      	cmp	r3, #31
 80066ca:	d903      	bls.n	80066d4 <get_ldnumber+0x34>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80066d2:	d1f4      	bne.n	80066be <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80066da:	d11c      	bne.n	8006716 <get_ldnumber+0x76>
			tp = *path;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	60fa      	str	r2, [r7, #12]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	3b30      	subs	r3, #48	@ 0x30
 80066ec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b09      	cmp	r3, #9
 80066f2:	d80e      	bhi.n	8006712 <get_ldnumber+0x72>
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d10a      	bne.n	8006712 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d107      	bne.n	8006712 <get_ldnumber+0x72>
					vol = (int)i;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	3301      	adds	r3, #1
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	e002      	b.n	800671c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800671a:	693b      	ldr	r3, [r7, #16]
}
 800671c:	4618      	mov	r0, r3
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	70da      	strb	r2, [r3, #3]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800673e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fe faaa 	bl	8004c9c <move_window>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <check_fs+0x2a>
 800674e:	2304      	movs	r3, #4
 8006750:	e038      	b.n	80067c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3338      	adds	r3, #56	@ 0x38
 8006756:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800675a:	4618      	mov	r0, r3
 800675c:	f7fd ffee 	bl	800473c <ld_word>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006768:	429a      	cmp	r2, r3
 800676a:	d001      	beq.n	8006770 <check_fs+0x48>
 800676c:	2303      	movs	r3, #3
 800676e:	e029      	b.n	80067c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006776:	2be9      	cmp	r3, #233	@ 0xe9
 8006778:	d009      	beq.n	800678e <check_fs+0x66>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006780:	2beb      	cmp	r3, #235	@ 0xeb
 8006782:	d11e      	bne.n	80067c2 <check_fs+0x9a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800678a:	2b90      	cmp	r3, #144	@ 0x90
 800678c:	d119      	bne.n	80067c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3338      	adds	r3, #56	@ 0x38
 8006792:	3336      	adds	r3, #54	@ 0x36
 8006794:	4618      	mov	r0, r3
 8006796:	f7fd ffe9 	bl	800476c <ld_dword>
 800679a:	4603      	mov	r3, r0
 800679c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80067a0:	4a0a      	ldr	r2, [pc, #40]	@ (80067cc <check_fs+0xa4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d101      	bne.n	80067aa <check_fs+0x82>
 80067a6:	2300      	movs	r3, #0
 80067a8:	e00c      	b.n	80067c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3338      	adds	r3, #56	@ 0x38
 80067ae:	3352      	adds	r3, #82	@ 0x52
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fd ffdb 	bl	800476c <ld_dword>
 80067b6:	4603      	mov	r3, r0
 80067b8:	4a05      	ldr	r2, [pc, #20]	@ (80067d0 <check_fs+0xa8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d101      	bne.n	80067c2 <check_fs+0x9a>
 80067be:	2300      	movs	r3, #0
 80067c0:	e000      	b.n	80067c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80067c2:	2302      	movs	r3, #2
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	00544146 	.word	0x00544146
 80067d0:	33544146 	.word	0x33544146

080067d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b096      	sub	sp, #88	@ 0x58
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff ff59 	bl	80066a0 <get_ldnumber>
 80067ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80067f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da01      	bge.n	80067fa <find_volume+0x26>
 80067f6:	230b      	movs	r3, #11
 80067f8:	e233      	b.n	8006c62 <find_volume+0x48e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80067fa:	4aa1      	ldr	r2, [pc, #644]	@ (8006a80 <find_volume+0x2ac>)
 80067fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006802:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <find_volume+0x3a>
 800680a:	230c      	movs	r3, #12
 800680c:	e229      	b.n	8006c62 <find_volume+0x48e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006812:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006814:	79fb      	ldrb	r3, [r7, #7]
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01a      	beq.n	800685a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	4618      	mov	r0, r3
 800682a:	f7fd fee7 	bl	80045fc <disk_status>
 800682e:	4603      	mov	r3, r0
 8006830:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006834:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10c      	bne.n	800685a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <find_volume+0x82>
 8006846:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006852:	230a      	movs	r3, #10
 8006854:	e205      	b.n	8006c62 <find_volume+0x48e>
			}
			return FR_OK;				/* The file system object is valid */
 8006856:	2300      	movs	r3, #0
 8006858:	e203      	b.n	8006c62 <find_volume+0x48e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800685a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685c:	2200      	movs	r2, #0
 800685e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006862:	b2da      	uxtb	r2, r3
 8006864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006866:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd fedf 	bl	8004630 <disk_initialize>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006878:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006884:	2303      	movs	r3, #3
 8006886:	e1ec      	b.n	8006c62 <find_volume+0x48e>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <find_volume+0xca>
 800688e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800689a:	230a      	movs	r3, #10
 800689c:	e1e1      	b.n	8006c62 <find_volume+0x48e>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80068a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80068a6:	f7ff ff3f 	bl	8006728 <check_fs>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80068b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d149      	bne.n	800694c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80068b8:	2300      	movs	r3, #0
 80068ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80068bc:	e01e      	b.n	80068fc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80068be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80068c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80068cc:	4413      	add	r3, r2
 80068ce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	3304      	adds	r3, #4
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d006      	beq.n	80068e8 <find_volume+0x114>
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	3308      	adds	r3, #8
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fd ff44 	bl	800476c <ld_dword>
 80068e4:	4602      	mov	r2, r0
 80068e6:	e000      	b.n	80068ea <find_volume+0x116>
 80068e8:	2200      	movs	r2, #0
 80068ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	3358      	adds	r3, #88	@ 0x58
 80068f0:	443b      	add	r3, r7
 80068f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80068f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068f8:	3301      	adds	r3, #1
 80068fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80068fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d9dd      	bls.n	80068be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006902:	2300      	movs	r3, #0
 8006904:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <find_volume+0x13e>
 800690c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800690e:	3b01      	subs	r3, #1
 8006910:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	3358      	adds	r3, #88	@ 0x58
 8006918:	443b      	add	r3, r7
 800691a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800691e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <find_volume+0x15e>
 8006926:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006928:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800692a:	f7ff fefd 	bl	8006728 <check_fs>
 800692e:	4603      	mov	r3, r0
 8006930:	e000      	b.n	8006934 <find_volume+0x160>
 8006932:	2303      	movs	r3, #3
 8006934:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006938:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800693c:	2b01      	cmp	r3, #1
 800693e:	d905      	bls.n	800694c <find_volume+0x178>
 8006940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006942:	3301      	adds	r3, #1
 8006944:	643b      	str	r3, [r7, #64]	@ 0x40
 8006946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006948:	2b03      	cmp	r3, #3
 800694a:	d9e2      	bls.n	8006912 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800694c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006950:	2b04      	cmp	r3, #4
 8006952:	d101      	bne.n	8006958 <find_volume+0x184>
 8006954:	2301      	movs	r3, #1
 8006956:	e184      	b.n	8006c62 <find_volume+0x48e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006958:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800695c:	2b01      	cmp	r3, #1
 800695e:	d901      	bls.n	8006964 <find_volume+0x190>
 8006960:	230d      	movs	r3, #13
 8006962:	e17e      	b.n	8006c62 <find_volume+0x48e>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	3338      	adds	r3, #56	@ 0x38
 8006968:	330b      	adds	r3, #11
 800696a:	4618      	mov	r0, r3
 800696c:	f7fd fee6 	bl	800473c <ld_word>
 8006970:	4603      	mov	r3, r0
 8006972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006976:	d001      	beq.n	800697c <find_volume+0x1a8>
 8006978:	230d      	movs	r3, #13
 800697a:	e172      	b.n	8006c62 <find_volume+0x48e>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	3338      	adds	r3, #56	@ 0x38
 8006980:	3316      	adds	r3, #22
 8006982:	4618      	mov	r0, r3
 8006984:	f7fd feda 	bl	800473c <ld_word>
 8006988:	4603      	mov	r3, r0
 800698a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800698c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <find_volume+0x1cc>
 8006992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006994:	3338      	adds	r3, #56	@ 0x38
 8006996:	3324      	adds	r3, #36	@ 0x24
 8006998:	4618      	mov	r0, r3
 800699a:	f7fd fee7 	bl	800476c <ld_dword>
 800699e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80069a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069a4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80069a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80069ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80069b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b2:	789b      	ldrb	r3, [r3, #2]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d005      	beq.n	80069c4 <find_volume+0x1f0>
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	789b      	ldrb	r3, [r3, #2]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d001      	beq.n	80069c4 <find_volume+0x1f0>
 80069c0:	230d      	movs	r3, #13
 80069c2:	e14e      	b.n	8006c62 <find_volume+0x48e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80069c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c6:	789b      	ldrb	r3, [r3, #2]
 80069c8:	461a      	mov	r2, r3
 80069ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069cc:	fb02 f303 	mul.w	r3, r2, r3
 80069d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80069d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069d8:	461a      	mov	r2, r3
 80069da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80069de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e0:	895b      	ldrh	r3, [r3, #10]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d008      	beq.n	80069f8 <find_volume+0x224>
 80069e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e8:	895b      	ldrh	r3, [r3, #10]
 80069ea:	461a      	mov	r2, r3
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	895b      	ldrh	r3, [r3, #10]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <find_volume+0x228>
 80069f8:	230d      	movs	r3, #13
 80069fa:	e132      	b.n	8006c62 <find_volume+0x48e>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80069fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fe:	3338      	adds	r3, #56	@ 0x38
 8006a00:	3311      	adds	r3, #17
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fd fe9a 	bl	800473c <ld_word>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a12:	891b      	ldrh	r3, [r3, #8]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <find_volume+0x24e>
 8006a1e:	230d      	movs	r3, #13
 8006a20:	e11f      	b.n	8006c62 <find_volume+0x48e>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a24:	3338      	adds	r3, #56	@ 0x38
 8006a26:	3313      	adds	r3, #19
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fd fe87 	bl	800473c <ld_word>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <find_volume+0x272>
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	3338      	adds	r3, #56	@ 0x38
 8006a3c:	3320      	adds	r3, #32
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fd fe94 	bl	800476c <ld_dword>
 8006a44:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	3338      	adds	r3, #56	@ 0x38
 8006a4a:	330e      	adds	r3, #14
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fd fe75 	bl	800473c <ld_word>
 8006a52:	4603      	mov	r3, r0
 8006a54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006a56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <find_volume+0x28c>
 8006a5c:	230d      	movs	r3, #13
 8006a5e:	e100      	b.n	8006c62 <find_volume+0x48e>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006a60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a64:	4413      	add	r3, r2
 8006a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a68:	8912      	ldrh	r2, [r2, #8]
 8006a6a:	0912      	lsrs	r2, r2, #4
 8006a6c:	b292      	uxth	r2, r2
 8006a6e:	4413      	add	r3, r2
 8006a70:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006a72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d204      	bcs.n	8006a84 <find_volume+0x2b0>
 8006a7a:	230d      	movs	r3, #13
 8006a7c:	e0f1      	b.n	8006c62 <find_volume+0x48e>
 8006a7e:	bf00      	nop
 8006a80:	200068e4 	.word	0x200068e4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a8c:	8952      	ldrh	r2, [r2, #10]
 8006a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <find_volume+0x2ca>
 8006a9a:	230d      	movs	r3, #13
 8006a9c:	e0e1      	b.n	8006c62 <find_volume+0x48e>
		fmt = FS_FAT32;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d802      	bhi.n	8006ab4 <find_volume+0x2e0>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d802      	bhi.n	8006ac4 <find_volume+0x2f0>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	1c9a      	adds	r2, r3, #2
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ad0:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ad2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ad6:	441a      	add	r2, r3
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ada:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006adc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae0:	441a      	add	r2, r3
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006ae6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d11e      	bne.n	8006b2c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af0:	3338      	adds	r3, #56	@ 0x38
 8006af2:	332a      	adds	r3, #42	@ 0x2a
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fd fe21 	bl	800473c <ld_word>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <find_volume+0x330>
 8006b00:	230d      	movs	r3, #13
 8006b02:	e0ae      	b.n	8006c62 <find_volume+0x48e>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	891b      	ldrh	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <find_volume+0x33c>
 8006b0c:	230d      	movs	r3, #13
 8006b0e:	e0a8      	b.n	8006c62 <find_volume+0x48e>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b12:	3338      	adds	r3, #56	@ 0x38
 8006b14:	332c      	adds	r3, #44	@ 0x2c
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fd fe28 	bl	800476c <ld_dword>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b20:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b2a:	e01f      	b.n	8006b6c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2e:	891b      	ldrh	r3, [r3, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <find_volume+0x364>
 8006b34:	230d      	movs	r3, #13
 8006b36:	e094      	b.n	8006c62 <find_volume+0x48e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b3e:	441a      	add	r2, r3
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006b44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d103      	bne.n	8006b54 <find_volume+0x380>
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	e00a      	b.n	8006b6a <find_volume+0x396>
 8006b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	4413      	add	r3, r2
 8006b5e:	085a      	lsrs	r2, r3, #1
 8006b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006b6a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	6a1a      	ldr	r2, [r3, #32]
 8006b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b72:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8006b76:	0a5b      	lsrs	r3, r3, #9
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d201      	bcs.n	8006b80 <find_volume+0x3ac>
 8006b7c:	230d      	movs	r3, #13
 8006b7e:	e070      	b.n	8006c62 <find_volume+0x48e>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b86:	615a      	str	r2, [r3, #20]
 8006b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8a:	695a      	ldr	r2, [r3, #20]
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	2280      	movs	r2, #128	@ 0x80
 8006b94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d149      	bne.n	8006c32 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	3338      	adds	r3, #56	@ 0x38
 8006ba2:	3330      	adds	r3, #48	@ 0x30
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fd fdc9 	bl	800473c <ld_word>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d140      	bne.n	8006c32 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006bb8:	f7fe f870 	bl	8004c9c <move_window>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d137      	bne.n	8006c32 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	3338      	adds	r3, #56	@ 0x38
 8006bcc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fd fdb3 	bl	800473c <ld_word>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d127      	bne.n	8006c32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be4:	3338      	adds	r3, #56	@ 0x38
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fd fdc0 	bl	800476c <ld_dword>
 8006bec:	4603      	mov	r3, r0
 8006bee:	4a1f      	ldr	r2, [pc, #124]	@ (8006c6c <find_volume+0x498>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d11e      	bne.n	8006c32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf6:	3338      	adds	r3, #56	@ 0x38
 8006bf8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fd fdb5 	bl	800476c <ld_dword>
 8006c02:	4603      	mov	r3, r0
 8006c04:	4a1a      	ldr	r2, [pc, #104]	@ (8006c70 <find_volume+0x49c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d113      	bne.n	8006c32 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	3338      	adds	r3, #56	@ 0x38
 8006c0e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fd fdaa 	bl	800476c <ld_dword>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c20:	3338      	adds	r3, #56	@ 0x38
 8006c22:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fd fda0 	bl	800476c <ld_dword>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c30:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c34:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006c38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c74 <find_volume+0x4a0>)
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	4b0c      	ldr	r3, [pc, #48]	@ (8006c74 <find_volume+0x4a0>)
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <find_volume+0x4a0>)
 8006c48:	881a      	ldrh	r2, [r3, #0]
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c50:	4a09      	ldr	r2, [pc, #36]	@ (8006c78 <find_volume+0x4a4>)
 8006c52:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8006c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c56:	2200      	movs	r2, #0
 8006c58:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006c5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c5c:	f7fd ffb6 	bl	8004bcc <clear_lock>
#endif
	return FR_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3758      	adds	r7, #88	@ 0x58
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	41615252 	.word	0x41615252
 8006c70:	61417272 	.word	0x61417272
 8006c74:	200068e8 	.word	0x200068e8
 8006c78:	2000690c 	.word	0x2000690c

08006c7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006c86:	2309      	movs	r3, #9
 8006c88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01c      	beq.n	8006cca <validate+0x4e>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d018      	beq.n	8006cca <validate+0x4e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d013      	beq.n	8006cca <validate+0x4e>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	889a      	ldrh	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	88db      	ldrh	r3, [r3, #6]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d10c      	bne.n	8006cca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fd fca0 	bl	80045fc <disk_status>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <validate+0x4e>
			res = FR_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <validate+0x5a>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	e000      	b.n	8006cd8 <validate+0x5c>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	6013      	str	r3, [r2, #0]
	return res;
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006cfa:	f107 0310 	add.w	r3, r7, #16
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fcce 	bl	80066a0 <get_ldnumber>
 8006d04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	da01      	bge.n	8006d10 <f_mount+0x28>
 8006d0c:	230b      	movs	r3, #11
 8006d0e:	e02b      	b.n	8006d68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006d10:	4a17      	ldr	r2, [pc, #92]	@ (8006d70 <f_mount+0x88>)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006d20:	69b8      	ldr	r0, [r7, #24]
 8006d22:	f7fd ff53 	bl	8004bcc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	490d      	ldr	r1, [pc, #52]	@ (8006d70 <f_mount+0x88>)
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <f_mount+0x66>
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d001      	beq.n	8006d52 <f_mount+0x6a>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e00a      	b.n	8006d68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006d52:	f107 010c 	add.w	r1, r7, #12
 8006d56:	f107 0308 	add.w	r3, r7, #8
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fd39 	bl	80067d4 <find_volume>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	200068e4 	.word	0x200068e4

08006d74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b09a      	sub	sp, #104	@ 0x68
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <f_open+0x18>
 8006d88:	2309      	movs	r3, #9
 8006d8a:	e1a9      	b.n	80070e0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d94:	79fa      	ldrb	r2, [r7, #7]
 8006d96:	f107 0114 	add.w	r1, r7, #20
 8006d9a:	f107 0308 	add.w	r3, r7, #8
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fd18 	bl	80067d4 <find_volume>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006daa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 818d 	bne.w	80070ce <f_open+0x35a>
		dj.obj.fs = fs;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	f107 0318 	add.w	r3, r7, #24
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff fbdd 	bl	8006580 <follow_path>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006dcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d118      	bne.n	8006e06 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006dd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006dd8:	b25b      	sxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da03      	bge.n	8006de6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006dde:	2306      	movs	r3, #6
 8006de0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006de4:	e00f      	b.n	8006e06 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	bf8c      	ite	hi
 8006dec:	2301      	movhi	r3, #1
 8006dee:	2300      	movls	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	f107 0318 	add.w	r3, r7, #24
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fd fd9e 	bl	800493c <chk_lock>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	f003 031c 	and.w	r3, r3, #28
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d07f      	beq.n	8006f10 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006e10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d017      	beq.n	8006e48 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006e18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d10e      	bne.n	8006e3e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006e20:	f7fd fde8 	bl	80049f4 <enq_lock>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d006      	beq.n	8006e38 <f_open+0xc4>
 8006e2a:	f107 0318 	add.w	r3, r7, #24
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe ffca 	bl	8005dc8 <dir_register>
 8006e34:	4603      	mov	r3, r0
 8006e36:	e000      	b.n	8006e3a <f_open+0xc6>
 8006e38:	2312      	movs	r3, #18
 8006e3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	f043 0308 	orr.w	r3, r3, #8
 8006e44:	71fb      	strb	r3, [r7, #7]
 8006e46:	e010      	b.n	8006e6a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006e48:	7fbb      	ldrb	r3, [r7, #30]
 8006e4a:	f003 0311 	and.w	r3, r3, #17
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <f_open+0xe6>
					res = FR_DENIED;
 8006e52:	2307      	movs	r3, #7
 8006e54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006e58:	e007      	b.n	8006e6a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <f_open+0xf6>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d168      	bne.n	8006f44 <f_open+0x1d0>
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d063      	beq.n	8006f44 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006e7c:	f7fd fb5c 	bl	8004538 <get_fattime>
 8006e80:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	330e      	adds	r3, #14
 8006e86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fd fcad 	bl	80047e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e90:	3316      	adds	r3, #22
 8006e92:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fd fca7 	bl	80047e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	330b      	adds	r3, #11
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fbfb 	bl	80056a4 <ld_clust>
 8006eae:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fc13 	bl	80056e2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	331c      	adds	r3, #28
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fd fc90 	bl	80047e8 <st_dword>
					fs->wflag = 1;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d037      	beq.n	8006f44 <f_open+0x1d0>
						dw = fs->winsect;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006eda:	f107 0318 	add.w	r3, r7, #24
 8006ede:	2200      	movs	r2, #0
 8006ee0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe f926 	bl	8005134 <remove_chain>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006eee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d126      	bne.n	8006f44 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fd fece 	bl	8004c9c <move_window>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f0a:	3a01      	subs	r2, #1
 8006f0c:	611a      	str	r2, [r3, #16]
 8006f0e:	e019      	b.n	8006f44 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006f10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d115      	bne.n	8006f44 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006f18:	7fbb      	ldrb	r3, [r7, #30]
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <f_open+0x1b6>
					res = FR_NO_FILE;
 8006f22:	2304      	movs	r3, #4
 8006f24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006f28:	e00c      	b.n	8006f44 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <f_open+0x1d0>
 8006f34:	7fbb      	ldrb	r3, [r7, #30]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <f_open+0x1d0>
						res = FR_DENIED;
 8006f3e:	2307      	movs	r3, #7
 8006f40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006f44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d126      	bne.n	8006f9a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006f56:	79fb      	ldrb	r3, [r7, #7]
 8006f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f5c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006f66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	bf8c      	ite	hi
 8006f72:	2301      	movhi	r3, #1
 8006f74:	2300      	movls	r3, #0
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f107 0318 	add.w	r3, r7, #24
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fd fd59 	bl	8004a38 <inc_lock>
 8006f86:	4602      	mov	r2, r0
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <f_open+0x226>
 8006f94:	2302      	movs	r3, #2
 8006f96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f040 8095 	bne.w	80070ce <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fb7a 	bl	80056a4 <ld_clust>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb8:	331c      	adds	r3, #28
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fd fbd6 	bl	800476c <ld_dword>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	88da      	ldrh	r2, [r3, #6]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	79fa      	ldrb	r2, [r7, #7]
 8006fde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3330      	adds	r3, #48	@ 0x30
 8006ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fd fc40 	bl	8004882 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	d060      	beq.n	80070ce <f_open+0x35a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d05c      	beq.n	80070ce <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	895b      	ldrh	r3, [r3, #10]
 8007020:	025b      	lsls	r3, r3, #9
 8007022:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007030:	e016      	b.n	8007060 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007036:	4618      	mov	r0, r3
 8007038:	f7fd feeb 	bl	8004e12 <get_fat>
 800703c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800703e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007040:	2b01      	cmp	r3, #1
 8007042:	d802      	bhi.n	800704a <f_open+0x2d6>
 8007044:	2302      	movs	r3, #2
 8007046:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800704a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007050:	d102      	bne.n	8007058 <f_open+0x2e4>
 8007052:	2301      	movs	r3, #1
 8007054:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007058:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800705a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007060:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007064:	2b00      	cmp	r3, #0
 8007066:	d103      	bne.n	8007070 <f_open+0x2fc>
 8007068:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800706a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800706c:	429a      	cmp	r2, r3
 800706e:	d8e0      	bhi.n	8007032 <f_open+0x2be>
				}
				fp->clust = clst;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007074:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007076:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800707a:	2b00      	cmp	r3, #0
 800707c:	d127      	bne.n	80070ce <f_open+0x35a>
 800707e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007084:	2b00      	cmp	r3, #0
 8007086:	d022      	beq.n	80070ce <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800708c:	4618      	mov	r0, r3
 800708e:	f7fd fea1 	bl	8004dd4 <clust2sect>
 8007092:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <f_open+0x32e>
						res = FR_INT_ERR;
 800709a:	2302      	movs	r3, #2
 800709c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80070a0:	e015      	b.n	80070ce <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80070a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070a4:	0a5a      	lsrs	r2, r3, #9
 80070a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a8:	441a      	add	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	7858      	ldrb	r0, [r3, #1]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a1a      	ldr	r2, [r3, #32]
 80070bc:	2301      	movs	r3, #1
 80070be:	f7fd fadf 	bl	8004680 <disk_read>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <f_open+0x35a>
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80070ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <f_open+0x368>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80070dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3768      	adds	r7, #104	@ 0x68
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	@ 0x38
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f107 0214 	add.w	r2, r7, #20
 8007106:	4611      	mov	r1, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff fdb7 	bl	8006c7c <validate>
 800710e:	4603      	mov	r3, r0
 8007110:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007114:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <f_read+0x44>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	7d5b      	ldrb	r3, [r3, #21]
 8007120:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007124:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <f_read+0x4a>
 800712c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007130:	e115      	b.n	800735e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	7d1b      	ldrb	r3, [r3, #20]
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <f_read+0x5a>
 800713e:	2307      	movs	r3, #7
 8007140:	e10d      	b.n	800735e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	429a      	cmp	r2, r3
 8007154:	f240 80fe 	bls.w	8007354 <f_read+0x26c>
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800715c:	e0fa      	b.n	8007354 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007166:	2b00      	cmp	r3, #0
 8007168:	f040 80c6 	bne.w	80072f8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	0a5b      	lsrs	r3, r3, #9
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	8952      	ldrh	r2, [r2, #10]
 8007176:	3a01      	subs	r2, #1
 8007178:	4013      	ands	r3, r2
 800717a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d12f      	bne.n	80071e2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d103      	bne.n	8007192 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007190:	e013      	b.n	80071ba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	4619      	mov	r1, r3
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f7fe f8c4 	bl	800532e <clmt_clust>
 80071a6:	6338      	str	r0, [r7, #48]	@ 0x30
 80071a8:	e007      	b.n	80071ba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f7fd fe2d 	bl	8004e12 <get_fat>
 80071b8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80071ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d804      	bhi.n	80071ca <f_read+0xe2>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2202      	movs	r2, #2
 80071c4:	755a      	strb	r2, [r3, #21]
 80071c6:	2302      	movs	r3, #2
 80071c8:	e0c9      	b.n	800735e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071d0:	d104      	bne.n	80071dc <f_read+0xf4>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	755a      	strb	r2, [r3, #21]
 80071d8:	2301      	movs	r3, #1
 80071da:	e0c0      	b.n	800735e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071e0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	4619      	mov	r1, r3
 80071ea:	4610      	mov	r0, r2
 80071ec:	f7fd fdf2 	bl	8004dd4 <clust2sect>
 80071f0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <f_read+0x11a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2202      	movs	r2, #2
 80071fc:	755a      	strb	r2, [r3, #21]
 80071fe:	2302      	movs	r3, #2
 8007200:	e0ad      	b.n	800735e <f_read+0x276>
			sect += csect;
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	4413      	add	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	0a5b      	lsrs	r3, r3, #9
 800720e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	d039      	beq.n	800728a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721a:	4413      	add	r3, r2
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	8952      	ldrh	r2, [r2, #10]
 8007220:	4293      	cmp	r3, r2
 8007222:	d905      	bls.n	8007230 <f_read+0x148>
					cc = fs->csize - csect;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	895b      	ldrh	r3, [r3, #10]
 8007228:	461a      	mov	r2, r3
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	7858      	ldrb	r0, [r3, #1]
 8007234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800723a:	f7fd fa21 	bl	8004680 <disk_read>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <f_read+0x166>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	755a      	strb	r2, [r3, #21]
 800724a:	2301      	movs	r3, #1
 800724c:	e087      	b.n	800735e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	7d1b      	ldrb	r3, [r3, #20]
 8007252:	b25b      	sxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	da14      	bge.n	8007282 <f_read+0x19a>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a1a      	ldr	r2, [r3, #32]
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007262:	429a      	cmp	r2, r3
 8007264:	d90d      	bls.n	8007282 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1a      	ldr	r2, [r3, #32]
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	025b      	lsls	r3, r3, #9
 8007270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007272:	18d0      	adds	r0, r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3330      	adds	r3, #48	@ 0x30
 8007278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800727c:	4619      	mov	r1, r3
 800727e:	f7fd fadf 	bl	8004840 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	025b      	lsls	r3, r3, #9
 8007286:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007288:	e050      	b.n	800732c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	429a      	cmp	r2, r3
 8007292:	d02e      	beq.n	80072f2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	7d1b      	ldrb	r3, [r3, #20]
 8007298:	b25b      	sxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	da18      	bge.n	80072d0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	7858      	ldrb	r0, [r3, #1]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a1a      	ldr	r2, [r3, #32]
 80072ac:	2301      	movs	r3, #1
 80072ae:	f7fd fa07 	bl	80046c0 <disk_write>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <f_read+0x1da>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2201      	movs	r2, #1
 80072bc:	755a      	strb	r2, [r3, #21]
 80072be:	2301      	movs	r3, #1
 80072c0:	e04d      	b.n	800735e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	7d1b      	ldrb	r3, [r3, #20]
 80072c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	7858      	ldrb	r0, [r3, #1]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072da:	2301      	movs	r3, #1
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	f7fd f9cf 	bl	8004680 <disk_read>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <f_read+0x20a>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	755a      	strb	r2, [r3, #21]
 80072ee:	2301      	movs	r3, #1
 80072f0:	e035      	b.n	800735e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007300:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007304:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d901      	bls.n	8007312 <f_read+0x22a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007320:	4413      	add	r3, r2
 8007322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007324:	4619      	mov	r1, r3
 8007326:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007328:	f7fd fa8a 	bl	8004840 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800732c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800732e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007330:	4413      	add	r3, r2
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	441a      	add	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	619a      	str	r2, [r3, #24]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007346:	441a      	add	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f47f af01 	bne.w	800715e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3738      	adds	r7, #56	@ 0x38
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b08c      	sub	sp, #48	@ 0x30
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f107 0210 	add.w	r2, r7, #16
 8007384:	4611      	mov	r1, r2
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff fc78 	bl	8006c7c <validate>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007392:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <f_write+0x44>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	7d5b      	ldrb	r3, [r3, #21]
 800739e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80073a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <f_write+0x4a>
 80073aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073ae:	e14b      	b.n	8007648 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	7d1b      	ldrb	r3, [r3, #20]
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <f_write+0x5a>
 80073bc:	2307      	movs	r3, #7
 80073be:	e143      	b.n	8007648 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	699a      	ldr	r2, [r3, #24]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	441a      	add	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	f080 812d 	bcs.w	800762c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	43db      	mvns	r3, r3
 80073d8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80073da:	e127      	b.n	800762c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f040 80e3 	bne.w	80075b0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	0a5b      	lsrs	r3, r3, #9
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	8952      	ldrh	r2, [r2, #10]
 80073f4:	3a01      	subs	r2, #1
 80073f6:	4013      	ands	r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d143      	bne.n	8007488 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10c      	bne.n	8007422 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800740e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007410:	2b00      	cmp	r3, #0
 8007412:	d11a      	bne.n	800744a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f7fd fef0 	bl	80051fe <create_chain>
 800741e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007420:	e013      	b.n	800744a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	4619      	mov	r1, r3
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7fd ff7c 	bl	800532e <clmt_clust>
 8007436:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007438:	e007      	b.n	800744a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fd fedb 	bl	80051fe <create_chain>
 8007448:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800744a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 80f2 	beq.w	8007636 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	2b01      	cmp	r3, #1
 8007456:	d104      	bne.n	8007462 <f_write+0xfc>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2202      	movs	r2, #2
 800745c:	755a      	strb	r2, [r3, #21]
 800745e:	2302      	movs	r3, #2
 8007460:	e0f2      	b.n	8007648 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007468:	d104      	bne.n	8007474 <f_write+0x10e>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	755a      	strb	r2, [r3, #21]
 8007470:	2301      	movs	r3, #1
 8007472:	e0e9      	b.n	8007648 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007478:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <f_write+0x122>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007486:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	7d1b      	ldrb	r3, [r3, #20]
 800748c:	b25b      	sxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	da18      	bge.n	80074c4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	7858      	ldrb	r0, [r3, #1]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	2301      	movs	r3, #1
 80074a2:	f7fd f90d 	bl	80046c0 <disk_write>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <f_write+0x150>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	755a      	strb	r2, [r3, #21]
 80074b2:	2301      	movs	r3, #1
 80074b4:	e0c8      	b.n	8007648 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	7d1b      	ldrb	r3, [r3, #20]
 80074ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f7fd fc81 	bl	8004dd4 <clust2sect>
 80074d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d104      	bne.n	80074e4 <f_write+0x17e>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2202      	movs	r2, #2
 80074de:	755a      	strb	r2, [r3, #21]
 80074e0:	2302      	movs	r3, #2
 80074e2:	e0b1      	b.n	8007648 <f_write+0x2e2>
			sect += csect;
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	4413      	add	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	0a5b      	lsrs	r3, r3, #9
 80074f0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d03c      	beq.n	8007572 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	4413      	add	r3, r2
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	8952      	ldrh	r2, [r2, #10]
 8007502:	4293      	cmp	r3, r2
 8007504:	d905      	bls.n	8007512 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	895b      	ldrh	r3, [r3, #10]
 800750a:	461a      	mov	r2, r3
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	7858      	ldrb	r0, [r3, #1]
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	69f9      	ldr	r1, [r7, #28]
 800751c:	f7fd f8d0 	bl	80046c0 <disk_write>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <f_write+0x1ca>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	755a      	strb	r2, [r3, #21]
 800752c:	2301      	movs	r3, #1
 800752e:	e08b      	b.n	8007648 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a1a      	ldr	r2, [r3, #32]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	6a3a      	ldr	r2, [r7, #32]
 800753a:	429a      	cmp	r2, r3
 800753c:	d915      	bls.n	800756a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a1a      	ldr	r2, [r3, #32]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	025b      	lsls	r3, r3, #9
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007556:	4619      	mov	r1, r3
 8007558:	f7fd f972 	bl	8004840 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	7d1b      	ldrb	r3, [r3, #20]
 8007560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007564:	b2da      	uxtb	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	025b      	lsls	r3, r3, #9
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007570:	e03f      	b.n	80075f2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	429a      	cmp	r2, r3
 800757a:	d016      	beq.n	80075aa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	699a      	ldr	r2, [r3, #24]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007584:	429a      	cmp	r2, r3
 8007586:	d210      	bcs.n	80075aa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	7858      	ldrb	r0, [r3, #1]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007592:	2301      	movs	r3, #1
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	f7fd f873 	bl	8004680 <disk_read>
 800759a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800759c:	2b00      	cmp	r3, #0
 800759e:	d004      	beq.n	80075aa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	755a      	strb	r2, [r3, #21]
 80075a6:	2301      	movs	r3, #1
 80075a8:	e04e      	b.n	8007648 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80075bc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80075be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d901      	bls.n	80075ca <f_write+0x264>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d8:	4413      	add	r3, r2
 80075da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075dc:	69f9      	ldr	r1, [r7, #28]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fd f92e 	bl	8004840 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	7d1b      	ldrb	r3, [r3, #20]
 80075e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f6:	4413      	add	r3, r2
 80075f8:	61fb      	str	r3, [r7, #28]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	699a      	ldr	r2, [r3, #24]
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	619a      	str	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	429a      	cmp	r2, r3
 8007610:	bf38      	it	cc
 8007612:	461a      	movcc	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	60da      	str	r2, [r3, #12]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	441a      	add	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f47f aed4 	bne.w	80073dc <f_write+0x76>
 8007634:	e000      	b.n	8007638 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007636:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	7d1b      	ldrb	r3, [r3, #20]
 800763c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007640:	b2da      	uxtb	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3730      	adds	r7, #48	@ 0x30
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f107 0208 	add.w	r2, r7, #8
 800765e:	4611      	mov	r1, r2
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fb0b 	bl	8006c7c <validate>
 8007666:	4603      	mov	r3, r0
 8007668:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d168      	bne.n	8007742 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	7d1b      	ldrb	r3, [r3, #20]
 8007674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d062      	beq.n	8007742 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7d1b      	ldrb	r3, [r3, #20]
 8007680:	b25b      	sxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	da15      	bge.n	80076b2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	7858      	ldrb	r0, [r3, #1]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1a      	ldr	r2, [r3, #32]
 8007694:	2301      	movs	r3, #1
 8007696:	f7fd f813 	bl	80046c0 <disk_write>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <f_sync+0x54>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e04f      	b.n	8007744 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	7d1b      	ldrb	r3, [r3, #20]
 80076a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80076b2:	f7fc ff41 	bl	8004538 <get_fattime>
 80076b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f7fd faeb 	bl	8004c9c <move_window>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d138      	bne.n	8007742 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	330b      	adds	r3, #11
 80076da:	781a      	ldrb	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	330b      	adds	r3, #11
 80076e0:	f042 0220 	orr.w	r2, r2, #32
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	461a      	mov	r2, r3
 80076f2:	68f9      	ldr	r1, [r7, #12]
 80076f4:	f7fd fff5 	bl	80056e2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f103 021c 	add.w	r2, r3, #28
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	4619      	mov	r1, r3
 8007704:	4610      	mov	r0, r2
 8007706:	f7fd f86f 	bl	80047e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3316      	adds	r3, #22
 800770e:	6939      	ldr	r1, [r7, #16]
 8007710:	4618      	mov	r0, r3
 8007712:	f7fd f869 	bl	80047e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3312      	adds	r3, #18
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f7fd f848 	bl	80047b2 <st_word>
					fs->wflag = 1;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2201      	movs	r2, #1
 8007726:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4618      	mov	r0, r3
 800772c:	f7fd fae4 	bl	8004cf8 <sync_fs>
 8007730:	4603      	mov	r3, r0
 8007732:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7d1b      	ldrb	r3, [r3, #20]
 8007738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800773c:	b2da      	uxtb	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007742:	7dfb      	ldrb	r3, [r7, #23]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff ff7b 	bl	8007650 <f_sync>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d118      	bne.n	8007796 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f107 0208 	add.w	r2, r7, #8
 800776a:	4611      	mov	r1, r2
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fa85 	bl	8006c7c <validate>
 8007772:	4603      	mov	r3, r0
 8007774:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10c      	bne.n	8007796 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	4618      	mov	r0, r3
 8007782:	f7fd f9e7 	bl	8004b54 <dec_lock>
 8007786:	4603      	mov	r3, r0
 8007788:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007796:	7bfb      	ldrb	r3, [r7, #15]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <f_opendir+0x14>
 80077b0:	2309      	movs	r3, #9
 80077b2:	e064      	b.n	800787e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80077b8:	f107 010c 	add.w	r1, r7, #12
 80077bc:	463b      	mov	r3, r7
 80077be:	2200      	movs	r2, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff f807 	bl	80067d4 <find_volume>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d14f      	bne.n	8007870 <f_opendir+0xd0>
		obj->fs = fs;
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fe fed0 	bl	8006580 <follow_path>
 80077e0:	4603      	mov	r3, r0
 80077e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d13d      	bne.n	8007866 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80077f0:	b25b      	sxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	db12      	blt.n	800781c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	799b      	ldrb	r3, [r3, #6]
 80077fa:	f003 0310 	and.w	r3, r3, #16
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f7fd ff4a 	bl	80056a4 <ld_clust>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	609a      	str	r2, [r3, #8]
 8007816:	e001      	b.n	800781c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007818:	2305      	movs	r3, #5
 800781a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d121      	bne.n	8007866 <f_opendir+0xc6>
				obj->id = fs->id;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	88da      	ldrh	r2, [r3, #6]
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800782a:	2100      	movs	r1, #0
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7fd fdb2 	bl	8005396 <dir_sdi>
 8007832:	4603      	mov	r3, r0
 8007834:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d114      	bne.n	8007866 <f_opendir+0xc6>
					if (obj->sclust) {
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00d      	beq.n	8007860 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007844:	2100      	movs	r1, #0
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fd f8f6 	bl	8004a38 <inc_lock>
 800784c:	4602      	mov	r2, r0
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d105      	bne.n	8007866 <f_opendir+0xc6>
 800785a:	2312      	movs	r3, #18
 800785c:	75fb      	strb	r3, [r7, #23]
 800785e:	e002      	b.n	8007866 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2200      	movs	r2, #0
 8007864:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	2b04      	cmp	r3, #4
 800786a:	d101      	bne.n	8007870 <f_opendir+0xd0>
 800786c:	2305      	movs	r3, #5
 800786e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <f_opendir+0xdc>
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800787c:	7dfb      	ldrb	r3, [r7, #23]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f107 0208 	add.w	r2, r7, #8
 8007894:	4611      	mov	r1, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff f9f0 	bl	8006c7c <validate>
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d110      	bne.n	80078c8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d006      	beq.n	80078bc <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fd f94e 	bl	8004b54 <dec_lock>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f107 0208 	add.w	r2, r7, #8
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff f9c9 	bl	8006c7c <validate>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d126      	bne.n	8007942 <f_readdir+0x70>
		if (!fno) {
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80078fa:	2100      	movs	r1, #0
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7fd fd4a 	bl	8005396 <dir_sdi>
 8007902:	4603      	mov	r3, r0
 8007904:	73fb      	strb	r3, [r7, #15]
 8007906:	e01c      	b.n	8007942 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007908:	2100      	movs	r1, #0
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fe f8f5 	bl	8005afa <dir_read>
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b04      	cmp	r3, #4
 8007918:	d101      	bne.n	800791e <f_readdir+0x4c>
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10e      	bne.n	8007942 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fe fb46 	bl	8005fb8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800792c:	2100      	movs	r1, #0
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fd fdac 	bl	800548c <dir_next>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	2b04      	cmp	r3, #4
 800793c:	d101      	bne.n	8007942 <f_readdir+0x70>
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b092      	sub	sp, #72	@ 0x48
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007958:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800795c:	f107 030c 	add.w	r3, r7, #12
 8007960:	2200      	movs	r2, #0
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe ff36 	bl	80067d4 <find_volume>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800796e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 8099 	bne.w	8007aaa <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800797e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007980:	695a      	ldr	r2, [r3, #20]
 8007982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	3b02      	subs	r3, #2
 8007988:	429a      	cmp	r2, r3
 800798a:	d804      	bhi.n	8007996 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800798c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798e:	695a      	ldr	r2, [r3, #20]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e089      	b.n	8007aaa <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d128      	bne.n	80079f4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80079a2:	2302      	movs	r3, #2
 80079a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80079aa:	f107 0314 	add.w	r3, r7, #20
 80079ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fd fa2e 	bl	8004e12 <get_fat>
 80079b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80079b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079be:	d103      	bne.n	80079c8 <f_getfree+0x7c>
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80079c6:	e063      	b.n	8007a90 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80079c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d103      	bne.n	80079d6 <f_getfree+0x8a>
 80079ce:	2302      	movs	r3, #2
 80079d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80079d4:	e05c      	b.n	8007a90 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80079d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <f_getfree+0x96>
 80079dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079de:	3301      	adds	r3, #1
 80079e0:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80079e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e4:	3301      	adds	r3, #1
 80079e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d3db      	bcc.n	80079aa <f_getfree+0x5e>
 80079f2:	e04d      	b.n	8007a90 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fe:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a04:	2300      	movs	r3, #0
 8007a06:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d113      	bne.n	8007a36 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007a0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007a16:	4619      	mov	r1, r3
 8007a18:	f7fd f940 	bl	8004c9c <move_window>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007a22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d131      	bne.n	8007a8e <f_getfree+0x142>
							p = fs->win;
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	3338      	adds	r3, #56	@ 0x38
 8007a2e:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a34:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d10f      	bne.n	8007a5e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007a3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a40:	f7fc fe7c 	bl	800473c <ld_word>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <f_getfree+0x104>
 8007a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	3302      	adds	r3, #2
 8007a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a58:	3b02      	subs	r3, #2
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5c:	e010      	b.n	8007a80 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007a5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a60:	f7fc fe84 	bl	800476c <ld_dword>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d102      	bne.n	8007a74 <f_getfree+0x128>
 8007a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a70:	3301      	adds	r3, #1
 8007a72:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8007a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a76:	3304      	adds	r3, #4
 8007a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a82:	3b01      	subs	r3, #1
 8007a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1bd      	bne.n	8007a08 <f_getfree+0xbc>
 8007a8c:	e000      	b.n	8007a90 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007a8e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a94:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a9a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9e:	791a      	ldrb	r2, [r3, #4]
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	f042 0201 	orr.w	r2, r2, #1
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3748      	adds	r7, #72	@ 0x48
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Path name of the logical drive number */
	TCHAR* label,		/* Pointer to a buffer to return the volume label */
	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b096      	sub	sp, #88	@ 0x58
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	607a      	str	r2, [r7, #4]
#if _LFN_UNICODE || _FS_EXFAT
	WCHAR w;
#endif

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007ac2:	f107 0114 	add.w	r1, r7, #20
 8007ac6:	f107 030c 	add.w	r3, r7, #12
 8007aca:	2200      	movs	r2, #0
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe fe81 	bl	80067d4 <find_volume>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Get volume label */
	if (res == FR_OK && label) {
 8007ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d150      	bne.n	8007b82 <f_getlabel+0xcc>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d04d      	beq.n	8007b82 <f_getlabel+0xcc>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	61bb      	str	r3, [r7, #24]
 8007aea:	2300      	movs	r3, #0
 8007aec:	623b      	str	r3, [r7, #32]
		res = dir_sdi(&dj, 0);
 8007aee:	f107 0318 	add.w	r3, r7, #24
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fd fc4e 	bl	8005396 <dir_sdi>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) {
 8007b00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d132      	bne.n	8007b6e <f_getlabel+0xb8>
		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
 8007b08:	f107 0318 	add.w	r3, r7, #24
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fd fff3 	bl	8005afa <dir_read>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		 	if (res == FR_OK) {
 8007b1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d125      	bne.n	8007b6e <f_getlabel+0xb8>
					}
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
 8007b22:	2300      	movs	r3, #0
 8007b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b28:	653b      	str	r3, [r7, #80]	@ 0x50
						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
							w = w << 8 | dj.dir[si++];
						}
						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
#else
						label[di++] = dj.dir[si++];
 8007b2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b2e:	1c59      	adds	r1, r3, #1
 8007b30:	6539      	str	r1, [r7, #80]	@ 0x50
 8007b32:	441a      	add	r2, r3
 8007b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b36:	1c59      	adds	r1, r3, #1
 8007b38:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	440b      	add	r3, r1
 8007b3e:	7812      	ldrb	r2, [r2, #0]
 8007b40:	701a      	strb	r2, [r3, #0]
#endif
					} while (di < 11);
 8007b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b44:	2b0a      	cmp	r3, #10
 8007b46:	d9f0      	bls.n	8007b2a <f_getlabel+0x74>
					do {				/* Truncate trailing spaces */
						label[di] = 0;
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4c:	4413      	add	r3, r2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	701a      	strb	r2, [r3, #0]
						if (di == 0) break;
 8007b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d009      	beq.n	8007b6c <f_getlabel+0xb6>
					} while (label[--di] == ' ');
 8007b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b62:	4413      	add	r3, r2
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d0ee      	beq.n	8007b48 <f_getlabel+0x92>
 8007b6a:	e000      	b.n	8007b6e <f_getlabel+0xb8>
						if (di == 0) break;
 8007b6c:	bf00      	nop
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
 8007b6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d105      	bne.n	8007b82 <f_getlabel+0xcc>
			label[0] = 0;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	701a      	strb	r2, [r3, #0]
			res = FR_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
 8007b82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d129      	bne.n	8007bde <f_getlabel+0x128>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d026      	beq.n	8007bde <f_getlabel+0x128>
		res = move_window(fs, fs->volbase);
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f7fd f87f 	bl	8004c9c <move_window>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) {
 8007ba4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d118      	bne.n	8007bde <f_getlabel+0x128>
			switch (fs->fs_type) {
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d004      	beq.n	8007bbe <f_getlabel+0x108>
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d105      	bne.n	8007bc4 <f_getlabel+0x10e>
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
 8007bb8:	2364      	movs	r3, #100	@ 0x64
 8007bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bbc:	e004      	b.n	8007bc8 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;
 8007bbe:	2343      	movs	r3, #67	@ 0x43
 8007bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bc2:	e001      	b.n	8007bc8 <f_getlabel+0x112>

			default:
				di = BS_VolID;
 8007bc4:	2327      	movs	r3, #39	@ 0x27
 8007bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
			}
			*vsn = ld_dword(fs->win + di);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bd0:	4413      	add	r3, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fc fdca 	bl	800476c <ld_dword>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
		}
	}

	LEAVE_FF(fs, res);
 8007bde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3758      	adds	r7, #88	@ 0x58
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007c02:	4b1f      	ldr	r3, [pc, #124]	@ (8007c80 <FATFS_LinkDriverEx+0x94>)
 8007c04:	7a5b      	ldrb	r3, [r3, #9]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d131      	bne.n	8007c70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c80 <FATFS_LinkDriverEx+0x94>)
 8007c0e:	7a5b      	ldrb	r3, [r3, #9]
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	4b1a      	ldr	r3, [pc, #104]	@ (8007c80 <FATFS_LinkDriverEx+0x94>)
 8007c16:	2100      	movs	r1, #0
 8007c18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007c1a:	4b19      	ldr	r3, [pc, #100]	@ (8007c80 <FATFS_LinkDriverEx+0x94>)
 8007c1c:	7a5b      	ldrb	r3, [r3, #9]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	4a17      	ldr	r2, [pc, #92]	@ (8007c80 <FATFS_LinkDriverEx+0x94>)
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007c2a:	4b15      	ldr	r3, [pc, #84]	@ (8007c80 <FATFS_LinkDriverEx+0x94>)
 8007c2c:	7a5b      	ldrb	r3, [r3, #9]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	4b13      	ldr	r3, [pc, #76]	@ (8007c80 <FATFS_LinkDriverEx+0x94>)
 8007c34:	4413      	add	r3, r2
 8007c36:	79fa      	ldrb	r2, [r7, #7]
 8007c38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007c3a:	4b11      	ldr	r3, [pc, #68]	@ (8007c80 <FATFS_LinkDriverEx+0x94>)
 8007c3c:	7a5b      	ldrb	r3, [r3, #9]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	b2d1      	uxtb	r1, r2
 8007c44:	4a0e      	ldr	r2, [pc, #56]	@ (8007c80 <FATFS_LinkDriverEx+0x94>)
 8007c46:	7251      	strb	r1, [r2, #9]
 8007c48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007c4a:	7dbb      	ldrb	r3, [r7, #22]
 8007c4c:	3330      	adds	r3, #48	@ 0x30
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	3301      	adds	r3, #1
 8007c58:	223a      	movs	r2, #58	@ 0x3a
 8007c5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	3302      	adds	r3, #2
 8007c60:	222f      	movs	r2, #47	@ 0x2f
 8007c62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	3303      	adds	r3, #3
 8007c68:	2200      	movs	r2, #0
 8007c6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20006b0c 	.word	0x20006b0c

08007c84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007c8e:	2200      	movs	r2, #0
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff ffaa 	bl	8007bec <FATFS_LinkDriverEx>
 8007c98:	4603      	mov	r3, r0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	6039      	str	r1, [r7, #0]
 8007cae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cb4:	d802      	bhi.n	8007cbc <ff_convert+0x18>
		c = chr;
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	81fb      	strh	r3, [r7, #14]
 8007cba:	e025      	b.n	8007d08 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00b      	beq.n	8007cda <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	2bff      	cmp	r3, #255	@ 0xff
 8007cc6:	d805      	bhi.n	8007cd4 <ff_convert+0x30>
 8007cc8:	88fb      	ldrh	r3, [r7, #6]
 8007cca:	3b80      	subs	r3, #128	@ 0x80
 8007ccc:	4a12      	ldr	r2, [pc, #72]	@ (8007d18 <ff_convert+0x74>)
 8007cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd2:	e000      	b.n	8007cd6 <ff_convert+0x32>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	81fb      	strh	r3, [r7, #14]
 8007cd8:	e016      	b.n	8007d08 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007cda:	2300      	movs	r3, #0
 8007cdc:	81fb      	strh	r3, [r7, #14]
 8007cde:	e009      	b.n	8007cf4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007ce0:	89fb      	ldrh	r3, [r7, #14]
 8007ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8007d18 <ff_convert+0x74>)
 8007ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ce8:	88fa      	ldrh	r2, [r7, #6]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d006      	beq.n	8007cfc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007cee:	89fb      	ldrh	r3, [r7, #14]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	81fb      	strh	r3, [r7, #14]
 8007cf4:	89fb      	ldrh	r3, [r7, #14]
 8007cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cf8:	d9f2      	bls.n	8007ce0 <ff_convert+0x3c>
 8007cfa:	e000      	b.n	8007cfe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007cfc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007cfe:	89fb      	ldrh	r3, [r7, #14]
 8007d00:	3380      	adds	r3, #128	@ 0x80
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007d08:	89fb      	ldrh	r3, [r7, #14]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	080093c4 	.word	0x080093c4

08007d1c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d2c:	d201      	bcs.n	8007d32 <ff_wtoupper+0x16>
 8007d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e28 <ff_wtoupper+0x10c>)
 8007d30:	e000      	b.n	8007d34 <ff_wtoupper+0x18>
 8007d32:	4b3e      	ldr	r3, [pc, #248]	@ (8007e2c <ff_wtoupper+0x110>)
 8007d34:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	1c9a      	adds	r2, r3, #2
 8007d3a:	617a      	str	r2, [r7, #20]
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007d40:	8a7b      	ldrh	r3, [r7, #18]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d068      	beq.n	8007e18 <ff_wtoupper+0xfc>
 8007d46:	88fa      	ldrh	r2, [r7, #6]
 8007d48:	8a7b      	ldrh	r3, [r7, #18]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d364      	bcc.n	8007e18 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	1c9a      	adds	r2, r3, #2
 8007d52:	617a      	str	r2, [r7, #20]
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	823b      	strh	r3, [r7, #16]
 8007d58:	8a3b      	ldrh	r3, [r7, #16]
 8007d5a:	0a1b      	lsrs	r3, r3, #8
 8007d5c:	81fb      	strh	r3, [r7, #14]
 8007d5e:	8a3b      	ldrh	r3, [r7, #16]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007d64:	88fa      	ldrh	r2, [r7, #6]
 8007d66:	8a79      	ldrh	r1, [r7, #18]
 8007d68:	8a3b      	ldrh	r3, [r7, #16]
 8007d6a:	440b      	add	r3, r1
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	da49      	bge.n	8007e04 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007d70:	89fb      	ldrh	r3, [r7, #14]
 8007d72:	2b08      	cmp	r3, #8
 8007d74:	d84f      	bhi.n	8007e16 <ff_wtoupper+0xfa>
 8007d76:	a201      	add	r2, pc, #4	@ (adr r2, 8007d7c <ff_wtoupper+0x60>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007da1 	.word	0x08007da1
 8007d80:	08007db3 	.word	0x08007db3
 8007d84:	08007dc9 	.word	0x08007dc9
 8007d88:	08007dd1 	.word	0x08007dd1
 8007d8c:	08007dd9 	.word	0x08007dd9
 8007d90:	08007de1 	.word	0x08007de1
 8007d94:	08007de9 	.word	0x08007de9
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007df9 	.word	0x08007df9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	8a7b      	ldrh	r3, [r7, #18]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	80fb      	strh	r3, [r7, #6]
 8007db0:	e027      	b.n	8007e02 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007db2:	88fa      	ldrh	r2, [r7, #6]
 8007db4:	8a7b      	ldrh	r3, [r7, #18]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	80fb      	strh	r3, [r7, #6]
 8007dc6:	e01c      	b.n	8007e02 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007dc8:	88fb      	ldrh	r3, [r7, #6]
 8007dca:	3b10      	subs	r3, #16
 8007dcc:	80fb      	strh	r3, [r7, #6]
 8007dce:	e018      	b.n	8007e02 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007dd0:	88fb      	ldrh	r3, [r7, #6]
 8007dd2:	3b20      	subs	r3, #32
 8007dd4:	80fb      	strh	r3, [r7, #6]
 8007dd6:	e014      	b.n	8007e02 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	3b30      	subs	r3, #48	@ 0x30
 8007ddc:	80fb      	strh	r3, [r7, #6]
 8007dde:	e010      	b.n	8007e02 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	3b1a      	subs	r3, #26
 8007de4:	80fb      	strh	r3, [r7, #6]
 8007de6:	e00c      	b.n	8007e02 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	3308      	adds	r3, #8
 8007dec:	80fb      	strh	r3, [r7, #6]
 8007dee:	e008      	b.n	8007e02 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007df0:	88fb      	ldrh	r3, [r7, #6]
 8007df2:	3b50      	subs	r3, #80	@ 0x50
 8007df4:	80fb      	strh	r3, [r7, #6]
 8007df6:	e004      	b.n	8007e02 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007df8:	88fb      	ldrh	r3, [r7, #6]
 8007dfa:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007dfe:	80fb      	strh	r3, [r7, #6]
 8007e00:	bf00      	nop
			}
			break;
 8007e02:	e008      	b.n	8007e16 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007e04:	89fb      	ldrh	r3, [r7, #14]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d195      	bne.n	8007d36 <ff_wtoupper+0x1a>
 8007e0a:	8a3b      	ldrh	r3, [r7, #16]
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4413      	add	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007e14:	e78f      	b.n	8007d36 <ff_wtoupper+0x1a>
			break;
 8007e16:	bf00      	nop
	}

	return chr;
 8007e18:	88fb      	ldrh	r3, [r7, #6]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	080094c4 	.word	0x080094c4
 8007e2c:	080096b8 	.word	0x080096b8

08007e30 <__itoa>:
 8007e30:	1e93      	subs	r3, r2, #2
 8007e32:	2b22      	cmp	r3, #34	@ 0x22
 8007e34:	b510      	push	{r4, lr}
 8007e36:	460c      	mov	r4, r1
 8007e38:	d904      	bls.n	8007e44 <__itoa+0x14>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	700b      	strb	r3, [r1, #0]
 8007e3e:	461c      	mov	r4, r3
 8007e40:	4620      	mov	r0, r4
 8007e42:	bd10      	pop	{r4, pc}
 8007e44:	2a0a      	cmp	r2, #10
 8007e46:	d109      	bne.n	8007e5c <__itoa+0x2c>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	da07      	bge.n	8007e5c <__itoa+0x2c>
 8007e4c:	232d      	movs	r3, #45	@ 0x2d
 8007e4e:	700b      	strb	r3, [r1, #0]
 8007e50:	4240      	negs	r0, r0
 8007e52:	2101      	movs	r1, #1
 8007e54:	4421      	add	r1, r4
 8007e56:	f000 f987 	bl	8008168 <__utoa>
 8007e5a:	e7f1      	b.n	8007e40 <__itoa+0x10>
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	e7f9      	b.n	8007e54 <__itoa+0x24>

08007e60 <itoa>:
 8007e60:	f7ff bfe6 	b.w	8007e30 <__itoa>

08007e64 <malloc>:
 8007e64:	4b02      	ldr	r3, [pc, #8]	@ (8007e70 <malloc+0xc>)
 8007e66:	4601      	mov	r1, r0
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	f000 b82d 	b.w	8007ec8 <_malloc_r>
 8007e6e:	bf00      	nop
 8007e70:	20000030 	.word	0x20000030

08007e74 <free>:
 8007e74:	4b02      	ldr	r3, [pc, #8]	@ (8007e80 <free+0xc>)
 8007e76:	4601      	mov	r1, r0
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	f000 baa7 	b.w	80083cc <_free_r>
 8007e7e:	bf00      	nop
 8007e80:	20000030 	.word	0x20000030

08007e84 <sbrk_aligned>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4e0f      	ldr	r6, [pc, #60]	@ (8007ec4 <sbrk_aligned+0x40>)
 8007e88:	460c      	mov	r4, r1
 8007e8a:	6831      	ldr	r1, [r6, #0]
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	b911      	cbnz	r1, 8007e96 <sbrk_aligned+0x12>
 8007e90:	f000 fa56 	bl	8008340 <_sbrk_r>
 8007e94:	6030      	str	r0, [r6, #0]
 8007e96:	4621      	mov	r1, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f000 fa51 	bl	8008340 <_sbrk_r>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d103      	bne.n	8007eaa <sbrk_aligned+0x26>
 8007ea2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
 8007eaa:	1cc4      	adds	r4, r0, #3
 8007eac:	f024 0403 	bic.w	r4, r4, #3
 8007eb0:	42a0      	cmp	r0, r4
 8007eb2:	d0f8      	beq.n	8007ea6 <sbrk_aligned+0x22>
 8007eb4:	1a21      	subs	r1, r4, r0
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 fa42 	bl	8008340 <_sbrk_r>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d1f2      	bne.n	8007ea6 <sbrk_aligned+0x22>
 8007ec0:	e7ef      	b.n	8007ea2 <sbrk_aligned+0x1e>
 8007ec2:	bf00      	nop
 8007ec4:	20006b18 	.word	0x20006b18

08007ec8 <_malloc_r>:
 8007ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ecc:	1ccd      	adds	r5, r1, #3
 8007ece:	f025 0503 	bic.w	r5, r5, #3
 8007ed2:	3508      	adds	r5, #8
 8007ed4:	2d0c      	cmp	r5, #12
 8007ed6:	bf38      	it	cc
 8007ed8:	250c      	movcc	r5, #12
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	4606      	mov	r6, r0
 8007ede:	db01      	blt.n	8007ee4 <_malloc_r+0x1c>
 8007ee0:	42a9      	cmp	r1, r5
 8007ee2:	d904      	bls.n	8007eee <_malloc_r+0x26>
 8007ee4:	230c      	movs	r3, #12
 8007ee6:	6033      	str	r3, [r6, #0]
 8007ee8:	2000      	movs	r0, #0
 8007eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fc4 <_malloc_r+0xfc>
 8007ef2:	f000 f869 	bl	8007fc8 <__malloc_lock>
 8007ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8007efa:	461c      	mov	r4, r3
 8007efc:	bb44      	cbnz	r4, 8007f50 <_malloc_r+0x88>
 8007efe:	4629      	mov	r1, r5
 8007f00:	4630      	mov	r0, r6
 8007f02:	f7ff ffbf 	bl	8007e84 <sbrk_aligned>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	4604      	mov	r4, r0
 8007f0a:	d158      	bne.n	8007fbe <_malloc_r+0xf6>
 8007f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f10:	4627      	mov	r7, r4
 8007f12:	2f00      	cmp	r7, #0
 8007f14:	d143      	bne.n	8007f9e <_malloc_r+0xd6>
 8007f16:	2c00      	cmp	r4, #0
 8007f18:	d04b      	beq.n	8007fb2 <_malloc_r+0xea>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	4630      	mov	r0, r6
 8007f20:	eb04 0903 	add.w	r9, r4, r3
 8007f24:	f000 fa0c 	bl	8008340 <_sbrk_r>
 8007f28:	4581      	cmp	r9, r0
 8007f2a:	d142      	bne.n	8007fb2 <_malloc_r+0xea>
 8007f2c:	6821      	ldr	r1, [r4, #0]
 8007f2e:	1a6d      	subs	r5, r5, r1
 8007f30:	4629      	mov	r1, r5
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff ffa6 	bl	8007e84 <sbrk_aligned>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d03a      	beq.n	8007fb2 <_malloc_r+0xea>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	442b      	add	r3, r5
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	f8d8 3000 	ldr.w	r3, [r8]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	bb62      	cbnz	r2, 8007fa4 <_malloc_r+0xdc>
 8007f4a:	f8c8 7000 	str.w	r7, [r8]
 8007f4e:	e00f      	b.n	8007f70 <_malloc_r+0xa8>
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	1b52      	subs	r2, r2, r5
 8007f54:	d420      	bmi.n	8007f98 <_malloc_r+0xd0>
 8007f56:	2a0b      	cmp	r2, #11
 8007f58:	d917      	bls.n	8007f8a <_malloc_r+0xc2>
 8007f5a:	1961      	adds	r1, r4, r5
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	6025      	str	r5, [r4, #0]
 8007f60:	bf18      	it	ne
 8007f62:	6059      	strne	r1, [r3, #4]
 8007f64:	6863      	ldr	r3, [r4, #4]
 8007f66:	bf08      	it	eq
 8007f68:	f8c8 1000 	streq.w	r1, [r8]
 8007f6c:	5162      	str	r2, [r4, r5]
 8007f6e:	604b      	str	r3, [r1, #4]
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 f82f 	bl	8007fd4 <__malloc_unlock>
 8007f76:	f104 000b 	add.w	r0, r4, #11
 8007f7a:	1d23      	adds	r3, r4, #4
 8007f7c:	f020 0007 	bic.w	r0, r0, #7
 8007f80:	1ac2      	subs	r2, r0, r3
 8007f82:	bf1c      	itt	ne
 8007f84:	1a1b      	subne	r3, r3, r0
 8007f86:	50a3      	strne	r3, [r4, r2]
 8007f88:	e7af      	b.n	8007eea <_malloc_r+0x22>
 8007f8a:	6862      	ldr	r2, [r4, #4]
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	bf0c      	ite	eq
 8007f90:	f8c8 2000 	streq.w	r2, [r8]
 8007f94:	605a      	strne	r2, [r3, #4]
 8007f96:	e7eb      	b.n	8007f70 <_malloc_r+0xa8>
 8007f98:	4623      	mov	r3, r4
 8007f9a:	6864      	ldr	r4, [r4, #4]
 8007f9c:	e7ae      	b.n	8007efc <_malloc_r+0x34>
 8007f9e:	463c      	mov	r4, r7
 8007fa0:	687f      	ldr	r7, [r7, #4]
 8007fa2:	e7b6      	b.n	8007f12 <_malloc_r+0x4a>
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d1fb      	bne.n	8007fa4 <_malloc_r+0xdc>
 8007fac:	2300      	movs	r3, #0
 8007fae:	6053      	str	r3, [r2, #4]
 8007fb0:	e7de      	b.n	8007f70 <_malloc_r+0xa8>
 8007fb2:	230c      	movs	r3, #12
 8007fb4:	6033      	str	r3, [r6, #0]
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f000 f80c 	bl	8007fd4 <__malloc_unlock>
 8007fbc:	e794      	b.n	8007ee8 <_malloc_r+0x20>
 8007fbe:	6005      	str	r5, [r0, #0]
 8007fc0:	e7d6      	b.n	8007f70 <_malloc_r+0xa8>
 8007fc2:	bf00      	nop
 8007fc4:	20006b1c 	.word	0x20006b1c

08007fc8 <__malloc_lock>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	@ (8007fd0 <__malloc_lock+0x8>)
 8007fca:	f000 b9f4 	b.w	80083b6 <__retarget_lock_acquire_recursive>
 8007fce:	bf00      	nop
 8007fd0:	20006c5c 	.word	0x20006c5c

08007fd4 <__malloc_unlock>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	@ (8007fdc <__malloc_unlock+0x8>)
 8007fd6:	f000 b9ef 	b.w	80083b8 <__retarget_lock_release_recursive>
 8007fda:	bf00      	nop
 8007fdc:	20006c5c 	.word	0x20006c5c

08007fe0 <siprintf>:
 8007fe0:	b40e      	push	{r1, r2, r3}
 8007fe2:	b500      	push	{lr}
 8007fe4:	b09c      	sub	sp, #112	@ 0x70
 8007fe6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007fe8:	9002      	str	r0, [sp, #8]
 8007fea:	9006      	str	r0, [sp, #24]
 8007fec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ff0:	4809      	ldr	r0, [pc, #36]	@ (8008018 <siprintf+0x38>)
 8007ff2:	9107      	str	r1, [sp, #28]
 8007ff4:	9104      	str	r1, [sp, #16]
 8007ff6:	4909      	ldr	r1, [pc, #36]	@ (800801c <siprintf+0x3c>)
 8007ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffc:	9105      	str	r1, [sp, #20]
 8007ffe:	6800      	ldr	r0, [r0, #0]
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	a902      	add	r1, sp, #8
 8008004:	f000 fa88 	bl	8008518 <_svfiprintf_r>
 8008008:	9b02      	ldr	r3, [sp, #8]
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	b01c      	add	sp, #112	@ 0x70
 8008010:	f85d eb04 	ldr.w	lr, [sp], #4
 8008014:	b003      	add	sp, #12
 8008016:	4770      	bx	lr
 8008018:	20000030 	.word	0x20000030
 800801c:	ffff0208 	.word	0xffff0208

08008020 <std>:
 8008020:	2300      	movs	r3, #0
 8008022:	b510      	push	{r4, lr}
 8008024:	4604      	mov	r4, r0
 8008026:	e9c0 3300 	strd	r3, r3, [r0]
 800802a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800802e:	6083      	str	r3, [r0, #8]
 8008030:	8181      	strh	r1, [r0, #12]
 8008032:	6643      	str	r3, [r0, #100]	@ 0x64
 8008034:	81c2      	strh	r2, [r0, #14]
 8008036:	6183      	str	r3, [r0, #24]
 8008038:	4619      	mov	r1, r3
 800803a:	2208      	movs	r2, #8
 800803c:	305c      	adds	r0, #92	@ 0x5c
 800803e:	f000 f976 	bl	800832e <memset>
 8008042:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <std+0x58>)
 8008044:	6263      	str	r3, [r4, #36]	@ 0x24
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <std+0x5c>)
 8008048:	62a3      	str	r3, [r4, #40]	@ 0x28
 800804a:	4b0d      	ldr	r3, [pc, #52]	@ (8008080 <std+0x60>)
 800804c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800804e:	4b0d      	ldr	r3, [pc, #52]	@ (8008084 <std+0x64>)
 8008050:	6323      	str	r3, [r4, #48]	@ 0x30
 8008052:	4b0d      	ldr	r3, [pc, #52]	@ (8008088 <std+0x68>)
 8008054:	6224      	str	r4, [r4, #32]
 8008056:	429c      	cmp	r4, r3
 8008058:	d006      	beq.n	8008068 <std+0x48>
 800805a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800805e:	4294      	cmp	r4, r2
 8008060:	d002      	beq.n	8008068 <std+0x48>
 8008062:	33d0      	adds	r3, #208	@ 0xd0
 8008064:	429c      	cmp	r4, r3
 8008066:	d105      	bne.n	8008074 <std+0x54>
 8008068:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800806c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008070:	f000 b9a0 	b.w	80083b4 <__retarget_lock_init_recursive>
 8008074:	bd10      	pop	{r4, pc}
 8008076:	bf00      	nop
 8008078:	08008e09 	.word	0x08008e09
 800807c:	08008e2b 	.word	0x08008e2b
 8008080:	08008e63 	.word	0x08008e63
 8008084:	08008e87 	.word	0x08008e87
 8008088:	20006b20 	.word	0x20006b20

0800808c <stdio_exit_handler>:
 800808c:	4a02      	ldr	r2, [pc, #8]	@ (8008098 <stdio_exit_handler+0xc>)
 800808e:	4903      	ldr	r1, [pc, #12]	@ (800809c <stdio_exit_handler+0x10>)
 8008090:	4803      	ldr	r0, [pc, #12]	@ (80080a0 <stdio_exit_handler+0x14>)
 8008092:	f000 b8ab 	b.w	80081ec <_fwalk_sglue>
 8008096:	bf00      	nop
 8008098:	20000024 	.word	0x20000024
 800809c:	08008db9 	.word	0x08008db9
 80080a0:	20000034 	.word	0x20000034

080080a4 <cleanup_stdio>:
 80080a4:	6841      	ldr	r1, [r0, #4]
 80080a6:	4b0c      	ldr	r3, [pc, #48]	@ (80080d8 <cleanup_stdio+0x34>)
 80080a8:	4299      	cmp	r1, r3
 80080aa:	b510      	push	{r4, lr}
 80080ac:	4604      	mov	r4, r0
 80080ae:	d001      	beq.n	80080b4 <cleanup_stdio+0x10>
 80080b0:	f000 fe82 	bl	8008db8 <_fflush_r>
 80080b4:	68a1      	ldr	r1, [r4, #8]
 80080b6:	4b09      	ldr	r3, [pc, #36]	@ (80080dc <cleanup_stdio+0x38>)
 80080b8:	4299      	cmp	r1, r3
 80080ba:	d002      	beq.n	80080c2 <cleanup_stdio+0x1e>
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fe7b 	bl	8008db8 <_fflush_r>
 80080c2:	68e1      	ldr	r1, [r4, #12]
 80080c4:	4b06      	ldr	r3, [pc, #24]	@ (80080e0 <cleanup_stdio+0x3c>)
 80080c6:	4299      	cmp	r1, r3
 80080c8:	d004      	beq.n	80080d4 <cleanup_stdio+0x30>
 80080ca:	4620      	mov	r0, r4
 80080cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d0:	f000 be72 	b.w	8008db8 <_fflush_r>
 80080d4:	bd10      	pop	{r4, pc}
 80080d6:	bf00      	nop
 80080d8:	20006b20 	.word	0x20006b20
 80080dc:	20006b88 	.word	0x20006b88
 80080e0:	20006bf0 	.word	0x20006bf0

080080e4 <global_stdio_init.part.0>:
 80080e4:	b510      	push	{r4, lr}
 80080e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <global_stdio_init.part.0+0x30>)
 80080e8:	4c0b      	ldr	r4, [pc, #44]	@ (8008118 <global_stdio_init.part.0+0x34>)
 80080ea:	4a0c      	ldr	r2, [pc, #48]	@ (800811c <global_stdio_init.part.0+0x38>)
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	4620      	mov	r0, r4
 80080f0:	2200      	movs	r2, #0
 80080f2:	2104      	movs	r1, #4
 80080f4:	f7ff ff94 	bl	8008020 <std>
 80080f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080fc:	2201      	movs	r2, #1
 80080fe:	2109      	movs	r1, #9
 8008100:	f7ff ff8e 	bl	8008020 <std>
 8008104:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008108:	2202      	movs	r2, #2
 800810a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810e:	2112      	movs	r1, #18
 8008110:	f7ff bf86 	b.w	8008020 <std>
 8008114:	20006c58 	.word	0x20006c58
 8008118:	20006b20 	.word	0x20006b20
 800811c:	0800808d 	.word	0x0800808d

08008120 <__sfp_lock_acquire>:
 8008120:	4801      	ldr	r0, [pc, #4]	@ (8008128 <__sfp_lock_acquire+0x8>)
 8008122:	f000 b948 	b.w	80083b6 <__retarget_lock_acquire_recursive>
 8008126:	bf00      	nop
 8008128:	20006c5d 	.word	0x20006c5d

0800812c <__sfp_lock_release>:
 800812c:	4801      	ldr	r0, [pc, #4]	@ (8008134 <__sfp_lock_release+0x8>)
 800812e:	f000 b943 	b.w	80083b8 <__retarget_lock_release_recursive>
 8008132:	bf00      	nop
 8008134:	20006c5d 	.word	0x20006c5d

08008138 <__sinit>:
 8008138:	b510      	push	{r4, lr}
 800813a:	4604      	mov	r4, r0
 800813c:	f7ff fff0 	bl	8008120 <__sfp_lock_acquire>
 8008140:	6a23      	ldr	r3, [r4, #32]
 8008142:	b11b      	cbz	r3, 800814c <__sinit+0x14>
 8008144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008148:	f7ff bff0 	b.w	800812c <__sfp_lock_release>
 800814c:	4b04      	ldr	r3, [pc, #16]	@ (8008160 <__sinit+0x28>)
 800814e:	6223      	str	r3, [r4, #32]
 8008150:	4b04      	ldr	r3, [pc, #16]	@ (8008164 <__sinit+0x2c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1f5      	bne.n	8008144 <__sinit+0xc>
 8008158:	f7ff ffc4 	bl	80080e4 <global_stdio_init.part.0>
 800815c:	e7f2      	b.n	8008144 <__sinit+0xc>
 800815e:	bf00      	nop
 8008160:	080080a5 	.word	0x080080a5
 8008164:	20006c58 	.word	0x20006c58

08008168 <__utoa>:
 8008168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816a:	4c1f      	ldr	r4, [pc, #124]	@ (80081e8 <__utoa+0x80>)
 800816c:	b08b      	sub	sp, #44	@ 0x2c
 800816e:	4605      	mov	r5, r0
 8008170:	460b      	mov	r3, r1
 8008172:	466e      	mov	r6, sp
 8008174:	f104 0c20 	add.w	ip, r4, #32
 8008178:	6820      	ldr	r0, [r4, #0]
 800817a:	6861      	ldr	r1, [r4, #4]
 800817c:	4637      	mov	r7, r6
 800817e:	c703      	stmia	r7!, {r0, r1}
 8008180:	3408      	adds	r4, #8
 8008182:	4564      	cmp	r4, ip
 8008184:	463e      	mov	r6, r7
 8008186:	d1f7      	bne.n	8008178 <__utoa+0x10>
 8008188:	7921      	ldrb	r1, [r4, #4]
 800818a:	7139      	strb	r1, [r7, #4]
 800818c:	1e91      	subs	r1, r2, #2
 800818e:	6820      	ldr	r0, [r4, #0]
 8008190:	6038      	str	r0, [r7, #0]
 8008192:	2922      	cmp	r1, #34	@ 0x22
 8008194:	f04f 0100 	mov.w	r1, #0
 8008198:	d904      	bls.n	80081a4 <__utoa+0x3c>
 800819a:	7019      	strb	r1, [r3, #0]
 800819c:	460b      	mov	r3, r1
 800819e:	4618      	mov	r0, r3
 80081a0:	b00b      	add	sp, #44	@ 0x2c
 80081a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a4:	1e58      	subs	r0, r3, #1
 80081a6:	4684      	mov	ip, r0
 80081a8:	fbb5 f7f2 	udiv	r7, r5, r2
 80081ac:	fb02 5617 	mls	r6, r2, r7, r5
 80081b0:	3628      	adds	r6, #40	@ 0x28
 80081b2:	446e      	add	r6, sp
 80081b4:	460c      	mov	r4, r1
 80081b6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80081ba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80081be:	462e      	mov	r6, r5
 80081c0:	42b2      	cmp	r2, r6
 80081c2:	f101 0101 	add.w	r1, r1, #1
 80081c6:	463d      	mov	r5, r7
 80081c8:	d9ee      	bls.n	80081a8 <__utoa+0x40>
 80081ca:	2200      	movs	r2, #0
 80081cc:	545a      	strb	r2, [r3, r1]
 80081ce:	1919      	adds	r1, r3, r4
 80081d0:	1aa5      	subs	r5, r4, r2
 80081d2:	42aa      	cmp	r2, r5
 80081d4:	dae3      	bge.n	800819e <__utoa+0x36>
 80081d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80081da:	780e      	ldrb	r6, [r1, #0]
 80081dc:	7006      	strb	r6, [r0, #0]
 80081de:	3201      	adds	r2, #1
 80081e0:	f801 5901 	strb.w	r5, [r1], #-1
 80081e4:	e7f4      	b.n	80081d0 <__utoa+0x68>
 80081e6:	bf00      	nop
 80081e8:	08009774 	.word	0x08009774

080081ec <_fwalk_sglue>:
 80081ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f0:	4607      	mov	r7, r0
 80081f2:	4688      	mov	r8, r1
 80081f4:	4614      	mov	r4, r2
 80081f6:	2600      	movs	r6, #0
 80081f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008200:	d505      	bpl.n	800820e <_fwalk_sglue+0x22>
 8008202:	6824      	ldr	r4, [r4, #0]
 8008204:	2c00      	cmp	r4, #0
 8008206:	d1f7      	bne.n	80081f8 <_fwalk_sglue+0xc>
 8008208:	4630      	mov	r0, r6
 800820a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d907      	bls.n	8008224 <_fwalk_sglue+0x38>
 8008214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008218:	3301      	adds	r3, #1
 800821a:	d003      	beq.n	8008224 <_fwalk_sglue+0x38>
 800821c:	4629      	mov	r1, r5
 800821e:	4638      	mov	r0, r7
 8008220:	47c0      	blx	r8
 8008222:	4306      	orrs	r6, r0
 8008224:	3568      	adds	r5, #104	@ 0x68
 8008226:	e7e9      	b.n	80081fc <_fwalk_sglue+0x10>

08008228 <iprintf>:
 8008228:	b40f      	push	{r0, r1, r2, r3}
 800822a:	b507      	push	{r0, r1, r2, lr}
 800822c:	4906      	ldr	r1, [pc, #24]	@ (8008248 <iprintf+0x20>)
 800822e:	ab04      	add	r3, sp, #16
 8008230:	6808      	ldr	r0, [r1, #0]
 8008232:	f853 2b04 	ldr.w	r2, [r3], #4
 8008236:	6881      	ldr	r1, [r0, #8]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	f000 fa93 	bl	8008764 <_vfiprintf_r>
 800823e:	b003      	add	sp, #12
 8008240:	f85d eb04 	ldr.w	lr, [sp], #4
 8008244:	b004      	add	sp, #16
 8008246:	4770      	bx	lr
 8008248:	20000030 	.word	0x20000030

0800824c <_puts_r>:
 800824c:	6a03      	ldr	r3, [r0, #32]
 800824e:	b570      	push	{r4, r5, r6, lr}
 8008250:	6884      	ldr	r4, [r0, #8]
 8008252:	4605      	mov	r5, r0
 8008254:	460e      	mov	r6, r1
 8008256:	b90b      	cbnz	r3, 800825c <_puts_r+0x10>
 8008258:	f7ff ff6e 	bl	8008138 <__sinit>
 800825c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800825e:	07db      	lsls	r3, r3, #31
 8008260:	d405      	bmi.n	800826e <_puts_r+0x22>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	0598      	lsls	r0, r3, #22
 8008266:	d402      	bmi.n	800826e <_puts_r+0x22>
 8008268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800826a:	f000 f8a4 	bl	80083b6 <__retarget_lock_acquire_recursive>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	0719      	lsls	r1, r3, #28
 8008272:	d502      	bpl.n	800827a <_puts_r+0x2e>
 8008274:	6923      	ldr	r3, [r4, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d135      	bne.n	80082e6 <_puts_r+0x9a>
 800827a:	4621      	mov	r1, r4
 800827c:	4628      	mov	r0, r5
 800827e:	f000 fe73 	bl	8008f68 <__swsetup_r>
 8008282:	b380      	cbz	r0, 80082e6 <_puts_r+0x9a>
 8008284:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008288:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800828a:	07da      	lsls	r2, r3, #31
 800828c:	d405      	bmi.n	800829a <_puts_r+0x4e>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	059b      	lsls	r3, r3, #22
 8008292:	d402      	bmi.n	800829a <_puts_r+0x4e>
 8008294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008296:	f000 f88f 	bl	80083b8 <__retarget_lock_release_recursive>
 800829a:	4628      	mov	r0, r5
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da04      	bge.n	80082ac <_puts_r+0x60>
 80082a2:	69a2      	ldr	r2, [r4, #24]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	dc17      	bgt.n	80082d8 <_puts_r+0x8c>
 80082a8:	290a      	cmp	r1, #10
 80082aa:	d015      	beq.n	80082d8 <_puts_r+0x8c>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	6022      	str	r2, [r4, #0]
 80082b2:	7019      	strb	r1, [r3, #0]
 80082b4:	68a3      	ldr	r3, [r4, #8]
 80082b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082ba:	3b01      	subs	r3, #1
 80082bc:	60a3      	str	r3, [r4, #8]
 80082be:	2900      	cmp	r1, #0
 80082c0:	d1ed      	bne.n	800829e <_puts_r+0x52>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	da11      	bge.n	80082ea <_puts_r+0x9e>
 80082c6:	4622      	mov	r2, r4
 80082c8:	210a      	movs	r1, #10
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 fe0d 	bl	8008eea <__swbuf_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d0d7      	beq.n	8008284 <_puts_r+0x38>
 80082d4:	250a      	movs	r5, #10
 80082d6:	e7d7      	b.n	8008288 <_puts_r+0x3c>
 80082d8:	4622      	mov	r2, r4
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 fe05 	bl	8008eea <__swbuf_r>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d1e7      	bne.n	80082b4 <_puts_r+0x68>
 80082e4:	e7ce      	b.n	8008284 <_puts_r+0x38>
 80082e6:	3e01      	subs	r6, #1
 80082e8:	e7e4      	b.n	80082b4 <_puts_r+0x68>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	220a      	movs	r2, #10
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	e7ee      	b.n	80082d4 <_puts_r+0x88>
	...

080082f8 <puts>:
 80082f8:	4b02      	ldr	r3, [pc, #8]	@ (8008304 <puts+0xc>)
 80082fa:	4601      	mov	r1, r0
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	f7ff bfa5 	b.w	800824c <_puts_r>
 8008302:	bf00      	nop
 8008304:	20000030 	.word	0x20000030

08008308 <strncpy>:
 8008308:	b510      	push	{r4, lr}
 800830a:	3901      	subs	r1, #1
 800830c:	4603      	mov	r3, r0
 800830e:	b132      	cbz	r2, 800831e <strncpy+0x16>
 8008310:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008314:	f803 4b01 	strb.w	r4, [r3], #1
 8008318:	3a01      	subs	r2, #1
 800831a:	2c00      	cmp	r4, #0
 800831c:	d1f7      	bne.n	800830e <strncpy+0x6>
 800831e:	441a      	add	r2, r3
 8008320:	2100      	movs	r1, #0
 8008322:	4293      	cmp	r3, r2
 8008324:	d100      	bne.n	8008328 <strncpy+0x20>
 8008326:	bd10      	pop	{r4, pc}
 8008328:	f803 1b01 	strb.w	r1, [r3], #1
 800832c:	e7f9      	b.n	8008322 <strncpy+0x1a>

0800832e <memset>:
 800832e:	4402      	add	r2, r0
 8008330:	4603      	mov	r3, r0
 8008332:	4293      	cmp	r3, r2
 8008334:	d100      	bne.n	8008338 <memset+0xa>
 8008336:	4770      	bx	lr
 8008338:	f803 1b01 	strb.w	r1, [r3], #1
 800833c:	e7f9      	b.n	8008332 <memset+0x4>
	...

08008340 <_sbrk_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d06      	ldr	r5, [pc, #24]	@ (800835c <_sbrk_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7f9 fb14 	bl	8001978 <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_sbrk_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_sbrk_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20006c60 	.word	0x20006c60

08008360 <__errno>:
 8008360:	4b01      	ldr	r3, [pc, #4]	@ (8008368 <__errno+0x8>)
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	20000030 	.word	0x20000030

0800836c <__libc_init_array>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4d0d      	ldr	r5, [pc, #52]	@ (80083a4 <__libc_init_array+0x38>)
 8008370:	4c0d      	ldr	r4, [pc, #52]	@ (80083a8 <__libc_init_array+0x3c>)
 8008372:	1b64      	subs	r4, r4, r5
 8008374:	10a4      	asrs	r4, r4, #2
 8008376:	2600      	movs	r6, #0
 8008378:	42a6      	cmp	r6, r4
 800837a:	d109      	bne.n	8008390 <__libc_init_array+0x24>
 800837c:	4d0b      	ldr	r5, [pc, #44]	@ (80083ac <__libc_init_array+0x40>)
 800837e:	4c0c      	ldr	r4, [pc, #48]	@ (80083b0 <__libc_init_array+0x44>)
 8008380:	f000 ff42 	bl	8009208 <_init>
 8008384:	1b64      	subs	r4, r4, r5
 8008386:	10a4      	asrs	r4, r4, #2
 8008388:	2600      	movs	r6, #0
 800838a:	42a6      	cmp	r6, r4
 800838c:	d105      	bne.n	800839a <__libc_init_array+0x2e>
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	f855 3b04 	ldr.w	r3, [r5], #4
 8008394:	4798      	blx	r3
 8008396:	3601      	adds	r6, #1
 8008398:	e7ee      	b.n	8008378 <__libc_init_array+0xc>
 800839a:	f855 3b04 	ldr.w	r3, [r5], #4
 800839e:	4798      	blx	r3
 80083a0:	3601      	adds	r6, #1
 80083a2:	e7f2      	b.n	800838a <__libc_init_array+0x1e>
 80083a4:	080097d4 	.word	0x080097d4
 80083a8:	080097d4 	.word	0x080097d4
 80083ac:	080097d4 	.word	0x080097d4
 80083b0:	080097d8 	.word	0x080097d8

080083b4 <__retarget_lock_init_recursive>:
 80083b4:	4770      	bx	lr

080083b6 <__retarget_lock_acquire_recursive>:
 80083b6:	4770      	bx	lr

080083b8 <__retarget_lock_release_recursive>:
 80083b8:	4770      	bx	lr

080083ba <strcpy>:
 80083ba:	4603      	mov	r3, r0
 80083bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083c0:	f803 2b01 	strb.w	r2, [r3], #1
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	d1f9      	bne.n	80083bc <strcpy+0x2>
 80083c8:	4770      	bx	lr
	...

080083cc <_free_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4605      	mov	r5, r0
 80083d0:	2900      	cmp	r1, #0
 80083d2:	d041      	beq.n	8008458 <_free_r+0x8c>
 80083d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083d8:	1f0c      	subs	r4, r1, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bfb8      	it	lt
 80083de:	18e4      	addlt	r4, r4, r3
 80083e0:	f7ff fdf2 	bl	8007fc8 <__malloc_lock>
 80083e4:	4a1d      	ldr	r2, [pc, #116]	@ (800845c <_free_r+0x90>)
 80083e6:	6813      	ldr	r3, [r2, #0]
 80083e8:	b933      	cbnz	r3, 80083f8 <_free_r+0x2c>
 80083ea:	6063      	str	r3, [r4, #4]
 80083ec:	6014      	str	r4, [r2, #0]
 80083ee:	4628      	mov	r0, r5
 80083f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083f4:	f7ff bdee 	b.w	8007fd4 <__malloc_unlock>
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	d908      	bls.n	800840e <_free_r+0x42>
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	1821      	adds	r1, r4, r0
 8008400:	428b      	cmp	r3, r1
 8008402:	bf01      	itttt	eq
 8008404:	6819      	ldreq	r1, [r3, #0]
 8008406:	685b      	ldreq	r3, [r3, #4]
 8008408:	1809      	addeq	r1, r1, r0
 800840a:	6021      	streq	r1, [r4, #0]
 800840c:	e7ed      	b.n	80083ea <_free_r+0x1e>
 800840e:	461a      	mov	r2, r3
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	b10b      	cbz	r3, 8008418 <_free_r+0x4c>
 8008414:	42a3      	cmp	r3, r4
 8008416:	d9fa      	bls.n	800840e <_free_r+0x42>
 8008418:	6811      	ldr	r1, [r2, #0]
 800841a:	1850      	adds	r0, r2, r1
 800841c:	42a0      	cmp	r0, r4
 800841e:	d10b      	bne.n	8008438 <_free_r+0x6c>
 8008420:	6820      	ldr	r0, [r4, #0]
 8008422:	4401      	add	r1, r0
 8008424:	1850      	adds	r0, r2, r1
 8008426:	4283      	cmp	r3, r0
 8008428:	6011      	str	r1, [r2, #0]
 800842a:	d1e0      	bne.n	80083ee <_free_r+0x22>
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	6053      	str	r3, [r2, #4]
 8008432:	4408      	add	r0, r1
 8008434:	6010      	str	r0, [r2, #0]
 8008436:	e7da      	b.n	80083ee <_free_r+0x22>
 8008438:	d902      	bls.n	8008440 <_free_r+0x74>
 800843a:	230c      	movs	r3, #12
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	e7d6      	b.n	80083ee <_free_r+0x22>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	1821      	adds	r1, r4, r0
 8008444:	428b      	cmp	r3, r1
 8008446:	bf04      	itt	eq
 8008448:	6819      	ldreq	r1, [r3, #0]
 800844a:	685b      	ldreq	r3, [r3, #4]
 800844c:	6063      	str	r3, [r4, #4]
 800844e:	bf04      	itt	eq
 8008450:	1809      	addeq	r1, r1, r0
 8008452:	6021      	streq	r1, [r4, #0]
 8008454:	6054      	str	r4, [r2, #4]
 8008456:	e7ca      	b.n	80083ee <_free_r+0x22>
 8008458:	bd38      	pop	{r3, r4, r5, pc}
 800845a:	bf00      	nop
 800845c:	20006b1c 	.word	0x20006b1c

08008460 <__ssputs_r>:
 8008460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008464:	688e      	ldr	r6, [r1, #8]
 8008466:	461f      	mov	r7, r3
 8008468:	42be      	cmp	r6, r7
 800846a:	680b      	ldr	r3, [r1, #0]
 800846c:	4682      	mov	sl, r0
 800846e:	460c      	mov	r4, r1
 8008470:	4690      	mov	r8, r2
 8008472:	d82d      	bhi.n	80084d0 <__ssputs_r+0x70>
 8008474:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008478:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800847c:	d026      	beq.n	80084cc <__ssputs_r+0x6c>
 800847e:	6965      	ldr	r5, [r4, #20]
 8008480:	6909      	ldr	r1, [r1, #16]
 8008482:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008486:	eba3 0901 	sub.w	r9, r3, r1
 800848a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800848e:	1c7b      	adds	r3, r7, #1
 8008490:	444b      	add	r3, r9
 8008492:	106d      	asrs	r5, r5, #1
 8008494:	429d      	cmp	r5, r3
 8008496:	bf38      	it	cc
 8008498:	461d      	movcc	r5, r3
 800849a:	0553      	lsls	r3, r2, #21
 800849c:	d527      	bpl.n	80084ee <__ssputs_r+0x8e>
 800849e:	4629      	mov	r1, r5
 80084a0:	f7ff fd12 	bl	8007ec8 <_malloc_r>
 80084a4:	4606      	mov	r6, r0
 80084a6:	b360      	cbz	r0, 8008502 <__ssputs_r+0xa2>
 80084a8:	6921      	ldr	r1, [r4, #16]
 80084aa:	464a      	mov	r2, r9
 80084ac:	f000 fe96 	bl	80091dc <memcpy>
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ba:	81a3      	strh	r3, [r4, #12]
 80084bc:	6126      	str	r6, [r4, #16]
 80084be:	6165      	str	r5, [r4, #20]
 80084c0:	444e      	add	r6, r9
 80084c2:	eba5 0509 	sub.w	r5, r5, r9
 80084c6:	6026      	str	r6, [r4, #0]
 80084c8:	60a5      	str	r5, [r4, #8]
 80084ca:	463e      	mov	r6, r7
 80084cc:	42be      	cmp	r6, r7
 80084ce:	d900      	bls.n	80084d2 <__ssputs_r+0x72>
 80084d0:	463e      	mov	r6, r7
 80084d2:	6820      	ldr	r0, [r4, #0]
 80084d4:	4632      	mov	r2, r6
 80084d6:	4641      	mov	r1, r8
 80084d8:	f000 fdfe 	bl	80090d8 <memmove>
 80084dc:	68a3      	ldr	r3, [r4, #8]
 80084de:	1b9b      	subs	r3, r3, r6
 80084e0:	60a3      	str	r3, [r4, #8]
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	4433      	add	r3, r6
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	2000      	movs	r0, #0
 80084ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ee:	462a      	mov	r2, r5
 80084f0:	f000 fccd 	bl	8008e8e <_realloc_r>
 80084f4:	4606      	mov	r6, r0
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d1e0      	bne.n	80084bc <__ssputs_r+0x5c>
 80084fa:	6921      	ldr	r1, [r4, #16]
 80084fc:	4650      	mov	r0, sl
 80084fe:	f7ff ff65 	bl	80083cc <_free_r>
 8008502:	230c      	movs	r3, #12
 8008504:	f8ca 3000 	str.w	r3, [sl]
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008514:	e7e9      	b.n	80084ea <__ssputs_r+0x8a>
	...

08008518 <_svfiprintf_r>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	4698      	mov	r8, r3
 800851e:	898b      	ldrh	r3, [r1, #12]
 8008520:	061b      	lsls	r3, r3, #24
 8008522:	b09d      	sub	sp, #116	@ 0x74
 8008524:	4607      	mov	r7, r0
 8008526:	460d      	mov	r5, r1
 8008528:	4614      	mov	r4, r2
 800852a:	d510      	bpl.n	800854e <_svfiprintf_r+0x36>
 800852c:	690b      	ldr	r3, [r1, #16]
 800852e:	b973      	cbnz	r3, 800854e <_svfiprintf_r+0x36>
 8008530:	2140      	movs	r1, #64	@ 0x40
 8008532:	f7ff fcc9 	bl	8007ec8 <_malloc_r>
 8008536:	6028      	str	r0, [r5, #0]
 8008538:	6128      	str	r0, [r5, #16]
 800853a:	b930      	cbnz	r0, 800854a <_svfiprintf_r+0x32>
 800853c:	230c      	movs	r3, #12
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008544:	b01d      	add	sp, #116	@ 0x74
 8008546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854a:	2340      	movs	r3, #64	@ 0x40
 800854c:	616b      	str	r3, [r5, #20]
 800854e:	2300      	movs	r3, #0
 8008550:	9309      	str	r3, [sp, #36]	@ 0x24
 8008552:	2320      	movs	r3, #32
 8008554:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008558:	f8cd 800c 	str.w	r8, [sp, #12]
 800855c:	2330      	movs	r3, #48	@ 0x30
 800855e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086fc <_svfiprintf_r+0x1e4>
 8008562:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008566:	f04f 0901 	mov.w	r9, #1
 800856a:	4623      	mov	r3, r4
 800856c:	469a      	mov	sl, r3
 800856e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008572:	b10a      	cbz	r2, 8008578 <_svfiprintf_r+0x60>
 8008574:	2a25      	cmp	r2, #37	@ 0x25
 8008576:	d1f9      	bne.n	800856c <_svfiprintf_r+0x54>
 8008578:	ebba 0b04 	subs.w	fp, sl, r4
 800857c:	d00b      	beq.n	8008596 <_svfiprintf_r+0x7e>
 800857e:	465b      	mov	r3, fp
 8008580:	4622      	mov	r2, r4
 8008582:	4629      	mov	r1, r5
 8008584:	4638      	mov	r0, r7
 8008586:	f7ff ff6b 	bl	8008460 <__ssputs_r>
 800858a:	3001      	adds	r0, #1
 800858c:	f000 80a7 	beq.w	80086de <_svfiprintf_r+0x1c6>
 8008590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008592:	445a      	add	r2, fp
 8008594:	9209      	str	r2, [sp, #36]	@ 0x24
 8008596:	f89a 3000 	ldrb.w	r3, [sl]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 809f 	beq.w	80086de <_svfiprintf_r+0x1c6>
 80085a0:	2300      	movs	r3, #0
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085aa:	f10a 0a01 	add.w	sl, sl, #1
 80085ae:	9304      	str	r3, [sp, #16]
 80085b0:	9307      	str	r3, [sp, #28]
 80085b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80085b8:	4654      	mov	r4, sl
 80085ba:	2205      	movs	r2, #5
 80085bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c0:	484e      	ldr	r0, [pc, #312]	@ (80086fc <_svfiprintf_r+0x1e4>)
 80085c2:	f7f7 fe15 	bl	80001f0 <memchr>
 80085c6:	9a04      	ldr	r2, [sp, #16]
 80085c8:	b9d8      	cbnz	r0, 8008602 <_svfiprintf_r+0xea>
 80085ca:	06d0      	lsls	r0, r2, #27
 80085cc:	bf44      	itt	mi
 80085ce:	2320      	movmi	r3, #32
 80085d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085d4:	0711      	lsls	r1, r2, #28
 80085d6:	bf44      	itt	mi
 80085d8:	232b      	movmi	r3, #43	@ 0x2b
 80085da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085de:	f89a 3000 	ldrb.w	r3, [sl]
 80085e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80085e4:	d015      	beq.n	8008612 <_svfiprintf_r+0xfa>
 80085e6:	9a07      	ldr	r2, [sp, #28]
 80085e8:	4654      	mov	r4, sl
 80085ea:	2000      	movs	r0, #0
 80085ec:	f04f 0c0a 	mov.w	ip, #10
 80085f0:	4621      	mov	r1, r4
 80085f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085f6:	3b30      	subs	r3, #48	@ 0x30
 80085f8:	2b09      	cmp	r3, #9
 80085fa:	d94b      	bls.n	8008694 <_svfiprintf_r+0x17c>
 80085fc:	b1b0      	cbz	r0, 800862c <_svfiprintf_r+0x114>
 80085fe:	9207      	str	r2, [sp, #28]
 8008600:	e014      	b.n	800862c <_svfiprintf_r+0x114>
 8008602:	eba0 0308 	sub.w	r3, r0, r8
 8008606:	fa09 f303 	lsl.w	r3, r9, r3
 800860a:	4313      	orrs	r3, r2
 800860c:	9304      	str	r3, [sp, #16]
 800860e:	46a2      	mov	sl, r4
 8008610:	e7d2      	b.n	80085b8 <_svfiprintf_r+0xa0>
 8008612:	9b03      	ldr	r3, [sp, #12]
 8008614:	1d19      	adds	r1, r3, #4
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	9103      	str	r1, [sp, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	bfbb      	ittet	lt
 800861e:	425b      	neglt	r3, r3
 8008620:	f042 0202 	orrlt.w	r2, r2, #2
 8008624:	9307      	strge	r3, [sp, #28]
 8008626:	9307      	strlt	r3, [sp, #28]
 8008628:	bfb8      	it	lt
 800862a:	9204      	strlt	r2, [sp, #16]
 800862c:	7823      	ldrb	r3, [r4, #0]
 800862e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008630:	d10a      	bne.n	8008648 <_svfiprintf_r+0x130>
 8008632:	7863      	ldrb	r3, [r4, #1]
 8008634:	2b2a      	cmp	r3, #42	@ 0x2a
 8008636:	d132      	bne.n	800869e <_svfiprintf_r+0x186>
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	1d1a      	adds	r2, r3, #4
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	9203      	str	r2, [sp, #12]
 8008640:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008644:	3402      	adds	r4, #2
 8008646:	9305      	str	r3, [sp, #20]
 8008648:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800870c <_svfiprintf_r+0x1f4>
 800864c:	7821      	ldrb	r1, [r4, #0]
 800864e:	2203      	movs	r2, #3
 8008650:	4650      	mov	r0, sl
 8008652:	f7f7 fdcd 	bl	80001f0 <memchr>
 8008656:	b138      	cbz	r0, 8008668 <_svfiprintf_r+0x150>
 8008658:	9b04      	ldr	r3, [sp, #16]
 800865a:	eba0 000a 	sub.w	r0, r0, sl
 800865e:	2240      	movs	r2, #64	@ 0x40
 8008660:	4082      	lsls	r2, r0
 8008662:	4313      	orrs	r3, r2
 8008664:	3401      	adds	r4, #1
 8008666:	9304      	str	r3, [sp, #16]
 8008668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800866c:	4824      	ldr	r0, [pc, #144]	@ (8008700 <_svfiprintf_r+0x1e8>)
 800866e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008672:	2206      	movs	r2, #6
 8008674:	f7f7 fdbc 	bl	80001f0 <memchr>
 8008678:	2800      	cmp	r0, #0
 800867a:	d036      	beq.n	80086ea <_svfiprintf_r+0x1d2>
 800867c:	4b21      	ldr	r3, [pc, #132]	@ (8008704 <_svfiprintf_r+0x1ec>)
 800867e:	bb1b      	cbnz	r3, 80086c8 <_svfiprintf_r+0x1b0>
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	3307      	adds	r3, #7
 8008684:	f023 0307 	bic.w	r3, r3, #7
 8008688:	3308      	adds	r3, #8
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800868e:	4433      	add	r3, r6
 8008690:	9309      	str	r3, [sp, #36]	@ 0x24
 8008692:	e76a      	b.n	800856a <_svfiprintf_r+0x52>
 8008694:	fb0c 3202 	mla	r2, ip, r2, r3
 8008698:	460c      	mov	r4, r1
 800869a:	2001      	movs	r0, #1
 800869c:	e7a8      	b.n	80085f0 <_svfiprintf_r+0xd8>
 800869e:	2300      	movs	r3, #0
 80086a0:	3401      	adds	r4, #1
 80086a2:	9305      	str	r3, [sp, #20]
 80086a4:	4619      	mov	r1, r3
 80086a6:	f04f 0c0a 	mov.w	ip, #10
 80086aa:	4620      	mov	r0, r4
 80086ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086b0:	3a30      	subs	r2, #48	@ 0x30
 80086b2:	2a09      	cmp	r2, #9
 80086b4:	d903      	bls.n	80086be <_svfiprintf_r+0x1a6>
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0c6      	beq.n	8008648 <_svfiprintf_r+0x130>
 80086ba:	9105      	str	r1, [sp, #20]
 80086bc:	e7c4      	b.n	8008648 <_svfiprintf_r+0x130>
 80086be:	fb0c 2101 	mla	r1, ip, r1, r2
 80086c2:	4604      	mov	r4, r0
 80086c4:	2301      	movs	r3, #1
 80086c6:	e7f0      	b.n	80086aa <_svfiprintf_r+0x192>
 80086c8:	ab03      	add	r3, sp, #12
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	462a      	mov	r2, r5
 80086ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008708 <_svfiprintf_r+0x1f0>)
 80086d0:	a904      	add	r1, sp, #16
 80086d2:	4638      	mov	r0, r7
 80086d4:	f3af 8000 	nop.w
 80086d8:	1c42      	adds	r2, r0, #1
 80086da:	4606      	mov	r6, r0
 80086dc:	d1d6      	bne.n	800868c <_svfiprintf_r+0x174>
 80086de:	89ab      	ldrh	r3, [r5, #12]
 80086e0:	065b      	lsls	r3, r3, #25
 80086e2:	f53f af2d 	bmi.w	8008540 <_svfiprintf_r+0x28>
 80086e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e8:	e72c      	b.n	8008544 <_svfiprintf_r+0x2c>
 80086ea:	ab03      	add	r3, sp, #12
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	462a      	mov	r2, r5
 80086f0:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <_svfiprintf_r+0x1f0>)
 80086f2:	a904      	add	r1, sp, #16
 80086f4:	4638      	mov	r0, r7
 80086f6:	f000 f9bb 	bl	8008a70 <_printf_i>
 80086fa:	e7ed      	b.n	80086d8 <_svfiprintf_r+0x1c0>
 80086fc:	08009799 	.word	0x08009799
 8008700:	080097a3 	.word	0x080097a3
 8008704:	00000000 	.word	0x00000000
 8008708:	08008461 	.word	0x08008461
 800870c:	0800979f 	.word	0x0800979f

08008710 <__sfputc_r>:
 8008710:	6893      	ldr	r3, [r2, #8]
 8008712:	3b01      	subs	r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	b410      	push	{r4}
 8008718:	6093      	str	r3, [r2, #8]
 800871a:	da08      	bge.n	800872e <__sfputc_r+0x1e>
 800871c:	6994      	ldr	r4, [r2, #24]
 800871e:	42a3      	cmp	r3, r4
 8008720:	db01      	blt.n	8008726 <__sfputc_r+0x16>
 8008722:	290a      	cmp	r1, #10
 8008724:	d103      	bne.n	800872e <__sfputc_r+0x1e>
 8008726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800872a:	f000 bbde 	b.w	8008eea <__swbuf_r>
 800872e:	6813      	ldr	r3, [r2, #0]
 8008730:	1c58      	adds	r0, r3, #1
 8008732:	6010      	str	r0, [r2, #0]
 8008734:	7019      	strb	r1, [r3, #0]
 8008736:	4608      	mov	r0, r1
 8008738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800873c:	4770      	bx	lr

0800873e <__sfputs_r>:
 800873e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008740:	4606      	mov	r6, r0
 8008742:	460f      	mov	r7, r1
 8008744:	4614      	mov	r4, r2
 8008746:	18d5      	adds	r5, r2, r3
 8008748:	42ac      	cmp	r4, r5
 800874a:	d101      	bne.n	8008750 <__sfputs_r+0x12>
 800874c:	2000      	movs	r0, #0
 800874e:	e007      	b.n	8008760 <__sfputs_r+0x22>
 8008750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008754:	463a      	mov	r2, r7
 8008756:	4630      	mov	r0, r6
 8008758:	f7ff ffda 	bl	8008710 <__sfputc_r>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d1f3      	bne.n	8008748 <__sfputs_r+0xa>
 8008760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008764 <_vfiprintf_r>:
 8008764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	460d      	mov	r5, r1
 800876a:	b09d      	sub	sp, #116	@ 0x74
 800876c:	4614      	mov	r4, r2
 800876e:	4698      	mov	r8, r3
 8008770:	4606      	mov	r6, r0
 8008772:	b118      	cbz	r0, 800877c <_vfiprintf_r+0x18>
 8008774:	6a03      	ldr	r3, [r0, #32]
 8008776:	b90b      	cbnz	r3, 800877c <_vfiprintf_r+0x18>
 8008778:	f7ff fcde 	bl	8008138 <__sinit>
 800877c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	d405      	bmi.n	800878e <_vfiprintf_r+0x2a>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	059a      	lsls	r2, r3, #22
 8008786:	d402      	bmi.n	800878e <_vfiprintf_r+0x2a>
 8008788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800878a:	f7ff fe14 	bl	80083b6 <__retarget_lock_acquire_recursive>
 800878e:	89ab      	ldrh	r3, [r5, #12]
 8008790:	071b      	lsls	r3, r3, #28
 8008792:	d501      	bpl.n	8008798 <_vfiprintf_r+0x34>
 8008794:	692b      	ldr	r3, [r5, #16]
 8008796:	b99b      	cbnz	r3, 80087c0 <_vfiprintf_r+0x5c>
 8008798:	4629      	mov	r1, r5
 800879a:	4630      	mov	r0, r6
 800879c:	f000 fbe4 	bl	8008f68 <__swsetup_r>
 80087a0:	b170      	cbz	r0, 80087c0 <_vfiprintf_r+0x5c>
 80087a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087a4:	07dc      	lsls	r4, r3, #31
 80087a6:	d504      	bpl.n	80087b2 <_vfiprintf_r+0x4e>
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087ac:	b01d      	add	sp, #116	@ 0x74
 80087ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	0598      	lsls	r0, r3, #22
 80087b6:	d4f7      	bmi.n	80087a8 <_vfiprintf_r+0x44>
 80087b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ba:	f7ff fdfd 	bl	80083b8 <__retarget_lock_release_recursive>
 80087be:	e7f3      	b.n	80087a8 <_vfiprintf_r+0x44>
 80087c0:	2300      	movs	r3, #0
 80087c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80087c4:	2320      	movs	r3, #32
 80087c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ce:	2330      	movs	r3, #48	@ 0x30
 80087d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008980 <_vfiprintf_r+0x21c>
 80087d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087d8:	f04f 0901 	mov.w	r9, #1
 80087dc:	4623      	mov	r3, r4
 80087de:	469a      	mov	sl, r3
 80087e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e4:	b10a      	cbz	r2, 80087ea <_vfiprintf_r+0x86>
 80087e6:	2a25      	cmp	r2, #37	@ 0x25
 80087e8:	d1f9      	bne.n	80087de <_vfiprintf_r+0x7a>
 80087ea:	ebba 0b04 	subs.w	fp, sl, r4
 80087ee:	d00b      	beq.n	8008808 <_vfiprintf_r+0xa4>
 80087f0:	465b      	mov	r3, fp
 80087f2:	4622      	mov	r2, r4
 80087f4:	4629      	mov	r1, r5
 80087f6:	4630      	mov	r0, r6
 80087f8:	f7ff ffa1 	bl	800873e <__sfputs_r>
 80087fc:	3001      	adds	r0, #1
 80087fe:	f000 80a7 	beq.w	8008950 <_vfiprintf_r+0x1ec>
 8008802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008804:	445a      	add	r2, fp
 8008806:	9209      	str	r2, [sp, #36]	@ 0x24
 8008808:	f89a 3000 	ldrb.w	r3, [sl]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 809f 	beq.w	8008950 <_vfiprintf_r+0x1ec>
 8008812:	2300      	movs	r3, #0
 8008814:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800881c:	f10a 0a01 	add.w	sl, sl, #1
 8008820:	9304      	str	r3, [sp, #16]
 8008822:	9307      	str	r3, [sp, #28]
 8008824:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008828:	931a      	str	r3, [sp, #104]	@ 0x68
 800882a:	4654      	mov	r4, sl
 800882c:	2205      	movs	r2, #5
 800882e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008832:	4853      	ldr	r0, [pc, #332]	@ (8008980 <_vfiprintf_r+0x21c>)
 8008834:	f7f7 fcdc 	bl	80001f0 <memchr>
 8008838:	9a04      	ldr	r2, [sp, #16]
 800883a:	b9d8      	cbnz	r0, 8008874 <_vfiprintf_r+0x110>
 800883c:	06d1      	lsls	r1, r2, #27
 800883e:	bf44      	itt	mi
 8008840:	2320      	movmi	r3, #32
 8008842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008846:	0713      	lsls	r3, r2, #28
 8008848:	bf44      	itt	mi
 800884a:	232b      	movmi	r3, #43	@ 0x2b
 800884c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008850:	f89a 3000 	ldrb.w	r3, [sl]
 8008854:	2b2a      	cmp	r3, #42	@ 0x2a
 8008856:	d015      	beq.n	8008884 <_vfiprintf_r+0x120>
 8008858:	9a07      	ldr	r2, [sp, #28]
 800885a:	4654      	mov	r4, sl
 800885c:	2000      	movs	r0, #0
 800885e:	f04f 0c0a 	mov.w	ip, #10
 8008862:	4621      	mov	r1, r4
 8008864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008868:	3b30      	subs	r3, #48	@ 0x30
 800886a:	2b09      	cmp	r3, #9
 800886c:	d94b      	bls.n	8008906 <_vfiprintf_r+0x1a2>
 800886e:	b1b0      	cbz	r0, 800889e <_vfiprintf_r+0x13a>
 8008870:	9207      	str	r2, [sp, #28]
 8008872:	e014      	b.n	800889e <_vfiprintf_r+0x13a>
 8008874:	eba0 0308 	sub.w	r3, r0, r8
 8008878:	fa09 f303 	lsl.w	r3, r9, r3
 800887c:	4313      	orrs	r3, r2
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	46a2      	mov	sl, r4
 8008882:	e7d2      	b.n	800882a <_vfiprintf_r+0xc6>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	1d19      	adds	r1, r3, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	9103      	str	r1, [sp, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	bfbb      	ittet	lt
 8008890:	425b      	neglt	r3, r3
 8008892:	f042 0202 	orrlt.w	r2, r2, #2
 8008896:	9307      	strge	r3, [sp, #28]
 8008898:	9307      	strlt	r3, [sp, #28]
 800889a:	bfb8      	it	lt
 800889c:	9204      	strlt	r2, [sp, #16]
 800889e:	7823      	ldrb	r3, [r4, #0]
 80088a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80088a2:	d10a      	bne.n	80088ba <_vfiprintf_r+0x156>
 80088a4:	7863      	ldrb	r3, [r4, #1]
 80088a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088a8:	d132      	bne.n	8008910 <_vfiprintf_r+0x1ac>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	1d1a      	adds	r2, r3, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	9203      	str	r2, [sp, #12]
 80088b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088b6:	3402      	adds	r4, #2
 80088b8:	9305      	str	r3, [sp, #20]
 80088ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008990 <_vfiprintf_r+0x22c>
 80088be:	7821      	ldrb	r1, [r4, #0]
 80088c0:	2203      	movs	r2, #3
 80088c2:	4650      	mov	r0, sl
 80088c4:	f7f7 fc94 	bl	80001f0 <memchr>
 80088c8:	b138      	cbz	r0, 80088da <_vfiprintf_r+0x176>
 80088ca:	9b04      	ldr	r3, [sp, #16]
 80088cc:	eba0 000a 	sub.w	r0, r0, sl
 80088d0:	2240      	movs	r2, #64	@ 0x40
 80088d2:	4082      	lsls	r2, r0
 80088d4:	4313      	orrs	r3, r2
 80088d6:	3401      	adds	r4, #1
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088de:	4829      	ldr	r0, [pc, #164]	@ (8008984 <_vfiprintf_r+0x220>)
 80088e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088e4:	2206      	movs	r2, #6
 80088e6:	f7f7 fc83 	bl	80001f0 <memchr>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d03f      	beq.n	800896e <_vfiprintf_r+0x20a>
 80088ee:	4b26      	ldr	r3, [pc, #152]	@ (8008988 <_vfiprintf_r+0x224>)
 80088f0:	bb1b      	cbnz	r3, 800893a <_vfiprintf_r+0x1d6>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	3307      	adds	r3, #7
 80088f6:	f023 0307 	bic.w	r3, r3, #7
 80088fa:	3308      	adds	r3, #8
 80088fc:	9303      	str	r3, [sp, #12]
 80088fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008900:	443b      	add	r3, r7
 8008902:	9309      	str	r3, [sp, #36]	@ 0x24
 8008904:	e76a      	b.n	80087dc <_vfiprintf_r+0x78>
 8008906:	fb0c 3202 	mla	r2, ip, r2, r3
 800890a:	460c      	mov	r4, r1
 800890c:	2001      	movs	r0, #1
 800890e:	e7a8      	b.n	8008862 <_vfiprintf_r+0xfe>
 8008910:	2300      	movs	r3, #0
 8008912:	3401      	adds	r4, #1
 8008914:	9305      	str	r3, [sp, #20]
 8008916:	4619      	mov	r1, r3
 8008918:	f04f 0c0a 	mov.w	ip, #10
 800891c:	4620      	mov	r0, r4
 800891e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008922:	3a30      	subs	r2, #48	@ 0x30
 8008924:	2a09      	cmp	r2, #9
 8008926:	d903      	bls.n	8008930 <_vfiprintf_r+0x1cc>
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0c6      	beq.n	80088ba <_vfiprintf_r+0x156>
 800892c:	9105      	str	r1, [sp, #20]
 800892e:	e7c4      	b.n	80088ba <_vfiprintf_r+0x156>
 8008930:	fb0c 2101 	mla	r1, ip, r1, r2
 8008934:	4604      	mov	r4, r0
 8008936:	2301      	movs	r3, #1
 8008938:	e7f0      	b.n	800891c <_vfiprintf_r+0x1b8>
 800893a:	ab03      	add	r3, sp, #12
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	462a      	mov	r2, r5
 8008940:	4b12      	ldr	r3, [pc, #72]	@ (800898c <_vfiprintf_r+0x228>)
 8008942:	a904      	add	r1, sp, #16
 8008944:	4630      	mov	r0, r6
 8008946:	f3af 8000 	nop.w
 800894a:	4607      	mov	r7, r0
 800894c:	1c78      	adds	r0, r7, #1
 800894e:	d1d6      	bne.n	80088fe <_vfiprintf_r+0x19a>
 8008950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008952:	07d9      	lsls	r1, r3, #31
 8008954:	d405      	bmi.n	8008962 <_vfiprintf_r+0x1fe>
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	059a      	lsls	r2, r3, #22
 800895a:	d402      	bmi.n	8008962 <_vfiprintf_r+0x1fe>
 800895c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800895e:	f7ff fd2b 	bl	80083b8 <__retarget_lock_release_recursive>
 8008962:	89ab      	ldrh	r3, [r5, #12]
 8008964:	065b      	lsls	r3, r3, #25
 8008966:	f53f af1f 	bmi.w	80087a8 <_vfiprintf_r+0x44>
 800896a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800896c:	e71e      	b.n	80087ac <_vfiprintf_r+0x48>
 800896e:	ab03      	add	r3, sp, #12
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	462a      	mov	r2, r5
 8008974:	4b05      	ldr	r3, [pc, #20]	@ (800898c <_vfiprintf_r+0x228>)
 8008976:	a904      	add	r1, sp, #16
 8008978:	4630      	mov	r0, r6
 800897a:	f000 f879 	bl	8008a70 <_printf_i>
 800897e:	e7e4      	b.n	800894a <_vfiprintf_r+0x1e6>
 8008980:	08009799 	.word	0x08009799
 8008984:	080097a3 	.word	0x080097a3
 8008988:	00000000 	.word	0x00000000
 800898c:	0800873f 	.word	0x0800873f
 8008990:	0800979f 	.word	0x0800979f

08008994 <_printf_common>:
 8008994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008998:	4616      	mov	r6, r2
 800899a:	4698      	mov	r8, r3
 800899c:	688a      	ldr	r2, [r1, #8]
 800899e:	690b      	ldr	r3, [r1, #16]
 80089a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089a4:	4293      	cmp	r3, r2
 80089a6:	bfb8      	it	lt
 80089a8:	4613      	movlt	r3, r2
 80089aa:	6033      	str	r3, [r6, #0]
 80089ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089b0:	4607      	mov	r7, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	b10a      	cbz	r2, 80089ba <_printf_common+0x26>
 80089b6:	3301      	adds	r3, #1
 80089b8:	6033      	str	r3, [r6, #0]
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	0699      	lsls	r1, r3, #26
 80089be:	bf42      	ittt	mi
 80089c0:	6833      	ldrmi	r3, [r6, #0]
 80089c2:	3302      	addmi	r3, #2
 80089c4:	6033      	strmi	r3, [r6, #0]
 80089c6:	6825      	ldr	r5, [r4, #0]
 80089c8:	f015 0506 	ands.w	r5, r5, #6
 80089cc:	d106      	bne.n	80089dc <_printf_common+0x48>
 80089ce:	f104 0a19 	add.w	sl, r4, #25
 80089d2:	68e3      	ldr	r3, [r4, #12]
 80089d4:	6832      	ldr	r2, [r6, #0]
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	42ab      	cmp	r3, r5
 80089da:	dc26      	bgt.n	8008a2a <_printf_common+0x96>
 80089dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089e0:	6822      	ldr	r2, [r4, #0]
 80089e2:	3b00      	subs	r3, #0
 80089e4:	bf18      	it	ne
 80089e6:	2301      	movne	r3, #1
 80089e8:	0692      	lsls	r2, r2, #26
 80089ea:	d42b      	bmi.n	8008a44 <_printf_common+0xb0>
 80089ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089f0:	4641      	mov	r1, r8
 80089f2:	4638      	mov	r0, r7
 80089f4:	47c8      	blx	r9
 80089f6:	3001      	adds	r0, #1
 80089f8:	d01e      	beq.n	8008a38 <_printf_common+0xa4>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	6922      	ldr	r2, [r4, #16]
 80089fe:	f003 0306 	and.w	r3, r3, #6
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	bf02      	ittt	eq
 8008a06:	68e5      	ldreq	r5, [r4, #12]
 8008a08:	6833      	ldreq	r3, [r6, #0]
 8008a0a:	1aed      	subeq	r5, r5, r3
 8008a0c:	68a3      	ldr	r3, [r4, #8]
 8008a0e:	bf0c      	ite	eq
 8008a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a14:	2500      	movne	r5, #0
 8008a16:	4293      	cmp	r3, r2
 8008a18:	bfc4      	itt	gt
 8008a1a:	1a9b      	subgt	r3, r3, r2
 8008a1c:	18ed      	addgt	r5, r5, r3
 8008a1e:	2600      	movs	r6, #0
 8008a20:	341a      	adds	r4, #26
 8008a22:	42b5      	cmp	r5, r6
 8008a24:	d11a      	bne.n	8008a5c <_printf_common+0xc8>
 8008a26:	2000      	movs	r0, #0
 8008a28:	e008      	b.n	8008a3c <_printf_common+0xa8>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4652      	mov	r2, sl
 8008a2e:	4641      	mov	r1, r8
 8008a30:	4638      	mov	r0, r7
 8008a32:	47c8      	blx	r9
 8008a34:	3001      	adds	r0, #1
 8008a36:	d103      	bne.n	8008a40 <_printf_common+0xac>
 8008a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a40:	3501      	adds	r5, #1
 8008a42:	e7c6      	b.n	80089d2 <_printf_common+0x3e>
 8008a44:	18e1      	adds	r1, r4, r3
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	2030      	movs	r0, #48	@ 0x30
 8008a4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a4e:	4422      	add	r2, r4
 8008a50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a58:	3302      	adds	r3, #2
 8008a5a:	e7c7      	b.n	80089ec <_printf_common+0x58>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4622      	mov	r2, r4
 8008a60:	4641      	mov	r1, r8
 8008a62:	4638      	mov	r0, r7
 8008a64:	47c8      	blx	r9
 8008a66:	3001      	adds	r0, #1
 8008a68:	d0e6      	beq.n	8008a38 <_printf_common+0xa4>
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	e7d9      	b.n	8008a22 <_printf_common+0x8e>
	...

08008a70 <_printf_i>:
 8008a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	7e0f      	ldrb	r7, [r1, #24]
 8008a76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a78:	2f78      	cmp	r7, #120	@ 0x78
 8008a7a:	4691      	mov	r9, r2
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	460c      	mov	r4, r1
 8008a80:	469a      	mov	sl, r3
 8008a82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a86:	d807      	bhi.n	8008a98 <_printf_i+0x28>
 8008a88:	2f62      	cmp	r7, #98	@ 0x62
 8008a8a:	d80a      	bhi.n	8008aa2 <_printf_i+0x32>
 8008a8c:	2f00      	cmp	r7, #0
 8008a8e:	f000 80d2 	beq.w	8008c36 <_printf_i+0x1c6>
 8008a92:	2f58      	cmp	r7, #88	@ 0x58
 8008a94:	f000 80b9 	beq.w	8008c0a <_printf_i+0x19a>
 8008a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008aa0:	e03a      	b.n	8008b18 <_printf_i+0xa8>
 8008aa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008aa6:	2b15      	cmp	r3, #21
 8008aa8:	d8f6      	bhi.n	8008a98 <_printf_i+0x28>
 8008aaa:	a101      	add	r1, pc, #4	@ (adr r1, 8008ab0 <_printf_i+0x40>)
 8008aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ab0:	08008b09 	.word	0x08008b09
 8008ab4:	08008b1d 	.word	0x08008b1d
 8008ab8:	08008a99 	.word	0x08008a99
 8008abc:	08008a99 	.word	0x08008a99
 8008ac0:	08008a99 	.word	0x08008a99
 8008ac4:	08008a99 	.word	0x08008a99
 8008ac8:	08008b1d 	.word	0x08008b1d
 8008acc:	08008a99 	.word	0x08008a99
 8008ad0:	08008a99 	.word	0x08008a99
 8008ad4:	08008a99 	.word	0x08008a99
 8008ad8:	08008a99 	.word	0x08008a99
 8008adc:	08008c1d 	.word	0x08008c1d
 8008ae0:	08008b47 	.word	0x08008b47
 8008ae4:	08008bd7 	.word	0x08008bd7
 8008ae8:	08008a99 	.word	0x08008a99
 8008aec:	08008a99 	.word	0x08008a99
 8008af0:	08008c3f 	.word	0x08008c3f
 8008af4:	08008a99 	.word	0x08008a99
 8008af8:	08008b47 	.word	0x08008b47
 8008afc:	08008a99 	.word	0x08008a99
 8008b00:	08008a99 	.word	0x08008a99
 8008b04:	08008bdf 	.word	0x08008bdf
 8008b08:	6833      	ldr	r3, [r6, #0]
 8008b0a:	1d1a      	adds	r2, r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6032      	str	r2, [r6, #0]
 8008b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e09d      	b.n	8008c58 <_printf_i+0x1e8>
 8008b1c:	6833      	ldr	r3, [r6, #0]
 8008b1e:	6820      	ldr	r0, [r4, #0]
 8008b20:	1d19      	adds	r1, r3, #4
 8008b22:	6031      	str	r1, [r6, #0]
 8008b24:	0606      	lsls	r6, r0, #24
 8008b26:	d501      	bpl.n	8008b2c <_printf_i+0xbc>
 8008b28:	681d      	ldr	r5, [r3, #0]
 8008b2a:	e003      	b.n	8008b34 <_printf_i+0xc4>
 8008b2c:	0645      	lsls	r5, r0, #25
 8008b2e:	d5fb      	bpl.n	8008b28 <_printf_i+0xb8>
 8008b30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b34:	2d00      	cmp	r5, #0
 8008b36:	da03      	bge.n	8008b40 <_printf_i+0xd0>
 8008b38:	232d      	movs	r3, #45	@ 0x2d
 8008b3a:	426d      	negs	r5, r5
 8008b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b40:	4859      	ldr	r0, [pc, #356]	@ (8008ca8 <_printf_i+0x238>)
 8008b42:	230a      	movs	r3, #10
 8008b44:	e011      	b.n	8008b6a <_printf_i+0xfa>
 8008b46:	6821      	ldr	r1, [r4, #0]
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	0608      	lsls	r0, r1, #24
 8008b4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b50:	d402      	bmi.n	8008b58 <_printf_i+0xe8>
 8008b52:	0649      	lsls	r1, r1, #25
 8008b54:	bf48      	it	mi
 8008b56:	b2ad      	uxthmi	r5, r5
 8008b58:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b5a:	4853      	ldr	r0, [pc, #332]	@ (8008ca8 <_printf_i+0x238>)
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	bf14      	ite	ne
 8008b60:	230a      	movne	r3, #10
 8008b62:	2308      	moveq	r3, #8
 8008b64:	2100      	movs	r1, #0
 8008b66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b6a:	6866      	ldr	r6, [r4, #4]
 8008b6c:	60a6      	str	r6, [r4, #8]
 8008b6e:	2e00      	cmp	r6, #0
 8008b70:	bfa2      	ittt	ge
 8008b72:	6821      	ldrge	r1, [r4, #0]
 8008b74:	f021 0104 	bicge.w	r1, r1, #4
 8008b78:	6021      	strge	r1, [r4, #0]
 8008b7a:	b90d      	cbnz	r5, 8008b80 <_printf_i+0x110>
 8008b7c:	2e00      	cmp	r6, #0
 8008b7e:	d04b      	beq.n	8008c18 <_printf_i+0x1a8>
 8008b80:	4616      	mov	r6, r2
 8008b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b86:	fb03 5711 	mls	r7, r3, r1, r5
 8008b8a:	5dc7      	ldrb	r7, [r0, r7]
 8008b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b90:	462f      	mov	r7, r5
 8008b92:	42bb      	cmp	r3, r7
 8008b94:	460d      	mov	r5, r1
 8008b96:	d9f4      	bls.n	8008b82 <_printf_i+0x112>
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d10b      	bne.n	8008bb4 <_printf_i+0x144>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	07df      	lsls	r7, r3, #31
 8008ba0:	d508      	bpl.n	8008bb4 <_printf_i+0x144>
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	6861      	ldr	r1, [r4, #4]
 8008ba6:	4299      	cmp	r1, r3
 8008ba8:	bfde      	ittt	le
 8008baa:	2330      	movle	r3, #48	@ 0x30
 8008bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bb0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008bb4:	1b92      	subs	r2, r2, r6
 8008bb6:	6122      	str	r2, [r4, #16]
 8008bb8:	f8cd a000 	str.w	sl, [sp]
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	aa03      	add	r2, sp, #12
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	f7ff fee6 	bl	8008994 <_printf_common>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d14a      	bne.n	8008c62 <_printf_i+0x1f2>
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bd0:	b004      	add	sp, #16
 8008bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	f043 0320 	orr.w	r3, r3, #32
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	4833      	ldr	r0, [pc, #204]	@ (8008cac <_printf_i+0x23c>)
 8008be0:	2778      	movs	r7, #120	@ 0x78
 8008be2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	6831      	ldr	r1, [r6, #0]
 8008bea:	061f      	lsls	r7, r3, #24
 8008bec:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bf0:	d402      	bmi.n	8008bf8 <_printf_i+0x188>
 8008bf2:	065f      	lsls	r7, r3, #25
 8008bf4:	bf48      	it	mi
 8008bf6:	b2ad      	uxthmi	r5, r5
 8008bf8:	6031      	str	r1, [r6, #0]
 8008bfa:	07d9      	lsls	r1, r3, #31
 8008bfc:	bf44      	itt	mi
 8008bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8008c02:	6023      	strmi	r3, [r4, #0]
 8008c04:	b11d      	cbz	r5, 8008c0e <_printf_i+0x19e>
 8008c06:	2310      	movs	r3, #16
 8008c08:	e7ac      	b.n	8008b64 <_printf_i+0xf4>
 8008c0a:	4827      	ldr	r0, [pc, #156]	@ (8008ca8 <_printf_i+0x238>)
 8008c0c:	e7e9      	b.n	8008be2 <_printf_i+0x172>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	f023 0320 	bic.w	r3, r3, #32
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	e7f6      	b.n	8008c06 <_printf_i+0x196>
 8008c18:	4616      	mov	r6, r2
 8008c1a:	e7bd      	b.n	8008b98 <_printf_i+0x128>
 8008c1c:	6833      	ldr	r3, [r6, #0]
 8008c1e:	6825      	ldr	r5, [r4, #0]
 8008c20:	6961      	ldr	r1, [r4, #20]
 8008c22:	1d18      	adds	r0, r3, #4
 8008c24:	6030      	str	r0, [r6, #0]
 8008c26:	062e      	lsls	r6, r5, #24
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	d501      	bpl.n	8008c30 <_printf_i+0x1c0>
 8008c2c:	6019      	str	r1, [r3, #0]
 8008c2e:	e002      	b.n	8008c36 <_printf_i+0x1c6>
 8008c30:	0668      	lsls	r0, r5, #25
 8008c32:	d5fb      	bpl.n	8008c2c <_printf_i+0x1bc>
 8008c34:	8019      	strh	r1, [r3, #0]
 8008c36:	2300      	movs	r3, #0
 8008c38:	6123      	str	r3, [r4, #16]
 8008c3a:	4616      	mov	r6, r2
 8008c3c:	e7bc      	b.n	8008bb8 <_printf_i+0x148>
 8008c3e:	6833      	ldr	r3, [r6, #0]
 8008c40:	1d1a      	adds	r2, r3, #4
 8008c42:	6032      	str	r2, [r6, #0]
 8008c44:	681e      	ldr	r6, [r3, #0]
 8008c46:	6862      	ldr	r2, [r4, #4]
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7f7 fad0 	bl	80001f0 <memchr>
 8008c50:	b108      	cbz	r0, 8008c56 <_printf_i+0x1e6>
 8008c52:	1b80      	subs	r0, r0, r6
 8008c54:	6060      	str	r0, [r4, #4]
 8008c56:	6863      	ldr	r3, [r4, #4]
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c60:	e7aa      	b.n	8008bb8 <_printf_i+0x148>
 8008c62:	6923      	ldr	r3, [r4, #16]
 8008c64:	4632      	mov	r2, r6
 8008c66:	4649      	mov	r1, r9
 8008c68:	4640      	mov	r0, r8
 8008c6a:	47d0      	blx	sl
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d0ad      	beq.n	8008bcc <_printf_i+0x15c>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	079b      	lsls	r3, r3, #30
 8008c74:	d413      	bmi.n	8008c9e <_printf_i+0x22e>
 8008c76:	68e0      	ldr	r0, [r4, #12]
 8008c78:	9b03      	ldr	r3, [sp, #12]
 8008c7a:	4298      	cmp	r0, r3
 8008c7c:	bfb8      	it	lt
 8008c7e:	4618      	movlt	r0, r3
 8008c80:	e7a6      	b.n	8008bd0 <_printf_i+0x160>
 8008c82:	2301      	movs	r3, #1
 8008c84:	4632      	mov	r2, r6
 8008c86:	4649      	mov	r1, r9
 8008c88:	4640      	mov	r0, r8
 8008c8a:	47d0      	blx	sl
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d09d      	beq.n	8008bcc <_printf_i+0x15c>
 8008c90:	3501      	adds	r5, #1
 8008c92:	68e3      	ldr	r3, [r4, #12]
 8008c94:	9903      	ldr	r1, [sp, #12]
 8008c96:	1a5b      	subs	r3, r3, r1
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	dcf2      	bgt.n	8008c82 <_printf_i+0x212>
 8008c9c:	e7eb      	b.n	8008c76 <_printf_i+0x206>
 8008c9e:	2500      	movs	r5, #0
 8008ca0:	f104 0619 	add.w	r6, r4, #25
 8008ca4:	e7f5      	b.n	8008c92 <_printf_i+0x222>
 8008ca6:	bf00      	nop
 8008ca8:	080097aa 	.word	0x080097aa
 8008cac:	080097bb 	.word	0x080097bb

08008cb0 <__sflush_r>:
 8008cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	0716      	lsls	r6, r2, #28
 8008cba:	4605      	mov	r5, r0
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	d454      	bmi.n	8008d6a <__sflush_r+0xba>
 8008cc0:	684b      	ldr	r3, [r1, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dc02      	bgt.n	8008ccc <__sflush_r+0x1c>
 8008cc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	dd48      	ble.n	8008d5e <__sflush_r+0xae>
 8008ccc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d045      	beq.n	8008d5e <__sflush_r+0xae>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008cd8:	682f      	ldr	r7, [r5, #0]
 8008cda:	6a21      	ldr	r1, [r4, #32]
 8008cdc:	602b      	str	r3, [r5, #0]
 8008cde:	d030      	beq.n	8008d42 <__sflush_r+0x92>
 8008ce0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	0759      	lsls	r1, r3, #29
 8008ce6:	d505      	bpl.n	8008cf4 <__sflush_r+0x44>
 8008ce8:	6863      	ldr	r3, [r4, #4]
 8008cea:	1ad2      	subs	r2, r2, r3
 8008cec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cee:	b10b      	cbz	r3, 8008cf4 <__sflush_r+0x44>
 8008cf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cf2:	1ad2      	subs	r2, r2, r3
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cf8:	6a21      	ldr	r1, [r4, #32]
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b0      	blx	r6
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	d106      	bne.n	8008d12 <__sflush_r+0x62>
 8008d04:	6829      	ldr	r1, [r5, #0]
 8008d06:	291d      	cmp	r1, #29
 8008d08:	d82b      	bhi.n	8008d62 <__sflush_r+0xb2>
 8008d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8008db4 <__sflush_r+0x104>)
 8008d0c:	410a      	asrs	r2, r1
 8008d0e:	07d6      	lsls	r6, r2, #31
 8008d10:	d427      	bmi.n	8008d62 <__sflush_r+0xb2>
 8008d12:	2200      	movs	r2, #0
 8008d14:	6062      	str	r2, [r4, #4]
 8008d16:	04d9      	lsls	r1, r3, #19
 8008d18:	6922      	ldr	r2, [r4, #16]
 8008d1a:	6022      	str	r2, [r4, #0]
 8008d1c:	d504      	bpl.n	8008d28 <__sflush_r+0x78>
 8008d1e:	1c42      	adds	r2, r0, #1
 8008d20:	d101      	bne.n	8008d26 <__sflush_r+0x76>
 8008d22:	682b      	ldr	r3, [r5, #0]
 8008d24:	b903      	cbnz	r3, 8008d28 <__sflush_r+0x78>
 8008d26:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d2a:	602f      	str	r7, [r5, #0]
 8008d2c:	b1b9      	cbz	r1, 8008d5e <__sflush_r+0xae>
 8008d2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d32:	4299      	cmp	r1, r3
 8008d34:	d002      	beq.n	8008d3c <__sflush_r+0x8c>
 8008d36:	4628      	mov	r0, r5
 8008d38:	f7ff fb48 	bl	80083cc <_free_r>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d40:	e00d      	b.n	8008d5e <__sflush_r+0xae>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b0      	blx	r6
 8008d48:	4602      	mov	r2, r0
 8008d4a:	1c50      	adds	r0, r2, #1
 8008d4c:	d1c9      	bne.n	8008ce2 <__sflush_r+0x32>
 8008d4e:	682b      	ldr	r3, [r5, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0c6      	beq.n	8008ce2 <__sflush_r+0x32>
 8008d54:	2b1d      	cmp	r3, #29
 8008d56:	d001      	beq.n	8008d5c <__sflush_r+0xac>
 8008d58:	2b16      	cmp	r3, #22
 8008d5a:	d11e      	bne.n	8008d9a <__sflush_r+0xea>
 8008d5c:	602f      	str	r7, [r5, #0]
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e022      	b.n	8008da8 <__sflush_r+0xf8>
 8008d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d66:	b21b      	sxth	r3, r3
 8008d68:	e01b      	b.n	8008da2 <__sflush_r+0xf2>
 8008d6a:	690f      	ldr	r7, [r1, #16]
 8008d6c:	2f00      	cmp	r7, #0
 8008d6e:	d0f6      	beq.n	8008d5e <__sflush_r+0xae>
 8008d70:	0793      	lsls	r3, r2, #30
 8008d72:	680e      	ldr	r6, [r1, #0]
 8008d74:	bf08      	it	eq
 8008d76:	694b      	ldreq	r3, [r1, #20]
 8008d78:	600f      	str	r7, [r1, #0]
 8008d7a:	bf18      	it	ne
 8008d7c:	2300      	movne	r3, #0
 8008d7e:	eba6 0807 	sub.w	r8, r6, r7
 8008d82:	608b      	str	r3, [r1, #8]
 8008d84:	f1b8 0f00 	cmp.w	r8, #0
 8008d88:	dde9      	ble.n	8008d5e <__sflush_r+0xae>
 8008d8a:	6a21      	ldr	r1, [r4, #32]
 8008d8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d8e:	4643      	mov	r3, r8
 8008d90:	463a      	mov	r2, r7
 8008d92:	4628      	mov	r0, r5
 8008d94:	47b0      	blx	r6
 8008d96:	2800      	cmp	r0, #0
 8008d98:	dc08      	bgt.n	8008dac <__sflush_r+0xfc>
 8008d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dac:	4407      	add	r7, r0
 8008dae:	eba8 0800 	sub.w	r8, r8, r0
 8008db2:	e7e7      	b.n	8008d84 <__sflush_r+0xd4>
 8008db4:	dfbffffe 	.word	0xdfbffffe

08008db8 <_fflush_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	690b      	ldr	r3, [r1, #16]
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	b913      	cbnz	r3, 8008dc8 <_fflush_r+0x10>
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	b118      	cbz	r0, 8008dd2 <_fflush_r+0x1a>
 8008dca:	6a03      	ldr	r3, [r0, #32]
 8008dcc:	b90b      	cbnz	r3, 8008dd2 <_fflush_r+0x1a>
 8008dce:	f7ff f9b3 	bl	8008138 <__sinit>
 8008dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0f3      	beq.n	8008dc2 <_fflush_r+0xa>
 8008dda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ddc:	07d0      	lsls	r0, r2, #31
 8008dde:	d404      	bmi.n	8008dea <_fflush_r+0x32>
 8008de0:	0599      	lsls	r1, r3, #22
 8008de2:	d402      	bmi.n	8008dea <_fflush_r+0x32>
 8008de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008de6:	f7ff fae6 	bl	80083b6 <__retarget_lock_acquire_recursive>
 8008dea:	4628      	mov	r0, r5
 8008dec:	4621      	mov	r1, r4
 8008dee:	f7ff ff5f 	bl	8008cb0 <__sflush_r>
 8008df2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008df4:	07da      	lsls	r2, r3, #31
 8008df6:	4605      	mov	r5, r0
 8008df8:	d4e4      	bmi.n	8008dc4 <_fflush_r+0xc>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	059b      	lsls	r3, r3, #22
 8008dfe:	d4e1      	bmi.n	8008dc4 <_fflush_r+0xc>
 8008e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e02:	f7ff fad9 	bl	80083b8 <__retarget_lock_release_recursive>
 8008e06:	e7dd      	b.n	8008dc4 <_fflush_r+0xc>

08008e08 <__sread>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e10:	f000 f9c0 	bl	8009194 <_read_r>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	bfab      	itete	ge
 8008e18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e1c:	181b      	addge	r3, r3, r0
 8008e1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e22:	bfac      	ite	ge
 8008e24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e26:	81a3      	strhlt	r3, [r4, #12]
 8008e28:	bd10      	pop	{r4, pc}

08008e2a <__swrite>:
 8008e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2e:	461f      	mov	r7, r3
 8008e30:	898b      	ldrh	r3, [r1, #12]
 8008e32:	05db      	lsls	r3, r3, #23
 8008e34:	4605      	mov	r5, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	4616      	mov	r6, r2
 8008e3a:	d505      	bpl.n	8008e48 <__swrite+0x1e>
 8008e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e40:	2302      	movs	r3, #2
 8008e42:	2200      	movs	r2, #0
 8008e44:	f000 f994 	bl	8009170 <_lseek_r>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	4632      	mov	r2, r6
 8008e56:	463b      	mov	r3, r7
 8008e58:	4628      	mov	r0, r5
 8008e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5e:	f000 b9ab 	b.w	80091b8 <_write_r>

08008e62 <__sseek>:
 8008e62:	b510      	push	{r4, lr}
 8008e64:	460c      	mov	r4, r1
 8008e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6a:	f000 f981 	bl	8009170 <_lseek_r>
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	bf15      	itete	ne
 8008e74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e7e:	81a3      	strheq	r3, [r4, #12]
 8008e80:	bf18      	it	ne
 8008e82:	81a3      	strhne	r3, [r4, #12]
 8008e84:	bd10      	pop	{r4, pc}

08008e86 <__sclose>:
 8008e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8a:	f000 b93f 	b.w	800910c <_close_r>

08008e8e <_realloc_r>:
 8008e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e92:	4680      	mov	r8, r0
 8008e94:	4615      	mov	r5, r2
 8008e96:	460c      	mov	r4, r1
 8008e98:	b921      	cbnz	r1, 8008ea4 <_realloc_r+0x16>
 8008e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	f7ff b812 	b.w	8007ec8 <_malloc_r>
 8008ea4:	b92a      	cbnz	r2, 8008eb2 <_realloc_r+0x24>
 8008ea6:	f7ff fa91 	bl	80083cc <_free_r>
 8008eaa:	2400      	movs	r4, #0
 8008eac:	4620      	mov	r0, r4
 8008eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb2:	f000 f9a1 	bl	80091f8 <_malloc_usable_size_r>
 8008eb6:	4285      	cmp	r5, r0
 8008eb8:	4606      	mov	r6, r0
 8008eba:	d802      	bhi.n	8008ec2 <_realloc_r+0x34>
 8008ebc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ec0:	d8f4      	bhi.n	8008eac <_realloc_r+0x1e>
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	f7fe ffff 	bl	8007ec8 <_malloc_r>
 8008eca:	4607      	mov	r7, r0
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d0ec      	beq.n	8008eaa <_realloc_r+0x1c>
 8008ed0:	42b5      	cmp	r5, r6
 8008ed2:	462a      	mov	r2, r5
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	bf28      	it	cs
 8008ed8:	4632      	movcs	r2, r6
 8008eda:	f000 f97f 	bl	80091dc <memcpy>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	f7ff fa73 	bl	80083cc <_free_r>
 8008ee6:	463c      	mov	r4, r7
 8008ee8:	e7e0      	b.n	8008eac <_realloc_r+0x1e>

08008eea <__swbuf_r>:
 8008eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eec:	460e      	mov	r6, r1
 8008eee:	4614      	mov	r4, r2
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	b118      	cbz	r0, 8008efc <__swbuf_r+0x12>
 8008ef4:	6a03      	ldr	r3, [r0, #32]
 8008ef6:	b90b      	cbnz	r3, 8008efc <__swbuf_r+0x12>
 8008ef8:	f7ff f91e 	bl	8008138 <__sinit>
 8008efc:	69a3      	ldr	r3, [r4, #24]
 8008efe:	60a3      	str	r3, [r4, #8]
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	071a      	lsls	r2, r3, #28
 8008f04:	d501      	bpl.n	8008f0a <__swbuf_r+0x20>
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	b943      	cbnz	r3, 8008f1c <__swbuf_r+0x32>
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	f000 f82b 	bl	8008f68 <__swsetup_r>
 8008f12:	b118      	cbz	r0, 8008f1c <__swbuf_r+0x32>
 8008f14:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008f18:	4638      	mov	r0, r7
 8008f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	6922      	ldr	r2, [r4, #16]
 8008f20:	1a98      	subs	r0, r3, r2
 8008f22:	6963      	ldr	r3, [r4, #20]
 8008f24:	b2f6      	uxtb	r6, r6
 8008f26:	4283      	cmp	r3, r0
 8008f28:	4637      	mov	r7, r6
 8008f2a:	dc05      	bgt.n	8008f38 <__swbuf_r+0x4e>
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f7ff ff42 	bl	8008db8 <_fflush_r>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d1ed      	bne.n	8008f14 <__swbuf_r+0x2a>
 8008f38:	68a3      	ldr	r3, [r4, #8]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	60a3      	str	r3, [r4, #8]
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	6022      	str	r2, [r4, #0]
 8008f44:	701e      	strb	r6, [r3, #0]
 8008f46:	6962      	ldr	r2, [r4, #20]
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d004      	beq.n	8008f58 <__swbuf_r+0x6e>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	07db      	lsls	r3, r3, #31
 8008f52:	d5e1      	bpl.n	8008f18 <__swbuf_r+0x2e>
 8008f54:	2e0a      	cmp	r6, #10
 8008f56:	d1df      	bne.n	8008f18 <__swbuf_r+0x2e>
 8008f58:	4621      	mov	r1, r4
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f7ff ff2c 	bl	8008db8 <_fflush_r>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d0d9      	beq.n	8008f18 <__swbuf_r+0x2e>
 8008f64:	e7d6      	b.n	8008f14 <__swbuf_r+0x2a>
	...

08008f68 <__swsetup_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4b29      	ldr	r3, [pc, #164]	@ (8009010 <__swsetup_r+0xa8>)
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	460c      	mov	r4, r1
 8008f72:	b118      	cbz	r0, 8008f7c <__swsetup_r+0x14>
 8008f74:	6a03      	ldr	r3, [r0, #32]
 8008f76:	b90b      	cbnz	r3, 8008f7c <__swsetup_r+0x14>
 8008f78:	f7ff f8de 	bl	8008138 <__sinit>
 8008f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f80:	0719      	lsls	r1, r3, #28
 8008f82:	d422      	bmi.n	8008fca <__swsetup_r+0x62>
 8008f84:	06da      	lsls	r2, r3, #27
 8008f86:	d407      	bmi.n	8008f98 <__swsetup_r+0x30>
 8008f88:	2209      	movs	r2, #9
 8008f8a:	602a      	str	r2, [r5, #0]
 8008f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f96:	e033      	b.n	8009000 <__swsetup_r+0x98>
 8008f98:	0758      	lsls	r0, r3, #29
 8008f9a:	d512      	bpl.n	8008fc2 <__swsetup_r+0x5a>
 8008f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f9e:	b141      	cbz	r1, 8008fb2 <__swsetup_r+0x4a>
 8008fa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fa4:	4299      	cmp	r1, r3
 8008fa6:	d002      	beq.n	8008fae <__swsetup_r+0x46>
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f7ff fa0f 	bl	80083cc <_free_r>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	6063      	str	r3, [r4, #4]
 8008fbe:	6923      	ldr	r3, [r4, #16]
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	f043 0308 	orr.w	r3, r3, #8
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	b94b      	cbnz	r3, 8008fe2 <__swsetup_r+0x7a>
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fd8:	d003      	beq.n	8008fe2 <__swsetup_r+0x7a>
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 f83f 	bl	8009060 <__smakebuf_r>
 8008fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe6:	f013 0201 	ands.w	r2, r3, #1
 8008fea:	d00a      	beq.n	8009002 <__swsetup_r+0x9a>
 8008fec:	2200      	movs	r2, #0
 8008fee:	60a2      	str	r2, [r4, #8]
 8008ff0:	6962      	ldr	r2, [r4, #20]
 8008ff2:	4252      	negs	r2, r2
 8008ff4:	61a2      	str	r2, [r4, #24]
 8008ff6:	6922      	ldr	r2, [r4, #16]
 8008ff8:	b942      	cbnz	r2, 800900c <__swsetup_r+0xa4>
 8008ffa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ffe:	d1c5      	bne.n	8008f8c <__swsetup_r+0x24>
 8009000:	bd38      	pop	{r3, r4, r5, pc}
 8009002:	0799      	lsls	r1, r3, #30
 8009004:	bf58      	it	pl
 8009006:	6962      	ldrpl	r2, [r4, #20]
 8009008:	60a2      	str	r2, [r4, #8]
 800900a:	e7f4      	b.n	8008ff6 <__swsetup_r+0x8e>
 800900c:	2000      	movs	r0, #0
 800900e:	e7f7      	b.n	8009000 <__swsetup_r+0x98>
 8009010:	20000030 	.word	0x20000030

08009014 <__swhatbuf_r>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	460c      	mov	r4, r1
 8009018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800901c:	2900      	cmp	r1, #0
 800901e:	b096      	sub	sp, #88	@ 0x58
 8009020:	4615      	mov	r5, r2
 8009022:	461e      	mov	r6, r3
 8009024:	da0d      	bge.n	8009042 <__swhatbuf_r+0x2e>
 8009026:	89a3      	ldrh	r3, [r4, #12]
 8009028:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800902c:	f04f 0100 	mov.w	r1, #0
 8009030:	bf14      	ite	ne
 8009032:	2340      	movne	r3, #64	@ 0x40
 8009034:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009038:	2000      	movs	r0, #0
 800903a:	6031      	str	r1, [r6, #0]
 800903c:	602b      	str	r3, [r5, #0]
 800903e:	b016      	add	sp, #88	@ 0x58
 8009040:	bd70      	pop	{r4, r5, r6, pc}
 8009042:	466a      	mov	r2, sp
 8009044:	f000 f872 	bl	800912c <_fstat_r>
 8009048:	2800      	cmp	r0, #0
 800904a:	dbec      	blt.n	8009026 <__swhatbuf_r+0x12>
 800904c:	9901      	ldr	r1, [sp, #4]
 800904e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009052:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009056:	4259      	negs	r1, r3
 8009058:	4159      	adcs	r1, r3
 800905a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800905e:	e7eb      	b.n	8009038 <__swhatbuf_r+0x24>

08009060 <__smakebuf_r>:
 8009060:	898b      	ldrh	r3, [r1, #12]
 8009062:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009064:	079d      	lsls	r5, r3, #30
 8009066:	4606      	mov	r6, r0
 8009068:	460c      	mov	r4, r1
 800906a:	d507      	bpl.n	800907c <__smakebuf_r+0x1c>
 800906c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	6123      	str	r3, [r4, #16]
 8009074:	2301      	movs	r3, #1
 8009076:	6163      	str	r3, [r4, #20]
 8009078:	b003      	add	sp, #12
 800907a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800907c:	ab01      	add	r3, sp, #4
 800907e:	466a      	mov	r2, sp
 8009080:	f7ff ffc8 	bl	8009014 <__swhatbuf_r>
 8009084:	9f00      	ldr	r7, [sp, #0]
 8009086:	4605      	mov	r5, r0
 8009088:	4639      	mov	r1, r7
 800908a:	4630      	mov	r0, r6
 800908c:	f7fe ff1c 	bl	8007ec8 <_malloc_r>
 8009090:	b948      	cbnz	r0, 80090a6 <__smakebuf_r+0x46>
 8009092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009096:	059a      	lsls	r2, r3, #22
 8009098:	d4ee      	bmi.n	8009078 <__smakebuf_r+0x18>
 800909a:	f023 0303 	bic.w	r3, r3, #3
 800909e:	f043 0302 	orr.w	r3, r3, #2
 80090a2:	81a3      	strh	r3, [r4, #12]
 80090a4:	e7e2      	b.n	800906c <__smakebuf_r+0xc>
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	6020      	str	r0, [r4, #0]
 80090aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ae:	81a3      	strh	r3, [r4, #12]
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090b6:	b15b      	cbz	r3, 80090d0 <__smakebuf_r+0x70>
 80090b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090bc:	4630      	mov	r0, r6
 80090be:	f000 f847 	bl	8009150 <_isatty_r>
 80090c2:	b128      	cbz	r0, 80090d0 <__smakebuf_r+0x70>
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	f023 0303 	bic.w	r3, r3, #3
 80090ca:	f043 0301 	orr.w	r3, r3, #1
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	431d      	orrs	r5, r3
 80090d4:	81a5      	strh	r5, [r4, #12]
 80090d6:	e7cf      	b.n	8009078 <__smakebuf_r+0x18>

080090d8 <memmove>:
 80090d8:	4288      	cmp	r0, r1
 80090da:	b510      	push	{r4, lr}
 80090dc:	eb01 0402 	add.w	r4, r1, r2
 80090e0:	d902      	bls.n	80090e8 <memmove+0x10>
 80090e2:	4284      	cmp	r4, r0
 80090e4:	4623      	mov	r3, r4
 80090e6:	d807      	bhi.n	80090f8 <memmove+0x20>
 80090e8:	1e43      	subs	r3, r0, #1
 80090ea:	42a1      	cmp	r1, r4
 80090ec:	d008      	beq.n	8009100 <memmove+0x28>
 80090ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090f6:	e7f8      	b.n	80090ea <memmove+0x12>
 80090f8:	4402      	add	r2, r0
 80090fa:	4601      	mov	r1, r0
 80090fc:	428a      	cmp	r2, r1
 80090fe:	d100      	bne.n	8009102 <memmove+0x2a>
 8009100:	bd10      	pop	{r4, pc}
 8009102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800910a:	e7f7      	b.n	80090fc <memmove+0x24>

0800910c <_close_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4d06      	ldr	r5, [pc, #24]	@ (8009128 <_close_r+0x1c>)
 8009110:	2300      	movs	r3, #0
 8009112:	4604      	mov	r4, r0
 8009114:	4608      	mov	r0, r1
 8009116:	602b      	str	r3, [r5, #0]
 8009118:	f7f8 fbf9 	bl	800190e <_close>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d102      	bne.n	8009126 <_close_r+0x1a>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	b103      	cbz	r3, 8009126 <_close_r+0x1a>
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	20006c60 	.word	0x20006c60

0800912c <_fstat_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d07      	ldr	r5, [pc, #28]	@ (800914c <_fstat_r+0x20>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	4611      	mov	r1, r2
 8009138:	602b      	str	r3, [r5, #0]
 800913a:	f7f8 fbf4 	bl	8001926 <_fstat>
 800913e:	1c43      	adds	r3, r0, #1
 8009140:	d102      	bne.n	8009148 <_fstat_r+0x1c>
 8009142:	682b      	ldr	r3, [r5, #0]
 8009144:	b103      	cbz	r3, 8009148 <_fstat_r+0x1c>
 8009146:	6023      	str	r3, [r4, #0]
 8009148:	bd38      	pop	{r3, r4, r5, pc}
 800914a:	bf00      	nop
 800914c:	20006c60 	.word	0x20006c60

08009150 <_isatty_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d06      	ldr	r5, [pc, #24]	@ (800916c <_isatty_r+0x1c>)
 8009154:	2300      	movs	r3, #0
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	f7f8 fbf3 	bl	8001946 <_isatty>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_isatty_r+0x1a>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_isatty_r+0x1a>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	20006c60 	.word	0x20006c60

08009170 <_lseek_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d07      	ldr	r5, [pc, #28]	@ (8009190 <_lseek_r+0x20>)
 8009174:	4604      	mov	r4, r0
 8009176:	4608      	mov	r0, r1
 8009178:	4611      	mov	r1, r2
 800917a:	2200      	movs	r2, #0
 800917c:	602a      	str	r2, [r5, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	f7f8 fbec 	bl	800195c <_lseek>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_lseek_r+0x1e>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_lseek_r+0x1e>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	20006c60 	.word	0x20006c60

08009194 <_read_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	@ (80091b4 <_read_r+0x20>)
 8009198:	4604      	mov	r4, r0
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f7f8 fb96 	bl	80018d4 <_read>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_read_r+0x1e>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_read_r+0x1e>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20006c60 	.word	0x20006c60

080091b8 <_write_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d07      	ldr	r5, [pc, #28]	@ (80091d8 <_write_r+0x20>)
 80091bc:	4604      	mov	r4, r0
 80091be:	4608      	mov	r0, r1
 80091c0:	4611      	mov	r1, r2
 80091c2:	2200      	movs	r2, #0
 80091c4:	602a      	str	r2, [r5, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f7f8 fc5a 	bl	8001a80 <_write>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_write_r+0x1e>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_write_r+0x1e>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	20006c60 	.word	0x20006c60

080091dc <memcpy>:
 80091dc:	440a      	add	r2, r1
 80091de:	4291      	cmp	r1, r2
 80091e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80091e4:	d100      	bne.n	80091e8 <memcpy+0xc>
 80091e6:	4770      	bx	lr
 80091e8:	b510      	push	{r4, lr}
 80091ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f2:	4291      	cmp	r1, r2
 80091f4:	d1f9      	bne.n	80091ea <memcpy+0xe>
 80091f6:	bd10      	pop	{r4, pc}

080091f8 <_malloc_usable_size_r>:
 80091f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091fc:	1f18      	subs	r0, r3, #4
 80091fe:	2b00      	cmp	r3, #0
 8009200:	bfbc      	itt	lt
 8009202:	580b      	ldrlt	r3, [r1, r0]
 8009204:	18c0      	addlt	r0, r0, r3
 8009206:	4770      	bx	lr

08009208 <_init>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr

08009214 <_fini>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	bf00      	nop
 8009218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921a:	bc08      	pop	{r3}
 800921c:	469e      	mov	lr, r3
 800921e:	4770      	bx	lr
